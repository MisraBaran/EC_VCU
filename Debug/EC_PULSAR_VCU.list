
EC_PULSAR_VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800c120  0800c120  0000d120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7b0  0800c7b0  0000e0e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7b0  0800c7b0  0000d7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7b8  0800c7b8  0000e0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7b8  0800c7b8  0000d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7bc  0800c7bc  0000d7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800c7c0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0e0  2**0
                  CONTENTS
 10 .bss          000029b8  200000e0  200000e0  0000e0e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002a98  20002a98  0000e0e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e92  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ac  00000000  00000000  00024fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  00028150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101a  00000000  00000000  000295f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00040475  00000000  00000000  0002a612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1a9  00000000  00000000  0006aa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de4f4  00000000  00000000  00085c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00164124  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dc4  00000000  00000000  00164168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00169f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c108 	.word	0x0800c108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	0800c108 	.word	0x0800c108

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <SELECT+0x18>)
 8000bc2:	f005 f9eb 	bl	8005f9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f003 fa06 	bl	8003fd8 <HAL_Delay>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4803      	ldr	r0, [pc, #12]	@ (8000bec <DESELECT+0x18>)
 8000bde:	f005 f9dd 	bl	8005f9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f003 f9f8 	bl	8003fd8 <HAL_Delay>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020000 	.word	0x40020000

08000bf0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bfa:	bf00      	nop
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <SPI_TxByte+0x30>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d1f8      	bne.n	8000bfc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c0a:	1df9      	adds	r1, r7, #7
 8000c0c:	2364      	movs	r3, #100	@ 0x64
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <SPI_TxByte+0x30>)
 8000c12:	f005 fefe 	bl	8006a12 <HAL_SPI_Transmit>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200025d0 	.word	0x200025d0

08000c24 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c30:	bf00      	nop
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <SPI_TxBuffer+0x30>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d1f8      	bne.n	8000c32 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	2364      	movs	r3, #100	@ 0x64
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <SPI_TxBuffer+0x30>)
 8000c48:	f005 fee3 	bl	8006a12 <HAL_SPI_Transmit>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200025d0 	.word	0x200025d0

08000c58 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c5e:	23ff      	movs	r3, #255	@ 0xff
 8000c60:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c62:	bf00      	nop
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <SPI_RxByte+0x34>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d1f8      	bne.n	8000c64 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c72:	1dba      	adds	r2, r7, #6
 8000c74:	1df9      	adds	r1, r7, #7
 8000c76:	2364      	movs	r3, #100	@ 0x64
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <SPI_RxByte+0x34>)
 8000c7e:	f006 f80b 	bl	8006c98 <HAL_SPI_TransmitReceive>

	return data;
 8000c82:	79bb      	ldrb	r3, [r7, #6]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200025d0 	.word	0x200025d0

08000c90 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c98:	f7ff ffde 	bl	8000c58 <SPI_RxByte>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	701a      	strb	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <SD_ReadyWait+0x30>)
 8000cb4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000cb8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000cba:	f7ff ffcd 	bl	8000c58 <SPI_RxByte>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2bff      	cmp	r3, #255	@ 0xff
 8000cc6:	d003      	beq.n	8000cd0 <SD_ReadyWait+0x24>
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SD_ReadyWait+0x30>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f4      	bne.n	8000cba <SD_ReadyWait+0xe>

	return res;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000fe 	.word	0x200000fe

08000ce0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000ce6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000cea:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cec:	f7ff ff72 	bl	8000bd4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	e005      	b.n	8000d02 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cf6:	20ff      	movs	r0, #255	@ 0xff
 8000cf8:	f7ff ff7a 	bl	8000bf0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b09      	cmp	r3, #9
 8000d06:	ddf6      	ble.n	8000cf6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000d08:	f7ff ff56 	bl	8000bb8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d0c:	2340      	movs	r3, #64	@ 0x40
 8000d0e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d20:	2395      	movs	r3, #149	@ 0x95
 8000d22:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d24:	463b      	mov	r3, r7
 8000d26:	2106      	movs	r1, #6
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff7b 	bl	8000c24 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d2e:	e002      	b.n	8000d36 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d36:	f7ff ff8f 	bl	8000c58 <SPI_RxByte>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d002      	beq.n	8000d46 <SD_PowerOn+0x66>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f4      	bne.n	8000d30 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d46:	f7ff ff45 	bl	8000bd4 <DESELECT>
	SPI_TxByte(0XFF);
 8000d4a:	20ff      	movs	r0, #255	@ 0xff
 8000d4c:	f7ff ff50 	bl	8000bf0 <SPI_TxByte>

	PowerFlag = 1;
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <SD_PowerOn+0x80>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000101 	.word	0x20000101

08000d64 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <SD_PowerOff+0x14>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000101 	.word	0x20000101

08000d7c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <SD_CheckPower+0x14>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000101 	.word	0x20000101

08000d94 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 =1000;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <SD_RxDataBlock+0x5c>)
 8000da0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000da4:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000da6:	f7ff ff57 	bl	8000c58 <SPI_RxByte>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2bff      	cmp	r3, #255	@ 0xff
 8000db2:	d103      	bne.n	8000dbc <SD_RxDataBlock+0x28>
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <SD_RxDataBlock+0x5c>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f4      	bne.n	8000da6 <SD_RxDataBlock+0x12>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dc0:	d001      	beq.n	8000dc6 <SD_RxDataBlock+0x32>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e00f      	b.n	8000de6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <SPI_RxBytePtr>
	} while(len--);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	603a      	str	r2, [r7, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f4      	bne.n	8000dc6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ddc:	f7ff ff3c 	bl	8000c58 <SPI_RxByte>
	SPI_RxByte();
 8000de0:	f7ff ff3a 	bl	8000c58 <SPI_RxByte>

	return TRUE;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000fc 	.word	0x200000fc

08000df4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e04:	f7ff ff52 	bl	8000cac <SD_ReadyWait>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2bff      	cmp	r3, #255	@ 0xff
 8000e0c:	d001      	beq.n	8000e12 <SD_TxDataBlock+0x1e>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e02f      	b.n	8000e72 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff feeb 	bl	8000bf0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e1e:	d020      	beq.n	8000e62 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fefd 	bl	8000c24 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e2a:	f7ff ff15 	bl	8000c58 <SPI_RxByte>
		SPI_RxByte();
 8000e2e:	f7ff ff13 	bl	8000c58 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e32:	e00b      	b.n	8000e4c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e34:	f7ff ff10 	bl	8000c58 <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d006      	beq.n	8000e54 <SD_TxDataBlock+0x60>
			i++;
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	2b40      	cmp	r3, #64	@ 0x40
 8000e50:	d9f0      	bls.n	8000e34 <SD_TxDataBlock+0x40>
 8000e52:	e000      	b.n	8000e56 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e54:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e56:	bf00      	nop
 8000e58:	f7ff fefe 	bl	8000c58 <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0fa      	beq.n	8000e58 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	f003 031f 	and.w	r3, r3, #31
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d101      	bne.n	8000e70 <SD_TxDataBlock+0x7c>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	6039      	str	r1, [r7, #0]
 8000e84:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e86:	f7ff ff11 	bl	8000cac <SD_ReadyWait>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2bff      	cmp	r3, #255	@ 0xff
 8000e8e:	d001      	beq.n	8000e94 <SD_SendCmd+0x1a>
 8000e90:	23ff      	movs	r3, #255	@ 0xff
 8000e92:	e042      	b.n	8000f1a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff feaa 	bl	8000bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	0e1b      	lsrs	r3, r3, #24
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fea4 	bl	8000bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe9e 	bl	8000bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe98 	bl	8000bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe93 	bl	8000bf0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b40      	cmp	r3, #64	@ 0x40
 8000ece:	d102      	bne.n	8000ed6 <SD_SendCmd+0x5c>
 8000ed0:	2395      	movs	r3, #149	@ 0x95
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e007      	b.n	8000ee6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b48      	cmp	r3, #72	@ 0x48
 8000eda:	d102      	bne.n	8000ee2 <SD_SendCmd+0x68>
 8000edc:	2387      	movs	r3, #135	@ 0x87
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e001      	b.n	8000ee6 <SD_SendCmd+0x6c>
	else crc = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe81 	bl	8000bf0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ef2:	d101      	bne.n	8000ef8 <SD_SendCmd+0x7e>
 8000ef4:	f7ff feb0 	bl	8000c58 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ef8:	230a      	movs	r3, #10
 8000efa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000efc:	f7ff feac 	bl	8000c58 <SPI_RxByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da05      	bge.n	8000f18 <SD_SendCmd+0x9e>
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	73bb      	strb	r3, [r7, #14]
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f1      	bne.n	8000efc <SD_SendCmd+0x82>

	return res;
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SD_disk_initialize+0x14>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0d1      	b.n	80010dc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f38:	4b6a      	ldr	r3, [pc, #424]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <SD_disk_initialize+0x2a>
 8000f46:	4b67      	ldr	r3, [pc, #412]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	e0c6      	b.n	80010dc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f4e:	f7ff fec7 	bl	8000ce0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f52:	f7ff fe31 	bl	8000bb8 <SELECT>

	/* check disk type */
	type = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2040      	movs	r0, #64	@ 0x40
 8000f5e:	f7ff ff8c 	bl	8000e7a <SD_SendCmd>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	f040 80a1 	bne.w	80010ac <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000f6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f70:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f72:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f76:	2048      	movs	r0, #72	@ 0x48
 8000f78:	f7ff ff7f 	bl	8000e7a <SD_SendCmd>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d155      	bne.n	800102e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e00c      	b.n	8000fa2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f88:	7bfc      	ldrb	r4, [r7, #15]
 8000f8a:	f7ff fe65 	bl	8000c58 <SPI_RxByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	f104 0310 	add.w	r3, r4, #16
 8000f96:	443b      	add	r3, r7
 8000f98:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d9ef      	bls.n	8000f88 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fa8:	7abb      	ldrb	r3, [r7, #10]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d17e      	bne.n	80010ac <SD_disk_initialize+0x188>
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	2baa      	cmp	r3, #170	@ 0xaa
 8000fb2:	d17b      	bne.n	80010ac <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2077      	movs	r0, #119	@ 0x77
 8000fb8:	f7ff ff5f 	bl	8000e7a <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d807      	bhi.n	8000fd2 <SD_disk_initialize+0xae>
 8000fc2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fc6:	2069      	movs	r0, #105	@ 0x69
 8000fc8:	f7ff ff57 	bl	8000e7a <SD_SendCmd>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000fd2:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1ec      	bne.n	8000fb4 <SD_disk_initialize+0x90>
 8000fda:	e000      	b.n	8000fde <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fdc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fde:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d062      	beq.n	80010ac <SD_disk_initialize+0x188>
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	207a      	movs	r0, #122	@ 0x7a
 8000fea:	f7ff ff46 	bl	8000e7a <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d15b      	bne.n	80010ac <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e00c      	b.n	8001014 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000ffa:	7bfc      	ldrb	r4, [r7, #15]
 8000ffc:	f7ff fe2c 	bl	8000c58 <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	f104 0310 	add.w	r3, r4, #16
 8001008:	443b      	add	r3, r7
 800100a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d9ef      	bls.n	8000ffa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800101a:	7a3b      	ldrb	r3, [r7, #8]
 800101c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SD_disk_initialize+0x104>
 8001024:	230c      	movs	r3, #12
 8001026:	e000      	b.n	800102a <SD_disk_initialize+0x106>
 8001028:	2304      	movs	r3, #4
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e03e      	b.n	80010ac <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800102e:	2100      	movs	r1, #0
 8001030:	2077      	movs	r0, #119	@ 0x77
 8001032:	f7ff ff22 	bl	8000e7a <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d808      	bhi.n	800104e <SD_disk_initialize+0x12a>
 800103c:	2100      	movs	r1, #0
 800103e:	2069      	movs	r0, #105	@ 0x69
 8001040:	f7ff ff1b 	bl	8000e7a <SD_SendCmd>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d801      	bhi.n	800104e <SD_disk_initialize+0x12a>
 800104a:	2302      	movs	r3, #2
 800104c:	e000      	b.n	8001050 <SD_disk_initialize+0x12c>
 800104e:	2301      	movs	r3, #1
 8001050:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d10e      	bne.n	8001076 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001058:	2100      	movs	r1, #0
 800105a:	2077      	movs	r0, #119	@ 0x77
 800105c:	f7ff ff0d 	bl	8000e7a <SD_SendCmd>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d80e      	bhi.n	8001084 <SD_disk_initialize+0x160>
 8001066:	2100      	movs	r1, #0
 8001068:	2069      	movs	r0, #105	@ 0x69
 800106a:	f7ff ff06 	bl	8000e7a <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <SD_disk_initialize+0x160>
 8001074:	e00c      	b.n	8001090 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001076:	2100      	movs	r1, #0
 8001078:	2041      	movs	r0, #65	@ 0x41
 800107a:	f7ff fefe 	bl	8000e7a <SD_SendCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e2      	bne.n	8001052 <SD_disk_initialize+0x12e>
 800108c:	e000      	b.n	8001090 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800108e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <SD_disk_initialize+0x184>
 8001098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109c:	2050      	movs	r0, #80	@ 0x50
 800109e:	f7ff feec 	bl	8000e7a <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SD_disk_initialize+0x188>
 80010a8:	2300      	movs	r3, #0
 80010aa:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <SD_disk_initialize+0x1c8>)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010b2:	f7ff fd8f 	bl	8000bd4 <DESELECT>
	SPI_RxByte();
 80010b6:	f7ff fdcf 	bl	8000c58 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d008      	beq.n	80010d2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e001      	b.n	80010d6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010d2:	f7ff fe47 	bl	8000d64 <SD_PowerOff>
	}

	return Stat;
 80010d6:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	200000fc 	.word	0x200000fc
 80010ec:	20000100 	.word	0x20000100

080010f0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SD_disk_status+0x14>
 8001100:	2301      	movs	r3, #1
 8001102:	e002      	b.n	800110a <SD_disk_status+0x1a>
	return Stat;
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <SD_disk_status+0x28>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000000 	.word	0x20000000

0800111c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <SD_disk_read+0x1c>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <SD_disk_read+0x20>
 8001138:	2304      	movs	r3, #4
 800113a:	e051      	b.n	80011e0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <SD_disk_read+0xcc>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SD_disk_read+0x32>
 800114a:	2303      	movs	r3, #3
 800114c:	e048      	b.n	80011e0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800114e:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <SD_disk_read+0xd0>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <SD_disk_read+0x44>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	025b      	lsls	r3, r3, #9
 800115e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001160:	f7ff fd2a 	bl	8000bb8 <SELECT>

	if (count == 1)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d111      	bne.n	800118e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2051      	movs	r0, #81	@ 0x51
 800116e:	f7ff fe84 	bl	8000e7a <SD_SendCmd>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d129      	bne.n	80011cc <SD_disk_read+0xb0>
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff fe09 	bl	8000d94 <SD_RxDataBlock>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d021      	beq.n	80011cc <SD_disk_read+0xb0>
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	e01e      	b.n	80011cc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	2052      	movs	r0, #82	@ 0x52
 8001192:	f7ff fe72 	bl	8000e7a <SD_SendCmd>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d117      	bne.n	80011cc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800119c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f7ff fdf7 	bl	8000d94 <SD_RxDataBlock>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00a      	beq.n	80011c2 <SD_disk_read+0xa6>
				buff += 512;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ed      	bne.n	800119c <SD_disk_read+0x80>
 80011c0:	e000      	b.n	80011c4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011c2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011c4:	2100      	movs	r1, #0
 80011c6:	204c      	movs	r0, #76	@ 0x4c
 80011c8:	f7ff fe57 	bl	8000e7a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011cc:	f7ff fd02 	bl	8000bd4 <DESELECT>
	SPI_RxByte();
 80011d0:	f7ff fd42 	bl	8000c58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf14      	ite	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	2300      	moveq	r3, #0
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000100 	.word	0x20000100

080011f0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <SD_disk_write+0x1c>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <SD_disk_write+0x20>
 800120c:	2304      	movs	r3, #4
 800120e:	e06b      	b.n	80012e8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001210:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <SD_disk_write+0x100>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SD_disk_write+0x32>
 800121e:	2303      	movs	r3, #3
 8001220:	e062      	b.n	80012e8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <SD_disk_write+0x100>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SD_disk_write+0x44>
 8001230:	2302      	movs	r3, #2
 8001232:	e059      	b.n	80012e8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001234:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <SD_disk_write+0x104>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <SD_disk_write+0x56>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	607b      	str	r3, [r7, #4]

	SELECT();
 8001246:	f7ff fcb7 	bl	8000bb8 <SELECT>

	if (count == 1)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d110      	bne.n	8001272 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	2058      	movs	r0, #88	@ 0x58
 8001254:	f7ff fe11 	bl	8000e7a <SD_SendCmd>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d13a      	bne.n	80012d4 <SD_disk_write+0xe4>
 800125e:	21fe      	movs	r1, #254	@ 0xfe
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff fdc7 	bl	8000df4 <SD_TxDataBlock>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d033      	beq.n	80012d4 <SD_disk_write+0xe4>
			count = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	e030      	b.n	80012d4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <SD_disk_write+0x104>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800127e:	2100      	movs	r1, #0
 8001280:	2077      	movs	r0, #119	@ 0x77
 8001282:	f7ff fdfa 	bl	8000e7a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	2057      	movs	r0, #87	@ 0x57
 800128a:	f7ff fdf6 	bl	8000e7a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2059      	movs	r0, #89	@ 0x59
 8001292:	f7ff fdf2 	bl	8000e7a <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11b      	bne.n	80012d4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800129c:	21fc      	movs	r1, #252	@ 0xfc
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f7ff fda8 	bl	8000df4 <SD_TxDataBlock>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <SD_disk_write+0xd0>
				buff += 512;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1ee      	bne.n	800129c <SD_disk_write+0xac>
 80012be:	e000      	b.n	80012c2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012c0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012c2:	21fd      	movs	r1, #253	@ 0xfd
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fd95 	bl	8000df4 <SD_TxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <SD_disk_write+0xe4>
			{
				count = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012d4:	f7ff fc7e 	bl	8000bd4 <DESELECT>
	SPI_RxByte();
 80012d8:	f7ff fcbe 	bl	8000c58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000100 	.word	0x20000100

080012f8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	@ 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SD_disk_ioctl+0x1e>
 8001312:	2304      	movs	r3, #4
 8001314:	e113      	b.n	800153e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d124      	bne.n	800136c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d012      	beq.n	8001350 <SD_disk_ioctl+0x58>
 800132a:	2b02      	cmp	r3, #2
 800132c:	dc1a      	bgt.n	8001364 <SD_disk_ioctl+0x6c>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <SD_disk_ioctl+0x40>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d006      	beq.n	8001344 <SD_disk_ioctl+0x4c>
 8001336:	e015      	b.n	8001364 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001338:	f7ff fd14 	bl	8000d64 <SD_PowerOff>
			res = RES_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001342:	e0fa      	b.n	800153a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001344:	f7ff fccc 	bl	8000ce0 <SD_PowerOn>
			res = RES_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800134e:	e0f4      	b.n	800153a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	1c5c      	adds	r4, r3, #1
 8001354:	f7ff fd12 	bl	8000d7c <SD_CheckPower>
 8001358:	4603      	mov	r3, r0
 800135a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001362:	e0ea      	b.n	800153a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001364:	2304      	movs	r3, #4
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800136a:	e0e6      	b.n	800153a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800136c:	4b76      	ldr	r3, [pc, #472]	@ (8001548 <SD_disk_ioctl+0x250>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SD_disk_ioctl+0x86>
 800137a:	2303      	movs	r3, #3
 800137c:	e0df      	b.n	800153e <SD_disk_ioctl+0x246>

		SELECT();
 800137e:	f7ff fc1b 	bl	8000bb8 <SELECT>

		switch (ctrl)
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b0d      	cmp	r3, #13
 8001386:	f200 80c9 	bhi.w	800151c <SD_disk_ioctl+0x224>
 800138a:	a201      	add	r2, pc, #4	@ (adr r2, 8001390 <SD_disk_ioctl+0x98>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	08001487 	.word	0x08001487
 8001394:	080013c9 	.word	0x080013c9
 8001398:	08001477 	.word	0x08001477
 800139c:	0800151d 	.word	0x0800151d
 80013a0:	0800151d 	.word	0x0800151d
 80013a4:	0800151d 	.word	0x0800151d
 80013a8:	0800151d 	.word	0x0800151d
 80013ac:	0800151d 	.word	0x0800151d
 80013b0:	0800151d 	.word	0x0800151d
 80013b4:	0800151d 	.word	0x0800151d
 80013b8:	0800151d 	.word	0x0800151d
 80013bc:	08001499 	.word	0x08001499
 80013c0:	080014bd 	.word	0x080014bd
 80013c4:	080014e1 	.word	0x080014e1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013c8:	2100      	movs	r1, #0
 80013ca:	2049      	movs	r0, #73	@ 0x49
 80013cc:	f7ff fd55 	bl	8000e7a <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80a6 	bne.w	8001524 <SD_disk_ioctl+0x22c>
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2110      	movs	r1, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fcd8 	bl	8000d94 <SD_RxDataBlock>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 809c 	beq.w	8001524 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10d      	bne.n	8001412 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	461a      	mov	r2, r3
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	3301      	adds	r3, #1
 8001406:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001408:	8bfb      	ldrh	r3, [r7, #30]
 800140a:	029a      	lsls	r2, r3, #10
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e02d      	b.n	800146e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001412:	7c7b      	ldrb	r3, [r7, #17]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	b2da      	uxtb	r2, r3
 800141a:	7dbb      	ldrb	r3, [r7, #22]
 800141c:	09db      	lsrs	r3, r3, #7
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	7d7b      	ldrb	r3, [r7, #21]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f003 0306 	and.w	r3, r3, #6
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3302      	adds	r3, #2
 8001436:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	b29a      	uxth	r2, r3
 800144c:	7cbb      	ldrb	r3, [r7, #18]
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	b29b      	uxth	r3, r3
 8001452:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b29b      	uxth	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001460:	8bfa      	ldrh	r2, [r7, #30]
 8001462:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001466:	3b09      	subs	r3, #9
 8001468:	409a      	lsls	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001474:	e056      	b.n	8001524 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001484:	e055      	b.n	8001532 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001486:	f7ff fc11 	bl	8000cac <SD_ReadyWait>
 800148a:	4603      	mov	r3, r0
 800148c:	2bff      	cmp	r3, #255	@ 0xff
 800148e:	d14b      	bne.n	8001528 <SD_disk_ioctl+0x230>
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001496:	e047      	b.n	8001528 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001498:	2100      	movs	r1, #0
 800149a:	2049      	movs	r0, #73	@ 0x49
 800149c:	f7ff fced 	bl	8000e7a <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d142      	bne.n	800152c <SD_disk_ioctl+0x234>
 80014a6:	2110      	movs	r1, #16
 80014a8:	6a38      	ldr	r0, [r7, #32]
 80014aa:	f7ff fc73 	bl	8000d94 <SD_RxDataBlock>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d03b      	beq.n	800152c <SD_disk_ioctl+0x234>
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014ba:	e037      	b.n	800152c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014bc:	2100      	movs	r1, #0
 80014be:	204a      	movs	r0, #74	@ 0x4a
 80014c0:	f7ff fcdb 	bl	8000e7a <SD_SendCmd>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d132      	bne.n	8001530 <SD_disk_ioctl+0x238>
 80014ca:	2110      	movs	r1, #16
 80014cc:	6a38      	ldr	r0, [r7, #32]
 80014ce:	f7ff fc61 	bl	8000d94 <SD_RxDataBlock>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d02b      	beq.n	8001530 <SD_disk_ioctl+0x238>
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014de:	e027      	b.n	8001530 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014e0:	2100      	movs	r1, #0
 80014e2:	207a      	movs	r0, #122	@ 0x7a
 80014e4:	f7ff fcc9 	bl	8000e7a <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014f4:	e00b      	b.n	800150e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80014f6:	6a3c      	ldr	r4, [r7, #32]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	f7ff fbac 	bl	8000c58 <SPI_RxByte>
 8001500:	4603      	mov	r3, r0
 8001502:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001504:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001508:	3301      	adds	r3, #1
 800150a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800150e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001512:	2b03      	cmp	r3, #3
 8001514:	d9ef      	bls.n	80014f6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800151c:	2304      	movs	r3, #4
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001522:	e006      	b.n	8001532 <SD_disk_ioctl+0x23a>
			break;
 8001524:	bf00      	nop
 8001526:	e004      	b.n	8001532 <SD_disk_ioctl+0x23a>
			break;
 8001528:	bf00      	nop
 800152a:	e002      	b.n	8001532 <SD_disk_ioctl+0x23a>
			break;
 800152c:	bf00      	nop
 800152e:	e000      	b.n	8001532 <SD_disk_ioctl+0x23a>
			break;
 8001530:	bf00      	nop
		}

		DESELECT();
 8001532:	f7ff fb4f 	bl	8000bd4 <DESELECT>
		SPI_RxByte();
 8001536:	f7ff fb8f 	bl	8000c58 <SPI_RxByte>
	}

	return res;
 800153a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800153e:	4618      	mov	r0, r3
 8001540:	372c      	adds	r7, #44	@ 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000

0800154c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_ADC_ConvCpltCallback+0x28>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d104      	bne.n	8001568 <HAL_ADC_ConvCpltCallback+0x1c>
		{
		//Temperature Read DMA
		data1 = adc_value[0];
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_ADC_ConvCpltCallback+0x30>)
 8001566:	801a      	strh	r2, [r3, #0]
		}
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40012000 	.word	0x40012000
 8001578:	200024f8 	.word	0x200024f8
 800157c:	200024f4 	.word	0x200024f4

08001580 <Curr>:
double Curr (int akim){  //Throttle Function for in While Working
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	  current = akim;
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <Curr+0x68>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
	  current = current * (-0.01);
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <Curr+0x68>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f8e8 	bl	8000768 <__aeabi_i2d>
 8001598:	a311      	add	r3, pc, #68	@ (adr r3, 80015e0 <Curr+0x60>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7fe fe67 	bl	8000270 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff f947 	bl	800083c <__aeabi_d2iz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <Curr+0x68>)
 80015b2:	6013      	str	r3, [r2, #0]
	  current = current +62-31 -1,3;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <Curr+0x68>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	331e      	adds	r3, #30
 80015ba:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <Curr+0x68>)
 80015bc:	6013      	str	r3, [r2, #0]
	  return current;
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <Curr+0x68>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f8d0 	bl	8000768 <__aeabi_i2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80015d0:	eeb0 0a47 	vmov.f32	s0, s14
 80015d4:	eef0 0a67 	vmov.f32	s1, s15
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	47ae147b 	.word	0x47ae147b
 80015e4:	bf847ae1 	.word	0xbf847ae1
 80015e8:	200024fc 	.word	0x200024fc

080015ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fc:	f040 80df 	bne.w	80017be <HAL_TIM_PeriodElapsedCallback+0x1d2>
	  count1++;
 8001600:	4b72      	ldr	r3, [pc, #456]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b70      	ldr	r3, [pc, #448]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800160a:	801a      	strh	r2, [r3, #0]
	  bms_timer++;
 800160c:	4b70      	ldr	r3, [pc, #448]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3301      	adds	r3, #1
 8001612:	4a6f      	ldr	r2, [pc, #444]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001614:	6013      	str	r3, [r2, #0]
	  motor_timer++;
 8001616:	4b6f      	ldr	r3, [pc, #444]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a6d      	ldr	r2, [pc, #436]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800161e:	6013      	str	r3, [r2, #0]
	  if (bms_timer > CAN_TIMEOUT) {
 8001620:	4b6b      	ldr	r3, [pc, #428]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b28      	cmp	r3, #40	@ 0x28
 8001626:	f240 80af 	bls.w	8001788 <HAL_TIM_PeriodElapsedCallback+0x19c>
		  	  	int_sicaklik = 0;
 800162a:	4b6b      	ldr	r3, [pc, #428]	@ (80017d8 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
		  	    int_hucre1 = 0;
 8001630:	4b6a      	ldr	r3, [pc, #424]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
		  	    int_hucre2 = 0;
 8001636:	4b6a      	ldr	r3, [pc, #424]	@ (80017e0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
		  	    int_hucre3 =0;
 800163c:	4b69      	ldr	r3, [pc, #420]	@ (80017e4 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
		  	    int_hucre4=0;
 8001642:	4b69      	ldr	r3, [pc, #420]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
		  	    int_hucre5=0;
 8001648:	4b68      	ldr	r3, [pc, #416]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x200>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
		  	    int_hucre6=0;
 800164e:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
		  	    int_hucre7=0;
 8001654:	4b67      	ldr	r3, [pc, #412]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
		  	    int_hucre8=0;
 800165a:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
		  	    int_hucre9=0;
 8001660:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
		  	    int_hucre10=0;
 8001666:	4b66      	ldr	r3, [pc, #408]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
		  	    int_hucre11=0;
 800166c:	4b65      	ldr	r3, [pc, #404]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
		  	    int_hucre12=0;
 8001672:	4b65      	ldr	r3, [pc, #404]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
		  	    int_hucre13=0;
 8001678:	4b64      	ldr	r3, [pc, #400]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
		  	    int_hucre14=0;
 800167e:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
		  	    int_hucre15=0;
 8001684:	4b63      	ldr	r3, [pc, #396]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
		  	    int_hucre16=0;
 800168a:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
		  	    int_hucre17=0;
 8001690:	4b62      	ldr	r3, [pc, #392]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
		        int_hucre18=0;
 8001696:	4b62      	ldr	r3, [pc, #392]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
		  	    int_hucre19=0;
 800169c:	4b61      	ldr	r3, [pc, #388]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
		  	    int_hucre20=0;
 80016a2:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
		  	    int_hucre21=0;
 80016a8:	4b60      	ldr	r3, [pc, #384]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
		  	    int_hucre22=0;
 80016ae:	4b60      	ldr	r3, [pc, #384]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
		  	    int_toplam_gerilim=0;
 80016b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
		  	    int_kalan_enerj_miktari=0;
 80016ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
	            sicaklik = 0;
 80016c0:	4b5e      	ldr	r3, [pc, #376]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
	            hucre1 = 0;
 80016c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
	            hucre2 = 0;
 80016d0:	4b5c      	ldr	r3, [pc, #368]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
	            hucre3 = 0;
 80016d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
	            hucre4 = 0;
 80016e0:	4b5a      	ldr	r3, [pc, #360]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
	            hucre5 = 0;
 80016e8:	4b59      	ldr	r3, [pc, #356]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
	            hucre6 = 0;
 80016f0:	4b58      	ldr	r3, [pc, #352]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
	            hucre7 = 0;
 80016f8:	4b57      	ldr	r3, [pc, #348]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
	            hucre8 = 0;
 8001700:	4b56      	ldr	r3, [pc, #344]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
	            hucre9 = 0;
 8001708:	4b55      	ldr	r3, [pc, #340]	@ (8001860 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
	            hucre10 = 0;
 8001710:	4b54      	ldr	r3, [pc, #336]	@ (8001864 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
	            hucre11 = 0;
 8001718:	4b53      	ldr	r3, [pc, #332]	@ (8001868 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
	            hucre12 = 0;
 8001720:	4b52      	ldr	r3, [pc, #328]	@ (800186c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
	            hucre13 = 0;
 8001728:	4b51      	ldr	r3, [pc, #324]	@ (8001870 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
	            hucre14 = 0;
 8001730:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
	            hucre15 = 0;
 8001738:	4b4f      	ldr	r3, [pc, #316]	@ (8001878 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
	            hucre16 = 0;
 8001740:	4b4e      	ldr	r3, [pc, #312]	@ (800187c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
	            hucre17 = 0;
 8001748:	4b4d      	ldr	r3, [pc, #308]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
	            hucre18 = 0;
 8001750:	4b4c      	ldr	r3, [pc, #304]	@ (8001884 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	            hucre19 = 0;
 8001758:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
	            hucre20 = 0;
 8001760:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	            hucre21 = 0;
 8001768:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
	            hucre22 = 0;
 8001770:	4b48      	ldr	r3, [pc, #288]	@ (8001894 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
	            toplam_gerilim = 0;
 8001778:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
	            kalan_enerj_miktari = 0;
 8001780:	4b46      	ldr	r3, [pc, #280]	@ (800189c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
	        }
	  if (motor_timer > CAN_TIMEOUT) {
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b28      	cmp	r3, #40	@ 0x28
 800178e:	d916      	bls.n	80017be <HAL_TIM_PeriodElapsedCallback+0x1d2>
		        motor_temp_tam=0;
 8001790:	4b43      	ldr	r3, [pc, #268]	@ (80018a0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001792:	2200      	movs	r2, #0
 8001794:	801a      	strh	r2, [r3, #0]
		        motor_temp_on=0;
 8001796:	4b43      	ldr	r3, [pc, #268]	@ (80018a4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
		        surucu_temp_tam=0;
 800179c:	4b42      	ldr	r3, [pc, #264]	@ (80018a8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	801a      	strh	r2, [r3, #0]
		        surucu_temp_on=0;
 80017a2:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	801a      	strh	r2, [r3, #0]
	            arac_hiz = 0;
 80017a8:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	801a      	strh	r2, [r3, #0]
	            motor_temp = 0.0f;
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
	            surucu_temp = 0.0f;
 80017b6:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
	          }



  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200021d4 	.word	0x200021d4
 80017d0:	200021d8 	.word	0x200021d8
 80017d4:	200021dc 	.word	0x200021dc
 80017d8:	20002248 	.word	0x20002248
 80017dc:	2000224c 	.word	0x2000224c
 80017e0:	20002250 	.word	0x20002250
 80017e4:	20002254 	.word	0x20002254
 80017e8:	20002258 	.word	0x20002258
 80017ec:	2000225c 	.word	0x2000225c
 80017f0:	20002260 	.word	0x20002260
 80017f4:	20002264 	.word	0x20002264
 80017f8:	20002268 	.word	0x20002268
 80017fc:	2000226c 	.word	0x2000226c
 8001800:	20002270 	.word	0x20002270
 8001804:	20002274 	.word	0x20002274
 8001808:	20002278 	.word	0x20002278
 800180c:	2000227c 	.word	0x2000227c
 8001810:	20002280 	.word	0x20002280
 8001814:	20002284 	.word	0x20002284
 8001818:	20002288 	.word	0x20002288
 800181c:	2000228c 	.word	0x2000228c
 8001820:	20002290 	.word	0x20002290
 8001824:	20002294 	.word	0x20002294
 8001828:	20002298 	.word	0x20002298
 800182c:	2000229c 	.word	0x2000229c
 8001830:	200022a0 	.word	0x200022a0
 8001834:	200022a4 	.word	0x200022a4
 8001838:	200022a8 	.word	0x200022a8
 800183c:	200021e4 	.word	0x200021e4
 8001840:	200021e8 	.word	0x200021e8
 8001844:	200021ec 	.word	0x200021ec
 8001848:	200021f0 	.word	0x200021f0
 800184c:	200021f4 	.word	0x200021f4
 8001850:	200021f8 	.word	0x200021f8
 8001854:	200021fc 	.word	0x200021fc
 8001858:	20002200 	.word	0x20002200
 800185c:	20002204 	.word	0x20002204
 8001860:	20002208 	.word	0x20002208
 8001864:	2000220c 	.word	0x2000220c
 8001868:	20002210 	.word	0x20002210
 800186c:	20002214 	.word	0x20002214
 8001870:	20002218 	.word	0x20002218
 8001874:	2000221c 	.word	0x2000221c
 8001878:	20002220 	.word	0x20002220
 800187c:	20002224 	.word	0x20002224
 8001880:	20002228 	.word	0x20002228
 8001884:	2000222c 	.word	0x2000222c
 8001888:	20002230 	.word	0x20002230
 800188c:	20002234 	.word	0x20002234
 8001890:	20002238 	.word	0x20002238
 8001894:	2000223c 	.word	0x2000223c
 8001898:	20002240 	.word	0x20002240
 800189c:	20002244 	.word	0x20002244
 80018a0:	200021ba 	.word	0x200021ba
 80018a4:	200021bc 	.word	0x200021bc
 80018a8:	200021be 	.word	0x200021be
 80018ac:	200021c0 	.word	0x200021c0
 80018b0:	200021b8 	.word	0x200021b8
 80018b4:	200021c4 	.word	0x200021c4
 80018b8:	200021c8 	.word	0x200021c8

080018bc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

    return;
    }

}*/
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &pRxHeader, rxData) == HAL_OK) {
 80018c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80018c6:	4a8f      	ldr	r2, [pc, #572]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f003 f9d0 	bl	8004c70 <HAL_CAN_GetRxMessage>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 83f2 	bne.w	80020bc <HAL_CAN_RxFifo0MsgPendingCallback+0x800>
	        if (pRxHeader.StdId == 0x0127 || pRxHeader.StdId == 0x0128) {
 80018d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f240 1227 	movw	r2, #295	@ 0x127
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d004      	beq.n	80018ee <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 80018e4:	4b87      	ldr	r3, [pc, #540]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 80018ec:	d17b      	bne.n	80019e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
	            // motor sürücü verileri alındı
	            motor_timer = 0; // Zamanlayıcıyı sıfırla
 80018ee:	4b86      	ldr	r3, [pc, #536]	@ (8001b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]


	            if (pRxHeader.StdId == 0x0127) {
 80018f4:	4b83      	ldr	r3, [pc, #524]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f240 1227 	movw	r2, #295	@ 0x127
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d149      	bne.n	8001994 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
	                arac_hiz = (uint16_t)(rxData[0] | (rxData[1] << 8));
 8001900:	4b7f      	ldr	r3, [pc, #508]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b21a      	sxth	r2, r3
 8001906:	4b7e      	ldr	r3, [pc, #504]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	b21b      	sxth	r3, r3
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	b21b      	sxth	r3, r3
 8001910:	4313      	orrs	r3, r2
 8001912:	b21b      	sxth	r3, r3
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b7d      	ldr	r3, [pc, #500]	@ (8001b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8001918:	801a      	strh	r2, [r3, #0]
	                motor_temp_tam = (uint16_t)(rxData[2] | (rxData[3] << 8));
 800191a:	4b79      	ldr	r3, [pc, #484]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 800191c:	789b      	ldrb	r3, [r3, #2]
 800191e:	b21a      	sxth	r2, r3
 8001920:	4b77      	ldr	r3, [pc, #476]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001922:	78db      	ldrb	r3, [r3, #3]
 8001924:	b21b      	sxth	r3, r3
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b77      	ldr	r3, [pc, #476]	@ (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001932:	801a      	strh	r2, [r3, #0]
	                motor_temp_on = (uint16_t)(rxData[4] | (rxData[5] << 8));
 8001934:	4b72      	ldr	r3, [pc, #456]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001936:	791b      	ldrb	r3, [r3, #4]
 8001938:	b21a      	sxth	r2, r3
 800193a:	4b71      	ldr	r3, [pc, #452]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 800193c:	795b      	ldrb	r3, [r3, #5]
 800193e:	b21b      	sxth	r3, r3
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21b      	sxth	r3, r3
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b72      	ldr	r3, [pc, #456]	@ (8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 800194c:	801a      	strh	r2, [r3, #0]
	                surucu_temp_tam = (uint16_t)(rxData[6] | (rxData[7] << 8));
 800194e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001950:	799b      	ldrb	r3, [r3, #6]
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b6a      	ldr	r3, [pc, #424]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001956:	79db      	ldrb	r3, [r3, #7]
 8001958:	b21b      	sxth	r3, r3
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21b      	sxth	r3, r3
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b6c      	ldr	r3, [pc, #432]	@ (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001966:	801a      	strh	r2, [r3, #0]
	                motor_temp = motor_temp_tam + (motor_temp_on / 100.0f);
 8001968:	4b69      	ldr	r3, [pc, #420]	@ (8001b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	4b67      	ldr	r3, [pc, #412]	@ (8001b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001980:	ed9f 6a66 	vldr	s12, [pc, #408]	@ 8001b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x260>
 8001984:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	4b64      	ldr	r3, [pc, #400]	@ (8001b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 800198e:	edc3 7a00 	vstr	s15, [r3]
	            if (pRxHeader.StdId == 0x0127) {
 8001992:	e391      	b.n	80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7fc>
	            } else if (pRxHeader.StdId == 0x0128) {
 8001994:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 800199c:	f040 838c 	bne.w	80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7fc>
	                surucu_temp_on = (uint16_t)(rxData[0] | (rxData[1] << 8));
 80019a0:	4b57      	ldr	r3, [pc, #348]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b56      	ldr	r3, [pc, #344]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80019b8:	801a      	strh	r2, [r3, #0]
	                surucu_temp = surucu_temp_tam + (surucu_temp_on / 100.0f);
 80019ba:	4b57      	ldr	r3, [pc, #348]	@ (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c6:	4b57      	ldr	r3, [pc, #348]	@ (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019d2:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8001b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x260>
 80019d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	4b52      	ldr	r3, [pc, #328]	@ (8001b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80019e0:	edc3 7a00 	vstr	s15, [r3]
	            if (pRxHeader.StdId == 0x0127) {
 80019e4:	e368      	b.n	80020b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x7fc>
	            }
	        }
	        else if (pRxHeader.StdId >= 0x0130 && pRxHeader.StdId <= 0x0136) {
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 80019ee:	f0c0 8364 	bcc.w	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
 80019f2:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 80019fa:	f200 835e 	bhi.w	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
	            // BMS verileri alındı
	            bms_timer = 0; // Zamanlayıcıyı sıfırla
 80019fe:	4b4b      	ldr	r3, [pc, #300]	@ (8001b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]


	            if (pRxHeader.StdId == 0x0130) {
 8001a04:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8001a0c:	f040 80a8 	bne.w	8001b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>
	            	int_sicaklik = (uint16_t)(rxData[0] | (rxData[1] << 8));//bu kısım değişti
 8001a10:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b3a      	ldr	r3, [pc, #232]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	4313      	orrs	r3, r2
 8001a22:	b21b      	sxth	r3, r3
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001a2a:	601a      	str	r2, [r3, #0]
	                int_hucre1 = (uint16_t)(rxData[2] | (rxData[3] << 8));
 8001a2c:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	4b33      	ldr	r3, [pc, #204]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a34:	78db      	ldrb	r3, [r3, #3]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b3b      	ldr	r3, [pc, #236]	@ (8001b34 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001a46:	601a      	str	r2, [r3, #0]
	                int_hucre2 = (uint16_t)(rxData[4] | (rxData[5] << 8));
 8001a48:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a50:	795b      	ldrb	r3, [r3, #5]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b35      	ldr	r3, [pc, #212]	@ (8001b38 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001a62:	601a      	str	r2, [r3, #0]
	                int_hucre3 = (uint16_t)(rxData[6] | (rxData[7] << 8));
 8001a64:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a66:	799b      	ldrb	r3, [r3, #6]
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001a6c:	79db      	ldrb	r3, [r3, #7]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001a7e:	601a      	str	r2, [r3, #0]
	                sicaklik = (int_sicaklik / 1000.0f);
 8001a80:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001b40 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
 8001a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a94:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]
	                bat_sicaklik = int_sicaklik / 1000;
 8001a9a:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b48 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8001aa0:	fb82 1203 	smull	r1, r2, r2, r3
 8001aa4:	1192      	asrs	r2, r2, #6
 8001aa6:	17db      	asrs	r3, r3, #31
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a28      	ldr	r2, [pc, #160]	@ (8001b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x290>)
 8001aac:	6013      	str	r3, [r2, #0]
	                hucre1 = (int_hucre1 / 10000.0f);
 8001aae:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aba:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001b50 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x298>)
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
	                hucre2 = (int_hucre2 / 10000.0f);
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001b50 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>
 8001ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001adc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8001ade:	edc3 7a00 	vstr	s15, [r3]
	                hucre3 = (int_hucre3 / 10000.0f);
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aee:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001b50 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
	                kalan_enerj_miktari = (int_kalan_enerj_miktari / 100.0f);
	            }
	        }


	        return;
 8001afc:	e2dd      	b.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
 8001afe:	bf00      	nop
 8001b00:	200021b0 	.word	0x200021b0
 8001b04:	2000216c 	.word	0x2000216c
 8001b08:	200021dc 	.word	0x200021dc
 8001b0c:	200021b8 	.word	0x200021b8
 8001b10:	200021ba 	.word	0x200021ba
 8001b14:	200021bc 	.word	0x200021bc
 8001b18:	200021be 	.word	0x200021be
 8001b1c:	42c80000 	.word	0x42c80000
 8001b20:	200021c4 	.word	0x200021c4
 8001b24:	200021c0 	.word	0x200021c0
 8001b28:	200021c8 	.word	0x200021c8
 8001b2c:	200021d8 	.word	0x200021d8
 8001b30:	20002248 	.word	0x20002248
 8001b34:	2000224c 	.word	0x2000224c
 8001b38:	20002250 	.word	0x20002250
 8001b3c:	20002254 	.word	0x20002254
 8001b40:	447a0000 	.word	0x447a0000
 8001b44:	200021e4 	.word	0x200021e4
 8001b48:	10624dd3 	.word	0x10624dd3
 8001b4c:	20002338 	.word	0x20002338
 8001b50:	461c4000 	.word	0x461c4000
 8001b54:	200021e8 	.word	0x200021e8
 8001b58:	200021ec 	.word	0x200021ec
 8001b5c:	200021f0 	.word	0x200021f0
	            } else if (pRxHeader.StdId == 0x0131) {
 8001b60:	4b72      	ldr	r3, [pc, #456]	@ (8001d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f240 1231 	movw	r2, #305	@ 0x131
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d16c      	bne.n	8001c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x38a>
	                int_hucre4 = (uint16_t)(rxData[0] | (rxData[1] << 8));
 8001b6c:	4b70      	ldr	r3, [pc, #448]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	4b6f      	ldr	r3, [pc, #444]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b6b      	ldr	r3, [pc, #428]	@ (8001d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x478>)
 8001b86:	601a      	str	r2, [r3, #0]
	                int_hucre5 = (uint16_t)(rxData[2] | (rxData[3] << 8));
 8001b88:	4b69      	ldr	r3, [pc, #420]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001b90:	78db      	ldrb	r3, [r3, #3]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b65      	ldr	r3, [pc, #404]	@ (8001d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x47c>)
 8001ba2:	601a      	str	r2, [r3, #0]
	                int_hucre6 = (uint16_t)(rxData[4] | (rxData[5] << 8));
 8001ba4:	4b62      	ldr	r3, [pc, #392]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001ba6:	791b      	ldrb	r3, [r3, #4]
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001bac:	795b      	ldrb	r3, [r3, #5]
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x480>)
 8001bbe:	601a      	str	r2, [r3, #0]
	                int_hucre7 = (uint16_t)(rxData[6] | (rxData[7] << 8));
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001bc2:	799b      	ldrb	r3, [r3, #6]
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001bc8:	79db      	ldrb	r3, [r3, #7]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b59      	ldr	r3, [pc, #356]	@ (8001d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x484>)
 8001bda:	601a      	str	r2, [r3, #0]
	                hucre4 = (int_hucre4 / 10000.0f);
 8001bdc:	4b55      	ldr	r3, [pc, #340]	@ (8001d34 <HAL_CAN_RxFifo0MsgPendingCallback+0x478>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be8:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001bec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf0:	4b55      	ldr	r3, [pc, #340]	@ (8001d48 <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>)
 8001bf2:	edc3 7a00 	vstr	s15, [r3]
	                hucre5 = (int_hucre5 / 10000.0f);
 8001bf6:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <HAL_CAN_RxFifo0MsgPendingCallback+0x47c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c02:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001c06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c0a:	4b50      	ldr	r3, [pc, #320]	@ (8001d4c <HAL_CAN_RxFifo0MsgPendingCallback+0x490>)
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
	                hucre6 = (int_hucre6 / 10000.0f);
 8001c10:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x480>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c24:	4b4a      	ldr	r3, [pc, #296]	@ (8001d50 <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
	                hucre7 = (int_hucre7 / 10000.0f);
 8001c2a:	4b45      	ldr	r3, [pc, #276]	@ (8001d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x484>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c36:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001c3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c3e:	4b45      	ldr	r3, [pc, #276]	@ (8001d54 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8001c40:	edc3 7a00 	vstr	s15, [r3]
	        return;
 8001c44:	e239      	b.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
	            } else if (pRxHeader.StdId == 0x0132) {
 8001c46:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8001c4e:	f040 8093 	bne.w	8001d78 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>
	                int_hucre8 = (uint16_t)(rxData[0] | (rxData[1] << 8));
 8001c52:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b35      	ldr	r3, [pc, #212]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001c5a:	785b      	ldrb	r3, [r3, #1]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x49c>)
 8001c6c:	601a      	str	r2, [r3, #0]
	                int_hucre9 = (uint16_t)(rxData[2] | (rxData[3] << 8));
 8001c6e:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001c70:	789b      	ldrb	r3, [r3, #2]
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001c76:	78db      	ldrb	r3, [r3, #3]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>)
 8001c88:	601a      	str	r2, [r3, #0]
	                int_hucre10 = (uint16_t)(rxData[4] | (rxData[5] << 8));
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001c8c:	791b      	ldrb	r3, [r3, #4]
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001c92:	795b      	ldrb	r3, [r3, #5]
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8001ca4:	601a      	str	r2, [r3, #0]
	                int_hucre11 = (uint16_t)(rxData[6] | (rxData[7] << 8));
 8001ca6:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001ca8:	799b      	ldrb	r3, [r3, #6]
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8001cae:	79db      	ldrb	r3, [r3, #7]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8001cc0:	601a      	str	r2, [r3, #0]
	                hucre8 = (int_hucre8 / 10000.0f);
 8001cc2:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <HAL_CAN_RxFifo0MsgPendingCallback+0x49c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cce:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8001cd8:	edc3 7a00 	vstr	s15, [r3]
	                hucre9 = (int_hucre9 / 10000.0f);
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce8:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 8001cf2:	edc3 7a00 	vstr	s15, [r3]
	                hucre10 = (int_hucre10 / 10000.0f);
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d02:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0a:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 8001d0c:	edc3 7a00 	vstr	s15, [r3]
	                hucre11 = (int_hucre11 / 10000.0f);
 8001d10:	4b14      	ldr	r3, [pc, #80]	@ (8001d64 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x488>
 8001d20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 8001d26:	edc3 7a00 	vstr	s15, [r3]
	        return;
 8001d2a:	e1c6      	b.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
 8001d2c:	2000216c 	.word	0x2000216c
 8001d30:	200021b0 	.word	0x200021b0
 8001d34:	20002258 	.word	0x20002258
 8001d38:	2000225c 	.word	0x2000225c
 8001d3c:	20002260 	.word	0x20002260
 8001d40:	20002264 	.word	0x20002264
 8001d44:	461c4000 	.word	0x461c4000
 8001d48:	200021f4 	.word	0x200021f4
 8001d4c:	200021f8 	.word	0x200021f8
 8001d50:	200021fc 	.word	0x200021fc
 8001d54:	20002200 	.word	0x20002200
 8001d58:	20002268 	.word	0x20002268
 8001d5c:	2000226c 	.word	0x2000226c
 8001d60:	20002270 	.word	0x20002270
 8001d64:	20002274 	.word	0x20002274
 8001d68:	20002204 	.word	0x20002204
 8001d6c:	20002208 	.word	0x20002208
 8001d70:	2000220c 	.word	0x2000220c
 8001d74:	20002210 	.word	0x20002210
	            } else if (pRxHeader.StdId == 0x0133) {
 8001d78:	4b72      	ldr	r3, [pc, #456]	@ (8001f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x688>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f240 1233 	movw	r2, #307	@ 0x133
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d16c      	bne.n	8001e5e <HAL_CAN_RxFifo0MsgPendingCallback+0x5a2>
	                int_hucre12 = (uint16_t)(rxData[0] | (rxData[1] << 8));
 8001d84:	4b70      	ldr	r3, [pc, #448]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b21a      	sxth	r2, r3
 8001d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x690>)
 8001d9e:	601a      	str	r2, [r3, #0]
	                int_hucre13 = (uint16_t)(rxData[2] | (rxData[3] << 8));
 8001da0:	4b69      	ldr	r3, [pc, #420]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001da2:	789b      	ldrb	r3, [r3, #2]
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001da8:	78db      	ldrb	r3, [r3, #3]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b65      	ldr	r3, [pc, #404]	@ (8001f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x694>)
 8001dba:	601a      	str	r2, [r3, #0]
	                int_hucre14 = (uint16_t)(rxData[4] | (rxData[5] << 8));
 8001dbc:	4b62      	ldr	r3, [pc, #392]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001dbe:	791b      	ldrb	r3, [r3, #4]
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	4b61      	ldr	r3, [pc, #388]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001dc4:	795b      	ldrb	r3, [r3, #5]
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x698>)
 8001dd6:	601a      	str	r2, [r3, #0]
	                int_hucre15 = (uint16_t)(rxData[6] | (rxData[7] << 8));
 8001dd8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001dda:	799b      	ldrb	r3, [r3, #6]
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	4b5a      	ldr	r3, [pc, #360]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001de0:	79db      	ldrb	r3, [r3, #7]
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x69c>)
 8001df2:	601a      	str	r2, [r3, #0]
	                hucre12 = (int_hucre12 / 10000.0f);
 8001df4:	4b55      	ldr	r3, [pc, #340]	@ (8001f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x690>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e00:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e08:	4b55      	ldr	r3, [pc, #340]	@ (8001f60 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a4>)
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
	                hucre13 = (int_hucre13 / 10000.0f);
 8001e0e:	4b50      	ldr	r3, [pc, #320]	@ (8001f50 <HAL_CAN_RxFifo0MsgPendingCallback+0x694>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1a:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e22:	4b50      	ldr	r3, [pc, #320]	@ (8001f64 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a8>)
 8001e24:	edc3 7a00 	vstr	s15, [r3]
	                hucre14 = (int_hucre14 / 10000.0f);
 8001e28:	4b4a      	ldr	r3, [pc, #296]	@ (8001f54 <HAL_CAN_RxFifo0MsgPendingCallback+0x698>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e34:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
	                hucre15 = (int_hucre15 / 10000.0f);
 8001e42:	4b45      	ldr	r3, [pc, #276]	@ (8001f58 <HAL_CAN_RxFifo0MsgPendingCallback+0x69c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e56:	4b45      	ldr	r3, [pc, #276]	@ (8001f6c <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]
	        return;
 8001e5c:	e12d      	b.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
	            } else if (pRxHeader.StdId == 0x0134) {
 8001e5e:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x688>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8001e66:	f040 8093 	bne.w	8001f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x6d4>
	                int_hucre16 = (uint16_t)(rxData[0] | (rxData[1] << 8));
 8001e6a:	4b37      	ldr	r3, [pc, #220]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	4b35      	ldr	r3, [pc, #212]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001e72:	785b      	ldrb	r3, [r3, #1]
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8001e84:	601a      	str	r2, [r3, #0]
	                int_hucre17 = (uint16_t)(rxData[2] | (rxData[3] << 8));
 8001e86:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001e88:	789b      	ldrb	r3, [r3, #2]
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001e8e:	78db      	ldrb	r3, [r3, #3]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21b      	sxth	r3, r3
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b8>)
 8001ea0:	601a      	str	r2, [r3, #0]
	                int_hucre18 = (uint16_t)(rxData[4] | (rxData[5] << 8));
 8001ea2:	4b29      	ldr	r3, [pc, #164]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001eaa:	795b      	ldrb	r3, [r3, #5]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b2f      	ldr	r3, [pc, #188]	@ (8001f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x6bc>)
 8001ebc:	601a      	str	r2, [r3, #0]
	                int_hucre19 = (uint16_t)(rxData[6] | (rxData[7] << 8));
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001ec0:	799b      	ldrb	r3, [r3, #6]
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8001ec6:	79db      	ldrb	r3, [r3, #7]
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c0>)
 8001ed8:	601a      	str	r2, [r3, #0]
	                hucre16 = (int_hucre16 / 10000.0f);
 8001eda:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eee:	4b24      	ldr	r3, [pc, #144]	@ (8001f80 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c4>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]
	                hucre17 = (int_hucre17 / 10000.0f);
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f00:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f08:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c8>)
 8001f0a:	edc3 7a00 	vstr	s15, [r3]
	                hucre18 = (int_hucre18 / 10000.0f);
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <HAL_CAN_RxFifo0MsgPendingCallback+0x6bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x6cc>)
 8001f24:	edc3 7a00 	vstr	s15, [r3]
	                hucre19 = (int_hucre19 / 10000.0f);
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f34:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001f5c <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>
 8001f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x6d0>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
	        return;
 8001f42:	e0ba      	b.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
 8001f44:	2000216c 	.word	0x2000216c
 8001f48:	200021b0 	.word	0x200021b0
 8001f4c:	20002278 	.word	0x20002278
 8001f50:	2000227c 	.word	0x2000227c
 8001f54:	20002280 	.word	0x20002280
 8001f58:	20002284 	.word	0x20002284
 8001f5c:	461c4000 	.word	0x461c4000
 8001f60:	20002214 	.word	0x20002214
 8001f64:	20002218 	.word	0x20002218
 8001f68:	2000221c 	.word	0x2000221c
 8001f6c:	20002220 	.word	0x20002220
 8001f70:	20002288 	.word	0x20002288
 8001f74:	2000228c 	.word	0x2000228c
 8001f78:	20002290 	.word	0x20002290
 8001f7c:	20002294 	.word	0x20002294
 8001f80:	20002224 	.word	0x20002224
 8001f84:	20002228 	.word	0x20002228
 8001f88:	2000222c 	.word	0x2000222c
 8001f8c:	20002230 	.word	0x20002230
	            } else if (pRxHeader.StdId == 0x0135) {
 8001f90:	4b4c      	ldr	r3, [pc, #304]	@ (80020c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x808>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f240 1235 	movw	r2, #309	@ 0x135
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d16c      	bne.n	8002076 <HAL_CAN_RxFifo0MsgPendingCallback+0x7ba>
	                int_hucre20 = (uint16_t)(rxData[0] | (rxData[1] << 8));
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	4b49      	ldr	r3, [pc, #292]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <HAL_CAN_RxFifo0MsgPendingCallback+0x810>)
 8001fb6:	601a      	str	r2, [r3, #0]
	                int_hucre21 = (uint16_t)(rxData[2] | (rxData[3] << 8));
 8001fb8:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	b21a      	sxth	r2, r3
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001fc0:	78db      	ldrb	r3, [r3, #3]
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x814>)
 8001fd2:	601a      	str	r2, [r3, #0]
	                int_hucre22 = (uint16_t)(rxData[4] | (rxData[5] << 8));
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001fdc:	795b      	ldrb	r3, [r3, #5]
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x818>)
 8001fee:	601a      	str	r2, [r3, #0]
	                int_toplam_gerilim = (uint16_t)(rxData[6] | (rxData[7] << 8));
 8001ff0:	4b35      	ldr	r3, [pc, #212]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001ff2:	799b      	ldrb	r3, [r3, #6]
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8001ff8:	79db      	ldrb	r3, [r3, #7]
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21b      	sxth	r3, r3
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	4b33      	ldr	r3, [pc, #204]	@ (80020d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x81c>)
 800200a:	601a      	str	r2, [r3, #0]
	                hucre20 = (int_hucre20 / 10000.0f);
 800200c:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HAL_CAN_RxFifo0MsgPendingCallback+0x810>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	ee07 3a90 	vmov	s15, r3
 8002014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002018:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80020dc <HAL_CAN_RxFifo0MsgPendingCallback+0x820>
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x824>)
 8002022:	edc3 7a00 	vstr	s15, [r3]
	                hucre21 = (int_hucre21 / 10000.0f);
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x814>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002032:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80020dc <HAL_CAN_RxFifo0MsgPendingCallback+0x820>
 8002036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203a:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x828>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
	                hucre22 = (int_hucre22 / 10000.0f);
 8002040:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x818>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80020dc <HAL_CAN_RxFifo0MsgPendingCallback+0x820>
 8002050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x82c>)
 8002056:	edc3 7a00 	vstr	s15, [r3]
	                toplam_gerilim = (int_toplam_gerilim / 100.0f);
 800205a:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x81c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002066:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x830>
 800206a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206e:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x834>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	        return;
 8002074:	e021      	b.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
	            } else if (pRxHeader.StdId == 0x0136) {
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x808>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800207e:	d11c      	bne.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
	                int_kalan_enerj_miktari = (uint16_t)(rxData[0] | (rxData[1] << 8));
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b21a      	sxth	r2, r3
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80c>)
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	b21b      	sxth	r3, r3
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	b29b      	uxth	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x838>)
 800209a:	601a      	str	r2, [r3, #0]
	                kalan_enerj_miktari = (int_kalan_enerj_miktari / 100.0f);
 800209c:	4b15      	ldr	r3, [pc, #84]	@ (80020f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x838>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x830>
 80020ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x83c>)
 80020b2:	edc3 7a00 	vstr	s15, [r3]
	        return;
 80020b6:	e000      	b.n	80020ba <HAL_CAN_RxFifo0MsgPendingCallback+0x7fe>
	            if (pRxHeader.StdId == 0x0127) {
 80020b8:	bf00      	nop
	        return;
 80020ba:	bf00      	nop
	    }
	}
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000216c 	.word	0x2000216c
 80020c8:	200021b0 	.word	0x200021b0
 80020cc:	20002298 	.word	0x20002298
 80020d0:	2000229c 	.word	0x2000229c
 80020d4:	200022a0 	.word	0x200022a0
 80020d8:	200022a4 	.word	0x200022a4
 80020dc:	461c4000 	.word	0x461c4000
 80020e0:	20002234 	.word	0x20002234
 80020e4:	20002238 	.word	0x20002238
 80020e8:	2000223c 	.word	0x2000223c
 80020ec:	42c80000 	.word	0x42c80000
 80020f0:	20002240 	.word	0x20002240
 80020f4:	200022a8 	.word	0x200022a8
 80020f8:	20002244 	.word	0x20002244

080020fc <LORA_SendString>:




void LORA_SendString (char *string)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09c      	sub	sp, #112	@ 0x70
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	char buf[100]; // göndereceğimiz mesajın boyutu
	int len= sprintf(buf,"%s",string); // hangi bloğun içine yollacaksak onun txt sini yazıyoruz
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4909      	ldr	r1, [pc, #36]	@ (8002130 <LORA_SendString+0x34>)
 800210c:	4618      	mov	r0, r3
 800210e:	f009 fc09 	bl	800b924 <siprintf>
 8002112:	66f8      	str	r0, [r7, #108]	@ 0x6c
	HAL_UART_Transmit(&huart5,(uint8_t *)buf,len,1000); //mesajımızı göndermek için(sol kısım)
 8002114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002116:	b29a      	uxth	r2, r3
 8002118:	f107 0108 	add.w	r1, r7, #8
 800211c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002120:	4804      	ldr	r0, [pc, #16]	@ (8002134 <LORA_SendString+0x38>)
 8002122:	f005 fd0b 	bl	8007b3c <HAL_UART_Transmit>
}
 8002126:	bf00      	nop
 8002128:	3770      	adds	r7, #112	@ 0x70
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	0800c120 	.word	0x0800c120
 8002134:	200026b8 	.word	0x200026b8

08002138 <NEXTION_SendString>:



uint8_t Cmd_End[3] = {0xFF,0xFF,0xFF}; //gönderileriminizin en sondaki 3 basamağı
void NEXTION_SendString (char *ID,char *string)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b090      	sub	sp, #64	@ 0x40
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	char buf[50]; // göndereceğimiz mesajın boyutu
	int len= sprintf(buf,"%s.txt=\"%s\"",ID,string); // hangi bloğun içine yollacaksak onun txt sini yazıyoruz
 8002142:	f107 0008 	add.w	r0, r7, #8
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	490b      	ldr	r1, [pc, #44]	@ (8002178 <NEXTION_SendString+0x40>)
 800214c:	f009 fbea 	bl	800b924 <siprintf>
 8002150:	63f8      	str	r0, [r7, #60]	@ 0x3c
	HAL_UART_Transmit(&huart4,(uint8_t *)buf,len,1000); //mesajımızı göndermek için(sol kısım)
 8002152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002154:	b29a      	uxth	r2, r3
 8002156:	f107 0108 	add.w	r1, r7, #8
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	4807      	ldr	r0, [pc, #28]	@ (800217c <NEXTION_SendString+0x44>)
 8002160:	f005 fcec 	bl	8007b3c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4,Cmd_End,3,100); // 3 elemanlı yazımızın geri kalan sağ kısmı için
 8002164:	2364      	movs	r3, #100	@ 0x64
 8002166:	2203      	movs	r2, #3
 8002168:	4905      	ldr	r1, [pc, #20]	@ (8002180 <NEXTION_SendString+0x48>)
 800216a:	4804      	ldr	r0, [pc, #16]	@ (800217c <NEXTION_SendString+0x44>)
 800216c:	f005 fce6 	bl	8007b3c <HAL_UART_Transmit>
}
 8002170:	bf00      	nop
 8002172:	3740      	adds	r7, #64	@ 0x40
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	0800c124 	.word	0x0800c124
 800217c:	20002670 	.word	0x20002670
 8002180:	2000006c 	.word	0x2000006c

08002184 <NEXTION_SendNum>:
void NEXTION_SendNum(char *obj,int32_t num)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	uint8_t *buffer=malloc(30*sizeof(char));
 800218e:	201e      	movs	r0, #30
 8002190:	f009 fb0a 	bl	800b7a8 <malloc>
 8002194:	4603      	mov	r3, r0
 8002196:	60fb      	str	r3, [r7, #12]
	int len =sprintf((char *)buffer,"%s.val=%d",obj,num); //göndereceğimiz derin sayısal değerlerini ve diğer parametleri yazıyoruz
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	490c      	ldr	r1, [pc, #48]	@ (80021d0 <NEXTION_SendNum+0x4c>)
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f009 fbc0 	bl	800b924 <siprintf>
 80021a4:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart4,buffer,len,1000);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	4808      	ldr	r0, [pc, #32]	@ (80021d4 <NEXTION_SendNum+0x50>)
 80021b2:	f005 fcc3 	bl	8007b3c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4,Cmd_End,3,100);
 80021b6:	2364      	movs	r3, #100	@ 0x64
 80021b8:	2203      	movs	r2, #3
 80021ba:	4907      	ldr	r1, [pc, #28]	@ (80021d8 <NEXTION_SendNum+0x54>)
 80021bc:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <NEXTION_SendNum+0x50>)
 80021be:	f005 fcbd 	bl	8007b3c <HAL_UART_Transmit>
	free(buffer);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f009 faf8 	bl	800b7b8 <free>
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	0800c130 	.word	0x0800c130
 80021d4:	20002670 	.word	0x20002670
 80021d8:	2000006c 	.word	0x2000006c

080021dc <SendtoPB>:
void SendtoPB(char *obj,uint16_t value)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	@ 0x30
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
	char buf[30];
	int len=sprintf(buf,"%s=%u",obj,value);
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	f107 000c 	add.w	r0, r7, #12
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	490b      	ldr	r1, [pc, #44]	@ (8002220 <SendtoPB+0x44>)
 80021f2:	f009 fb97 	bl	800b924 <siprintf>
 80021f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
	HAL_UART_Transmit(&huart4,(uint8_t *)buf,len,1000);
 80021f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f107 010c 	add.w	r1, r7, #12
 8002200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002204:	4807      	ldr	r0, [pc, #28]	@ (8002224 <SendtoPB+0x48>)
 8002206:	f005 fc99 	bl	8007b3c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart4,Cmd_End,3,1000);
 800220a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220e:	2203      	movs	r2, #3
 8002210:	4905      	ldr	r1, [pc, #20]	@ (8002228 <SendtoPB+0x4c>)
 8002212:	4804      	ldr	r0, [pc, #16]	@ (8002224 <SendtoPB+0x48>)
 8002214:	f005 fc92 	bl	8007b3c <HAL_UART_Transmit>

}
 8002218:	bf00      	nop
 800221a:	3730      	adds	r7, #48	@ 0x30
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	0800c13c 	.word	0x0800c13c
 8002224:	20002670 	.word	0x20002670
 8002228:	2000006c 	.word	0x2000006c

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b0a2      	sub	sp, #136	@ 0x88
 8002230:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002232:	f001 fe5f 	bl	8003ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002236:	f001 f8f3 	bl	8003420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223a:	f001 fadb 	bl	80037f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800223e:	f001 fab9 	bl	80037b4 <MX_DMA_Init>
  MX_CAN1_Init();
 8002242:	f001 f9a9 	bl	8003598 <MX_CAN1_Init>
  MX_TIM2_Init();
 8002246:	f001 fa13 	bl	8003670 <MX_TIM2_Init>
  MX_UART4_Init();
 800224a:	f001 fa5f 	bl	800370c <MX_UART4_Init>
  MX_UART5_Init();
 800224e:	f001 fa87 	bl	8003760 <MX_UART5_Init>
  MX_SPI1_Init();
 8002252:	f001 f9d7 	bl	8003604 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002256:	f006 f82d 	bl	80082b4 <MX_FATFS_Init>
  MX_ADC1_Init();
 800225a:	f001 f94b 	bl	80034f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    sFilterConfig.FilterActivation= ENABLE;
 800225e:	4bb9      	ldr	r3, [pc, #740]	@ (8002544 <main+0x318>)
 8002260:	2201      	movs	r2, #1
 8002262:	621a      	str	r2, [r3, #32]
    sFilterConfig.FilterBank=0;
 8002264:	4bb7      	ldr	r3, [pc, #732]	@ (8002544 <main+0x318>)
 8002266:	2200      	movs	r2, #0
 8002268:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 800226a:	4bb6      	ldr	r3, [pc, #728]	@ (8002544 <main+0x318>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterIdHigh=0x0000;
 8002270:	4bb4      	ldr	r3, [pc, #720]	@ (8002544 <main+0x318>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow=0x0000;
 8002276:	4bb3      	ldr	r3, [pc, #716]	@ (8002544 <main+0x318>)
 8002278:	2200      	movs	r2, #0
 800227a:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh=(0x0130 << 5);
 800227c:	4bb1      	ldr	r3, [pc, #708]	@ (8002544 <main+0x318>)
 800227e:	f44f 5218 	mov.w	r2, #9728	@ 0x2600
 8002282:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow=0x0000;
 8002284:	4baf      	ldr	r3, [pc, #700]	@ (8002544 <main+0x318>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 800228a:	4bae      	ldr	r3, [pc, #696]	@ (8002544 <main+0x318>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8002290:	4bac      	ldr	r3, [pc, #688]	@ (8002544 <main+0x318>)
 8002292:	2201      	movs	r2, #1
 8002294:	61da      	str	r2, [r3, #28]
    HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8002296:	49ab      	ldr	r1, [pc, #684]	@ (8002544 <main+0x318>)
 8002298:	48ab      	ldr	r0, [pc, #684]	@ (8002548 <main+0x31c>)
 800229a:	f002 fbc5 	bl	8004a28 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800229e:	48aa      	ldr	r0, [pc, #680]	@ (8002548 <main+0x31c>)
 80022a0:	f002 fca2 	bl	8004be8 <HAL_CAN_Start>
    //interrupt
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022a4:	2102      	movs	r1, #2
 80022a6:	48a8      	ldr	r0, [pc, #672]	@ (8002548 <main+0x31c>)
 80022a8:	f002 fe04 	bl	8004eb4 <HAL_CAN_ActivateNotification>

    HAL_TIM_Base_Start_IT(&htim2);
 80022ac:	48a7      	ldr	r0, [pc, #668]	@ (800254c <main+0x320>)
 80022ae:	f004 ffcf 	bl	8007250 <HAL_TIM_Base_Start_IT>

    HAL_ADC_Start_DMA(&hadc1, adc_value, 1); // ADC with DMA Start
 80022b2:	2201      	movs	r2, #1
 80022b4:	49a6      	ldr	r1, [pc, #664]	@ (8002550 <main+0x324>)
 80022b6:	48a7      	ldr	r0, [pc, #668]	@ (8002554 <main+0x328>)
 80022b8:	f001 fef6 	bl	80040a8 <HAL_ADC_Start_DMA>
    a=1;
 80022bc:	4ba6      	ldr	r3, [pc, #664]	@ (8002558 <main+0x32c>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]



while (1)
{
	if(a=1){
 80022c2:	4ba5      	ldr	r3, [pc, #660]	@ (8002558 <main+0x32c>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET); // LED'i yak
 80022c8:	2201      	movs	r2, #1
 80022ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022ce:	48a3      	ldr	r0, [pc, #652]	@ (800255c <main+0x330>)
 80022d0:	f003 fe64 	bl	8005f9c <HAL_GPIO_WritePin>
	}
	current = Curr(adc_value[0]);
 80022d4:	4b9e      	ldr	r3, [pc, #632]	@ (8002550 <main+0x324>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f951 	bl	8001580 <Curr>
 80022de:	ec53 2b10 	vmov	r2, r3, d0
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe faa9 	bl	800083c <__aeabi_d2iz>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002560 <main+0x334>)
 80022ee:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);

	}*/
	char result[120];
		//    sprintf(result, "STM32 Test %d\n", i);
		    sprintf(result, "%lu,%d,%d,%d,%d\n", HAL_GetTick(), arac_hiz, bat_sicaklik, (int)toplam_gerilim, (int)toplam_gerilim);
 80022f0:	f001 fe66 	bl	8003fc0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b9b      	ldr	r3, [pc, #620]	@ (8002564 <main+0x338>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	461c      	mov	r4, r3
 80022fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002568 <main+0x33c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	499a      	ldr	r1, [pc, #616]	@ (800256c <main+0x340>)
 8002302:	edd1 7a00 	vldr	s15, [r1]
 8002306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230a:	ee17 5a90 	vmov	r5, s15
 800230e:	4997      	ldr	r1, [pc, #604]	@ (800256c <main+0x340>)
 8002310:	edd1 7a00 	vldr	s15, [r1]
 8002314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002318:	ee17 1a90 	vmov	r1, s15
 800231c:	4638      	mov	r0, r7
 800231e:	9102      	str	r1, [sp, #8]
 8002320:	9501      	str	r5, [sp, #4]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4623      	mov	r3, r4
 8002326:	4992      	ldr	r1, [pc, #584]	@ (8002570 <main+0x344>)
 8002328:	f009 fafc 	bl	800b924 <siprintf>
		HAL_Delay(500);
 800232c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002330:	f001 fe52 	bl	8003fd8 <HAL_Delay>
		  f_mount(&fs, "", 0);
 8002334:	2200      	movs	r2, #0
 8002336:	498f      	ldr	r1, [pc, #572]	@ (8002574 <main+0x348>)
 8002338:	488f      	ldr	r0, [pc, #572]	@ (8002578 <main+0x34c>)
 800233a:	f008 fa09 	bl	800a750 <f_mount>
		  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800233e:	2213      	movs	r2, #19
 8002340:	498e      	ldr	r1, [pc, #568]	@ (800257c <main+0x350>)
 8002342:	488f      	ldr	r0, [pc, #572]	@ (8002580 <main+0x354>)
 8002344:	f008 fa4a 	bl	800a7dc <f_open>
		  f_lseek(&fil, f_size(&fil));
 8002348:	4b8d      	ldr	r3, [pc, #564]	@ (8002580 <main+0x354>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4619      	mov	r1, r3
 800234e:	488c      	ldr	r0, [pc, #560]	@ (8002580 <main+0x354>)
 8002350:	f008 fe48 	bl	800afe4 <f_lseek>
		  f_puts(result, &fil);
 8002354:	463b      	mov	r3, r7
 8002356:	498a      	ldr	r1, [pc, #552]	@ (8002580 <main+0x354>)
 8002358:	4618      	mov	r0, r3
 800235a:	f009 f8de 	bl	800b51a <f_puts>
		  f_close(&fil);
 800235e:	4888      	ldr	r0, [pc, #544]	@ (8002580 <main+0x354>)
 8002360:	f008 fe16 	bl	800af90 <f_close>


		 sprintf(motors,"%d",motor_temp_tam);//motor temp
 8002364:	4b87      	ldr	r3, [pc, #540]	@ (8002584 <main+0x358>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4987      	ldr	r1, [pc, #540]	@ (8002588 <main+0x35c>)
 800236c:	4887      	ldr	r0, [pc, #540]	@ (800258c <main+0x360>)
 800236e:	f009 fad9 	bl	800b924 <siprintf>
		 sprintf(bataryas,"%d",int_sicaklik);//batarya temp
 8002372:	4b87      	ldr	r3, [pc, #540]	@ (8002590 <main+0x364>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	4983      	ldr	r1, [pc, #524]	@ (8002588 <main+0x35c>)
 800237a:	4886      	ldr	r0, [pc, #536]	@ (8002594 <main+0x368>)
 800237c:	f009 fad2 	bl	800b924 <siprintf>
		 sprintf(arachızs,"%d",arac_hiz);//arac hızı
 8002380:	4b78      	ldr	r3, [pc, #480]	@ (8002564 <main+0x338>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4980      	ldr	r1, [pc, #512]	@ (8002588 <main+0x35c>)
 8002388:	4883      	ldr	r0, [pc, #524]	@ (8002598 <main+0x36c>)
 800238a:	f009 facb 	bl	800b924 <siprintf>
		 sprintf(kalans,"%d",int_kalan_enerj_miktari/100);//kalan enerji miktarı
 800238e:	4b83      	ldr	r3, [pc, #524]	@ (800259c <main+0x370>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a83      	ldr	r2, [pc, #524]	@ (80025a0 <main+0x374>)
 8002394:	fb82 1203 	smull	r1, r2, r2, r3
 8002398:	1152      	asrs	r2, r2, #5
 800239a:	17db      	asrs	r3, r3, #31
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	4979      	ldr	r1, [pc, #484]	@ (8002588 <main+0x35c>)
 80023a2:	4880      	ldr	r0, [pc, #512]	@ (80025a4 <main+0x378>)
 80023a4:	f009 fabe 	bl	800b924 <siprintf>
		 sprintf(topgerilims,"%d",int_toplam_gerilim/100);//toplam gerilim
 80023a8:	4b7f      	ldr	r3, [pc, #508]	@ (80025a8 <main+0x37c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7c      	ldr	r2, [pc, #496]	@ (80025a0 <main+0x374>)
 80023ae:	fb82 1203 	smull	r1, r2, r2, r3
 80023b2:	1152      	asrs	r2, r2, #5
 80023b4:	17db      	asrs	r3, r3, #31
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4973      	ldr	r1, [pc, #460]	@ (8002588 <main+0x35c>)
 80023bc:	487b      	ldr	r0, [pc, #492]	@ (80025ac <main+0x380>)
 80023be:	f009 fab1 	bl	800b924 <siprintf>
		 sprintf(kalansures,"%d",kalan_sure);//kalan sure
 80023c2:	4b7b      	ldr	r3, [pc, #492]	@ (80025b0 <main+0x384>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	496f      	ldr	r1, [pc, #444]	@ (8002588 <main+0x35c>)
 80023ca:	487a      	ldr	r0, [pc, #488]	@ (80025b4 <main+0x388>)
 80023cc:	f009 faaa 	bl	800b924 <siprintf>
		 sprintf(sarjgucus,"%d",sarj_gucu);//sarj gücü
 80023d0:	4b79      	ldr	r3, [pc, #484]	@ (80025b8 <main+0x38c>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	496c      	ldr	r1, [pc, #432]	@ (8002588 <main+0x35c>)
 80023d8:	4878      	ldr	r0, [pc, #480]	@ (80025bc <main+0x390>)
 80023da:	f009 faa3 	bl	800b924 <siprintf>

		 //batarya yüzdesi eksik


		 sprintf(h1s,"%d.%d",int_hucre1/10000,int_hucre1%10000);
 80023de:	4b78      	ldr	r3, [pc, #480]	@ (80025c0 <main+0x394>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a78      	ldr	r2, [pc, #480]	@ (80025c4 <main+0x398>)
 80023e4:	fb82 1203 	smull	r1, r2, r2, r3
 80023e8:	1312      	asrs	r2, r2, #12
 80023ea:	17db      	asrs	r3, r3, #31
 80023ec:	1ad0      	subs	r0, r2, r3
 80023ee:	4b74      	ldr	r3, [pc, #464]	@ (80025c0 <main+0x394>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a74      	ldr	r2, [pc, #464]	@ (80025c4 <main+0x398>)
 80023f4:	fb82 1203 	smull	r1, r2, r2, r3
 80023f8:	1311      	asrs	r1, r2, #12
 80023fa:	17da      	asrs	r2, r3, #31
 80023fc:	1a8a      	subs	r2, r1, r2
 80023fe:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002402:	fb01 f202 	mul.w	r2, r1, r2
 8002406:	1a9a      	subs	r2, r3, r2
 8002408:	4613      	mov	r3, r2
 800240a:	4602      	mov	r2, r0
 800240c:	496e      	ldr	r1, [pc, #440]	@ (80025c8 <main+0x39c>)
 800240e:	486f      	ldr	r0, [pc, #444]	@ (80025cc <main+0x3a0>)
 8002410:	f009 fa88 	bl	800b924 <siprintf>
		 sprintf(h2s,"%d.%d",int_hucre2/10000,int_hucre2%10000);
 8002414:	4b6e      	ldr	r3, [pc, #440]	@ (80025d0 <main+0x3a4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6a      	ldr	r2, [pc, #424]	@ (80025c4 <main+0x398>)
 800241a:	fb82 1203 	smull	r1, r2, r2, r3
 800241e:	1312      	asrs	r2, r2, #12
 8002420:	17db      	asrs	r3, r3, #31
 8002422:	1ad0      	subs	r0, r2, r3
 8002424:	4b6a      	ldr	r3, [pc, #424]	@ (80025d0 <main+0x3a4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a66      	ldr	r2, [pc, #408]	@ (80025c4 <main+0x398>)
 800242a:	fb82 1203 	smull	r1, r2, r2, r3
 800242e:	1311      	asrs	r1, r2, #12
 8002430:	17da      	asrs	r2, r3, #31
 8002432:	1a8a      	subs	r2, r1, r2
 8002434:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002438:	fb01 f202 	mul.w	r2, r1, r2
 800243c:	1a9a      	subs	r2, r3, r2
 800243e:	4613      	mov	r3, r2
 8002440:	4602      	mov	r2, r0
 8002442:	4961      	ldr	r1, [pc, #388]	@ (80025c8 <main+0x39c>)
 8002444:	4863      	ldr	r0, [pc, #396]	@ (80025d4 <main+0x3a8>)
 8002446:	f009 fa6d 	bl	800b924 <siprintf>
		 sprintf(h3s,"%d.%d",int_hucre3/10000,int_hucre3%10000);
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <main+0x3ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a5d      	ldr	r2, [pc, #372]	@ (80025c4 <main+0x398>)
 8002450:	fb82 1203 	smull	r1, r2, r2, r3
 8002454:	1312      	asrs	r2, r2, #12
 8002456:	17db      	asrs	r3, r3, #31
 8002458:	1ad0      	subs	r0, r2, r3
 800245a:	4b5f      	ldr	r3, [pc, #380]	@ (80025d8 <main+0x3ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a59      	ldr	r2, [pc, #356]	@ (80025c4 <main+0x398>)
 8002460:	fb82 1203 	smull	r1, r2, r2, r3
 8002464:	1311      	asrs	r1, r2, #12
 8002466:	17da      	asrs	r2, r3, #31
 8002468:	1a8a      	subs	r2, r1, r2
 800246a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800246e:	fb01 f202 	mul.w	r2, r1, r2
 8002472:	1a9a      	subs	r2, r3, r2
 8002474:	4613      	mov	r3, r2
 8002476:	4602      	mov	r2, r0
 8002478:	4953      	ldr	r1, [pc, #332]	@ (80025c8 <main+0x39c>)
 800247a:	4858      	ldr	r0, [pc, #352]	@ (80025dc <main+0x3b0>)
 800247c:	f009 fa52 	bl	800b924 <siprintf>
		 sprintf(h4s,"%d.%d",int_hucre4/10000,int_hucre4%10000);
 8002480:	4b57      	ldr	r3, [pc, #348]	@ (80025e0 <main+0x3b4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a4f      	ldr	r2, [pc, #316]	@ (80025c4 <main+0x398>)
 8002486:	fb82 1203 	smull	r1, r2, r2, r3
 800248a:	1312      	asrs	r2, r2, #12
 800248c:	17db      	asrs	r3, r3, #31
 800248e:	1ad0      	subs	r0, r2, r3
 8002490:	4b53      	ldr	r3, [pc, #332]	@ (80025e0 <main+0x3b4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a4b      	ldr	r2, [pc, #300]	@ (80025c4 <main+0x398>)
 8002496:	fb82 1203 	smull	r1, r2, r2, r3
 800249a:	1311      	asrs	r1, r2, #12
 800249c:	17da      	asrs	r2, r3, #31
 800249e:	1a8a      	subs	r2, r1, r2
 80024a0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80024a4:	fb01 f202 	mul.w	r2, r1, r2
 80024a8:	1a9a      	subs	r2, r3, r2
 80024aa:	4613      	mov	r3, r2
 80024ac:	4602      	mov	r2, r0
 80024ae:	4946      	ldr	r1, [pc, #280]	@ (80025c8 <main+0x39c>)
 80024b0:	484c      	ldr	r0, [pc, #304]	@ (80025e4 <main+0x3b8>)
 80024b2:	f009 fa37 	bl	800b924 <siprintf>
		 sprintf(h5s,"%d.%d",int_hucre5/10000,int_hucre5%10000);
 80024b6:	4b4c      	ldr	r3, [pc, #304]	@ (80025e8 <main+0x3bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a42      	ldr	r2, [pc, #264]	@ (80025c4 <main+0x398>)
 80024bc:	fb82 1203 	smull	r1, r2, r2, r3
 80024c0:	1312      	asrs	r2, r2, #12
 80024c2:	17db      	asrs	r3, r3, #31
 80024c4:	1ad0      	subs	r0, r2, r3
 80024c6:	4b48      	ldr	r3, [pc, #288]	@ (80025e8 <main+0x3bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a3e      	ldr	r2, [pc, #248]	@ (80025c4 <main+0x398>)
 80024cc:	fb82 1203 	smull	r1, r2, r2, r3
 80024d0:	1311      	asrs	r1, r2, #12
 80024d2:	17da      	asrs	r2, r3, #31
 80024d4:	1a8a      	subs	r2, r1, r2
 80024d6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80024da:	fb01 f202 	mul.w	r2, r1, r2
 80024de:	1a9a      	subs	r2, r3, r2
 80024e0:	4613      	mov	r3, r2
 80024e2:	4602      	mov	r2, r0
 80024e4:	4938      	ldr	r1, [pc, #224]	@ (80025c8 <main+0x39c>)
 80024e6:	4841      	ldr	r0, [pc, #260]	@ (80025ec <main+0x3c0>)
 80024e8:	f009 fa1c 	bl	800b924 <siprintf>
		 sprintf(h6s,"%d.%d",int_hucre6/10000,int_hucre6%10000);
 80024ec:	4b40      	ldr	r3, [pc, #256]	@ (80025f0 <main+0x3c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a34      	ldr	r2, [pc, #208]	@ (80025c4 <main+0x398>)
 80024f2:	fb82 1203 	smull	r1, r2, r2, r3
 80024f6:	1312      	asrs	r2, r2, #12
 80024f8:	17db      	asrs	r3, r3, #31
 80024fa:	1ad0      	subs	r0, r2, r3
 80024fc:	4b3c      	ldr	r3, [pc, #240]	@ (80025f0 <main+0x3c4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <main+0x398>)
 8002502:	fb82 1203 	smull	r1, r2, r2, r3
 8002506:	1311      	asrs	r1, r2, #12
 8002508:	17da      	asrs	r2, r3, #31
 800250a:	1a8a      	subs	r2, r1, r2
 800250c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002510:	fb01 f202 	mul.w	r2, r1, r2
 8002514:	1a9a      	subs	r2, r3, r2
 8002516:	4613      	mov	r3, r2
 8002518:	4602      	mov	r2, r0
 800251a:	492b      	ldr	r1, [pc, #172]	@ (80025c8 <main+0x39c>)
 800251c:	4835      	ldr	r0, [pc, #212]	@ (80025f4 <main+0x3c8>)
 800251e:	f009 fa01 	bl	800b924 <siprintf>
		 sprintf(h7s,"%d.%d",int_hucre7/10000,int_hucre7%10000);
 8002522:	4b35      	ldr	r3, [pc, #212]	@ (80025f8 <main+0x3cc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a27      	ldr	r2, [pc, #156]	@ (80025c4 <main+0x398>)
 8002528:	fb82 1203 	smull	r1, r2, r2, r3
 800252c:	1312      	asrs	r2, r2, #12
 800252e:	17db      	asrs	r3, r3, #31
 8002530:	1ad0      	subs	r0, r2, r3
 8002532:	4b31      	ldr	r3, [pc, #196]	@ (80025f8 <main+0x3cc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a23      	ldr	r2, [pc, #140]	@ (80025c4 <main+0x398>)
 8002538:	fb82 1203 	smull	r1, r2, r2, r3
 800253c:	1311      	asrs	r1, r2, #12
 800253e:	17da      	asrs	r2, r3, #31
 8002540:	1a8a      	subs	r2, r1, r2
 8002542:	e05b      	b.n	80025fc <main+0x3d0>
 8002544:	20002188 	.word	0x20002188
 8002548:	200025a8 	.word	0x200025a8
 800254c:	20002628 	.word	0x20002628
 8002550:	200024f8 	.word	0x200024f8
 8002554:	20002500 	.word	0x20002500
 8002558:	200021cc 	.word	0x200021cc
 800255c:	40021000 	.word	0x40021000
 8002560:	200024fc 	.word	0x200024fc
 8002564:	200021b8 	.word	0x200021b8
 8002568:	20002338 	.word	0x20002338
 800256c:	20002240 	.word	0x20002240
 8002570:	0800c144 	.word	0x0800c144
 8002574:	0800c158 	.word	0x0800c158
 8002578:	20000104 	.word	0x20000104
 800257c:	0800c15c 	.word	0x0800c15c
 8002580:	2000113c 	.word	0x2000113c
 8002584:	200021ba 	.word	0x200021ba
 8002588:	0800c168 	.word	0x0800c168
 800258c:	200022ac 	.word	0x200022ac
 8002590:	20002248 	.word	0x20002248
 8002594:	200022c0 	.word	0x200022c0
 8002598:	200022d4 	.word	0x200022d4
 800259c:	200022a8 	.word	0x200022a8
 80025a0:	51eb851f 	.word	0x51eb851f
 80025a4:	200022e8 	.word	0x200022e8
 80025a8:	200022a4 	.word	0x200022a4
 80025ac:	200022fc 	.word	0x200022fc
 80025b0:	200021d2 	.word	0x200021d2
 80025b4:	20002310 	.word	0x20002310
 80025b8:	200021d0 	.word	0x200021d0
 80025bc:	20002324 	.word	0x20002324
 80025c0:	2000224c 	.word	0x2000224c
 80025c4:	68db8bad 	.word	0x68db8bad
 80025c8:	0800c16c 	.word	0x0800c16c
 80025cc:	2000233c 	.word	0x2000233c
 80025d0:	20002250 	.word	0x20002250
 80025d4:	20002350 	.word	0x20002350
 80025d8:	20002254 	.word	0x20002254
 80025dc:	20002364 	.word	0x20002364
 80025e0:	20002258 	.word	0x20002258
 80025e4:	20002378 	.word	0x20002378
 80025e8:	2000225c 	.word	0x2000225c
 80025ec:	2000238c 	.word	0x2000238c
 80025f0:	20002260 	.word	0x20002260
 80025f4:	200023a0 	.word	0x200023a0
 80025f8:	20002264 	.word	0x20002264
 80025fc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002600:	fb01 f202 	mul.w	r2, r1, r2
 8002604:	1a9a      	subs	r2, r3, r2
 8002606:	4613      	mov	r3, r2
 8002608:	4602      	mov	r2, r0
 800260a:	49c3      	ldr	r1, [pc, #780]	@ (8002918 <main+0x6ec>)
 800260c:	48c3      	ldr	r0, [pc, #780]	@ (800291c <main+0x6f0>)
 800260e:	f009 f989 	bl	800b924 <siprintf>
		 sprintf(h8s,"%d.%d",int_hucre8/10000,int_hucre8%10000);
 8002612:	4bc3      	ldr	r3, [pc, #780]	@ (8002920 <main+0x6f4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4ac3      	ldr	r2, [pc, #780]	@ (8002924 <main+0x6f8>)
 8002618:	fb82 1203 	smull	r1, r2, r2, r3
 800261c:	1312      	asrs	r2, r2, #12
 800261e:	17db      	asrs	r3, r3, #31
 8002620:	1ad0      	subs	r0, r2, r3
 8002622:	4bbf      	ldr	r3, [pc, #764]	@ (8002920 <main+0x6f4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4abf      	ldr	r2, [pc, #764]	@ (8002924 <main+0x6f8>)
 8002628:	fb82 1203 	smull	r1, r2, r2, r3
 800262c:	1311      	asrs	r1, r2, #12
 800262e:	17da      	asrs	r2, r3, #31
 8002630:	1a8a      	subs	r2, r1, r2
 8002632:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002636:	fb01 f202 	mul.w	r2, r1, r2
 800263a:	1a9a      	subs	r2, r3, r2
 800263c:	4613      	mov	r3, r2
 800263e:	4602      	mov	r2, r0
 8002640:	49b5      	ldr	r1, [pc, #724]	@ (8002918 <main+0x6ec>)
 8002642:	48b9      	ldr	r0, [pc, #740]	@ (8002928 <main+0x6fc>)
 8002644:	f009 f96e 	bl	800b924 <siprintf>
		 sprintf(h9s,"%d.%d",int_hucre9/10000,int_hucre9%10000);
 8002648:	4bb8      	ldr	r3, [pc, #736]	@ (800292c <main+0x700>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4ab5      	ldr	r2, [pc, #724]	@ (8002924 <main+0x6f8>)
 800264e:	fb82 1203 	smull	r1, r2, r2, r3
 8002652:	1312      	asrs	r2, r2, #12
 8002654:	17db      	asrs	r3, r3, #31
 8002656:	1ad0      	subs	r0, r2, r3
 8002658:	4bb4      	ldr	r3, [pc, #720]	@ (800292c <main+0x700>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4ab1      	ldr	r2, [pc, #708]	@ (8002924 <main+0x6f8>)
 800265e:	fb82 1203 	smull	r1, r2, r2, r3
 8002662:	1311      	asrs	r1, r2, #12
 8002664:	17da      	asrs	r2, r3, #31
 8002666:	1a8a      	subs	r2, r1, r2
 8002668:	f242 7110 	movw	r1, #10000	@ 0x2710
 800266c:	fb01 f202 	mul.w	r2, r1, r2
 8002670:	1a9a      	subs	r2, r3, r2
 8002672:	4613      	mov	r3, r2
 8002674:	4602      	mov	r2, r0
 8002676:	49a8      	ldr	r1, [pc, #672]	@ (8002918 <main+0x6ec>)
 8002678:	48ad      	ldr	r0, [pc, #692]	@ (8002930 <main+0x704>)
 800267a:	f009 f953 	bl	800b924 <siprintf>
		 sprintf(h10s,"%d.%d",int_hucre10/10000,int_hucre10%10000);
 800267e:	4bad      	ldr	r3, [pc, #692]	@ (8002934 <main+0x708>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4aa8      	ldr	r2, [pc, #672]	@ (8002924 <main+0x6f8>)
 8002684:	fb82 1203 	smull	r1, r2, r2, r3
 8002688:	1312      	asrs	r2, r2, #12
 800268a:	17db      	asrs	r3, r3, #31
 800268c:	1ad0      	subs	r0, r2, r3
 800268e:	4ba9      	ldr	r3, [pc, #676]	@ (8002934 <main+0x708>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4aa4      	ldr	r2, [pc, #656]	@ (8002924 <main+0x6f8>)
 8002694:	fb82 1203 	smull	r1, r2, r2, r3
 8002698:	1311      	asrs	r1, r2, #12
 800269a:	17da      	asrs	r2, r3, #31
 800269c:	1a8a      	subs	r2, r1, r2
 800269e:	f242 7110 	movw	r1, #10000	@ 0x2710
 80026a2:	fb01 f202 	mul.w	r2, r1, r2
 80026a6:	1a9a      	subs	r2, r3, r2
 80026a8:	4613      	mov	r3, r2
 80026aa:	4602      	mov	r2, r0
 80026ac:	499a      	ldr	r1, [pc, #616]	@ (8002918 <main+0x6ec>)
 80026ae:	48a2      	ldr	r0, [pc, #648]	@ (8002938 <main+0x70c>)
 80026b0:	f009 f938 	bl	800b924 <siprintf>
		 sprintf(h11s,"%d.%d",int_hucre11/10000,int_hucre11%10000);
 80026b4:	4ba1      	ldr	r3, [pc, #644]	@ (800293c <main+0x710>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a9a      	ldr	r2, [pc, #616]	@ (8002924 <main+0x6f8>)
 80026ba:	fb82 1203 	smull	r1, r2, r2, r3
 80026be:	1312      	asrs	r2, r2, #12
 80026c0:	17db      	asrs	r3, r3, #31
 80026c2:	1ad0      	subs	r0, r2, r3
 80026c4:	4b9d      	ldr	r3, [pc, #628]	@ (800293c <main+0x710>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a96      	ldr	r2, [pc, #600]	@ (8002924 <main+0x6f8>)
 80026ca:	fb82 1203 	smull	r1, r2, r2, r3
 80026ce:	1311      	asrs	r1, r2, #12
 80026d0:	17da      	asrs	r2, r3, #31
 80026d2:	1a8a      	subs	r2, r1, r2
 80026d4:	f242 7110 	movw	r1, #10000	@ 0x2710
 80026d8:	fb01 f202 	mul.w	r2, r1, r2
 80026dc:	1a9a      	subs	r2, r3, r2
 80026de:	4613      	mov	r3, r2
 80026e0:	4602      	mov	r2, r0
 80026e2:	498d      	ldr	r1, [pc, #564]	@ (8002918 <main+0x6ec>)
 80026e4:	4896      	ldr	r0, [pc, #600]	@ (8002940 <main+0x714>)
 80026e6:	f009 f91d 	bl	800b924 <siprintf>
		 sprintf(h12s,"%d.%d",int_hucre12/10000,int_hucre12%10000);
 80026ea:	4b96      	ldr	r3, [pc, #600]	@ (8002944 <main+0x718>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a8d      	ldr	r2, [pc, #564]	@ (8002924 <main+0x6f8>)
 80026f0:	fb82 1203 	smull	r1, r2, r2, r3
 80026f4:	1312      	asrs	r2, r2, #12
 80026f6:	17db      	asrs	r3, r3, #31
 80026f8:	1ad0      	subs	r0, r2, r3
 80026fa:	4b92      	ldr	r3, [pc, #584]	@ (8002944 <main+0x718>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a89      	ldr	r2, [pc, #548]	@ (8002924 <main+0x6f8>)
 8002700:	fb82 1203 	smull	r1, r2, r2, r3
 8002704:	1311      	asrs	r1, r2, #12
 8002706:	17da      	asrs	r2, r3, #31
 8002708:	1a8a      	subs	r2, r1, r2
 800270a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800270e:	fb01 f202 	mul.w	r2, r1, r2
 8002712:	1a9a      	subs	r2, r3, r2
 8002714:	4613      	mov	r3, r2
 8002716:	4602      	mov	r2, r0
 8002718:	497f      	ldr	r1, [pc, #508]	@ (8002918 <main+0x6ec>)
 800271a:	488b      	ldr	r0, [pc, #556]	@ (8002948 <main+0x71c>)
 800271c:	f009 f902 	bl	800b924 <siprintf>
		 sprintf(h13s,"%d.%d",int_hucre13/10000,int_hucre13%10000);
 8002720:	4b8a      	ldr	r3, [pc, #552]	@ (800294c <main+0x720>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a7f      	ldr	r2, [pc, #508]	@ (8002924 <main+0x6f8>)
 8002726:	fb82 1203 	smull	r1, r2, r2, r3
 800272a:	1312      	asrs	r2, r2, #12
 800272c:	17db      	asrs	r3, r3, #31
 800272e:	1ad0      	subs	r0, r2, r3
 8002730:	4b86      	ldr	r3, [pc, #536]	@ (800294c <main+0x720>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a7b      	ldr	r2, [pc, #492]	@ (8002924 <main+0x6f8>)
 8002736:	fb82 1203 	smull	r1, r2, r2, r3
 800273a:	1311      	asrs	r1, r2, #12
 800273c:	17da      	asrs	r2, r3, #31
 800273e:	1a8a      	subs	r2, r1, r2
 8002740:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002744:	fb01 f202 	mul.w	r2, r1, r2
 8002748:	1a9a      	subs	r2, r3, r2
 800274a:	4613      	mov	r3, r2
 800274c:	4602      	mov	r2, r0
 800274e:	4972      	ldr	r1, [pc, #456]	@ (8002918 <main+0x6ec>)
 8002750:	487f      	ldr	r0, [pc, #508]	@ (8002950 <main+0x724>)
 8002752:	f009 f8e7 	bl	800b924 <siprintf>
		 sprintf(h14s,"%d.%d",int_hucre14/10000,int_hucre14%10000);
 8002756:	4b7f      	ldr	r3, [pc, #508]	@ (8002954 <main+0x728>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a72      	ldr	r2, [pc, #456]	@ (8002924 <main+0x6f8>)
 800275c:	fb82 1203 	smull	r1, r2, r2, r3
 8002760:	1312      	asrs	r2, r2, #12
 8002762:	17db      	asrs	r3, r3, #31
 8002764:	1ad0      	subs	r0, r2, r3
 8002766:	4b7b      	ldr	r3, [pc, #492]	@ (8002954 <main+0x728>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6e      	ldr	r2, [pc, #440]	@ (8002924 <main+0x6f8>)
 800276c:	fb82 1203 	smull	r1, r2, r2, r3
 8002770:	1311      	asrs	r1, r2, #12
 8002772:	17da      	asrs	r2, r3, #31
 8002774:	1a8a      	subs	r2, r1, r2
 8002776:	f242 7110 	movw	r1, #10000	@ 0x2710
 800277a:	fb01 f202 	mul.w	r2, r1, r2
 800277e:	1a9a      	subs	r2, r3, r2
 8002780:	4613      	mov	r3, r2
 8002782:	4602      	mov	r2, r0
 8002784:	4964      	ldr	r1, [pc, #400]	@ (8002918 <main+0x6ec>)
 8002786:	4874      	ldr	r0, [pc, #464]	@ (8002958 <main+0x72c>)
 8002788:	f009 f8cc 	bl	800b924 <siprintf>
		 sprintf(h15s,"%d.%d",int_hucre15/10000,int_hucre15%10000);
 800278c:	4b73      	ldr	r3, [pc, #460]	@ (800295c <main+0x730>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a64      	ldr	r2, [pc, #400]	@ (8002924 <main+0x6f8>)
 8002792:	fb82 1203 	smull	r1, r2, r2, r3
 8002796:	1312      	asrs	r2, r2, #12
 8002798:	17db      	asrs	r3, r3, #31
 800279a:	1ad0      	subs	r0, r2, r3
 800279c:	4b6f      	ldr	r3, [pc, #444]	@ (800295c <main+0x730>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a60      	ldr	r2, [pc, #384]	@ (8002924 <main+0x6f8>)
 80027a2:	fb82 1203 	smull	r1, r2, r2, r3
 80027a6:	1311      	asrs	r1, r2, #12
 80027a8:	17da      	asrs	r2, r3, #31
 80027aa:	1a8a      	subs	r2, r1, r2
 80027ac:	f242 7110 	movw	r1, #10000	@ 0x2710
 80027b0:	fb01 f202 	mul.w	r2, r1, r2
 80027b4:	1a9a      	subs	r2, r3, r2
 80027b6:	4613      	mov	r3, r2
 80027b8:	4602      	mov	r2, r0
 80027ba:	4957      	ldr	r1, [pc, #348]	@ (8002918 <main+0x6ec>)
 80027bc:	4868      	ldr	r0, [pc, #416]	@ (8002960 <main+0x734>)
 80027be:	f009 f8b1 	bl	800b924 <siprintf>
		 sprintf(h16s,"%d.%d",int_hucre16/10000,int_hucre16%10000);
 80027c2:	4b68      	ldr	r3, [pc, #416]	@ (8002964 <main+0x738>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a57      	ldr	r2, [pc, #348]	@ (8002924 <main+0x6f8>)
 80027c8:	fb82 1203 	smull	r1, r2, r2, r3
 80027cc:	1312      	asrs	r2, r2, #12
 80027ce:	17db      	asrs	r3, r3, #31
 80027d0:	1ad0      	subs	r0, r2, r3
 80027d2:	4b64      	ldr	r3, [pc, #400]	@ (8002964 <main+0x738>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a53      	ldr	r2, [pc, #332]	@ (8002924 <main+0x6f8>)
 80027d8:	fb82 1203 	smull	r1, r2, r2, r3
 80027dc:	1311      	asrs	r1, r2, #12
 80027de:	17da      	asrs	r2, r3, #31
 80027e0:	1a8a      	subs	r2, r1, r2
 80027e2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80027e6:	fb01 f202 	mul.w	r2, r1, r2
 80027ea:	1a9a      	subs	r2, r3, r2
 80027ec:	4613      	mov	r3, r2
 80027ee:	4602      	mov	r2, r0
 80027f0:	4949      	ldr	r1, [pc, #292]	@ (8002918 <main+0x6ec>)
 80027f2:	485d      	ldr	r0, [pc, #372]	@ (8002968 <main+0x73c>)
 80027f4:	f009 f896 	bl	800b924 <siprintf>
		 sprintf(h17s,"%d.%d",int_hucre17/10000,int_hucre17%10000);
 80027f8:	4b5c      	ldr	r3, [pc, #368]	@ (800296c <main+0x740>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a49      	ldr	r2, [pc, #292]	@ (8002924 <main+0x6f8>)
 80027fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002802:	1312      	asrs	r2, r2, #12
 8002804:	17db      	asrs	r3, r3, #31
 8002806:	1ad0      	subs	r0, r2, r3
 8002808:	4b58      	ldr	r3, [pc, #352]	@ (800296c <main+0x740>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a45      	ldr	r2, [pc, #276]	@ (8002924 <main+0x6f8>)
 800280e:	fb82 1203 	smull	r1, r2, r2, r3
 8002812:	1311      	asrs	r1, r2, #12
 8002814:	17da      	asrs	r2, r3, #31
 8002816:	1a8a      	subs	r2, r1, r2
 8002818:	f242 7110 	movw	r1, #10000	@ 0x2710
 800281c:	fb01 f202 	mul.w	r2, r1, r2
 8002820:	1a9a      	subs	r2, r3, r2
 8002822:	4613      	mov	r3, r2
 8002824:	4602      	mov	r2, r0
 8002826:	493c      	ldr	r1, [pc, #240]	@ (8002918 <main+0x6ec>)
 8002828:	4851      	ldr	r0, [pc, #324]	@ (8002970 <main+0x744>)
 800282a:	f009 f87b 	bl	800b924 <siprintf>
		 sprintf(h18s,"%d.%d",int_hucre18/10000,int_hucre18%10000);
 800282e:	4b51      	ldr	r3, [pc, #324]	@ (8002974 <main+0x748>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a3c      	ldr	r2, [pc, #240]	@ (8002924 <main+0x6f8>)
 8002834:	fb82 1203 	smull	r1, r2, r2, r3
 8002838:	1312      	asrs	r2, r2, #12
 800283a:	17db      	asrs	r3, r3, #31
 800283c:	1ad0      	subs	r0, r2, r3
 800283e:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <main+0x748>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a38      	ldr	r2, [pc, #224]	@ (8002924 <main+0x6f8>)
 8002844:	fb82 1203 	smull	r1, r2, r2, r3
 8002848:	1311      	asrs	r1, r2, #12
 800284a:	17da      	asrs	r2, r3, #31
 800284c:	1a8a      	subs	r2, r1, r2
 800284e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002852:	fb01 f202 	mul.w	r2, r1, r2
 8002856:	1a9a      	subs	r2, r3, r2
 8002858:	4613      	mov	r3, r2
 800285a:	4602      	mov	r2, r0
 800285c:	492e      	ldr	r1, [pc, #184]	@ (8002918 <main+0x6ec>)
 800285e:	4846      	ldr	r0, [pc, #280]	@ (8002978 <main+0x74c>)
 8002860:	f009 f860 	bl	800b924 <siprintf>
		 sprintf(h19s,"%d.%d",int_hucre19/10000,int_hucre19%10000);
 8002864:	4b45      	ldr	r3, [pc, #276]	@ (800297c <main+0x750>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <main+0x6f8>)
 800286a:	fb82 1203 	smull	r1, r2, r2, r3
 800286e:	1312      	asrs	r2, r2, #12
 8002870:	17db      	asrs	r3, r3, #31
 8002872:	1ad0      	subs	r0, r2, r3
 8002874:	4b41      	ldr	r3, [pc, #260]	@ (800297c <main+0x750>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2a      	ldr	r2, [pc, #168]	@ (8002924 <main+0x6f8>)
 800287a:	fb82 1203 	smull	r1, r2, r2, r3
 800287e:	1311      	asrs	r1, r2, #12
 8002880:	17da      	asrs	r2, r3, #31
 8002882:	1a8a      	subs	r2, r1, r2
 8002884:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002888:	fb01 f202 	mul.w	r2, r1, r2
 800288c:	1a9a      	subs	r2, r3, r2
 800288e:	4613      	mov	r3, r2
 8002890:	4602      	mov	r2, r0
 8002892:	4921      	ldr	r1, [pc, #132]	@ (8002918 <main+0x6ec>)
 8002894:	483a      	ldr	r0, [pc, #232]	@ (8002980 <main+0x754>)
 8002896:	f009 f845 	bl	800b924 <siprintf>
		 sprintf(h20s,"%d.%d",int_hucre20/10000,int_hucre20%10000);
 800289a:	4b3a      	ldr	r3, [pc, #232]	@ (8002984 <main+0x758>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <main+0x6f8>)
 80028a0:	fb82 1203 	smull	r1, r2, r2, r3
 80028a4:	1312      	asrs	r2, r2, #12
 80028a6:	17db      	asrs	r3, r3, #31
 80028a8:	1ad0      	subs	r0, r2, r3
 80028aa:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <main+0x758>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002924 <main+0x6f8>)
 80028b0:	fb82 1203 	smull	r1, r2, r2, r3
 80028b4:	1311      	asrs	r1, r2, #12
 80028b6:	17da      	asrs	r2, r3, #31
 80028b8:	1a8a      	subs	r2, r1, r2
 80028ba:	f242 7110 	movw	r1, #10000	@ 0x2710
 80028be:	fb01 f202 	mul.w	r2, r1, r2
 80028c2:	1a9a      	subs	r2, r3, r2
 80028c4:	4613      	mov	r3, r2
 80028c6:	4602      	mov	r2, r0
 80028c8:	4913      	ldr	r1, [pc, #76]	@ (8002918 <main+0x6ec>)
 80028ca:	482f      	ldr	r0, [pc, #188]	@ (8002988 <main+0x75c>)
 80028cc:	f009 f82a 	bl	800b924 <siprintf>
		 sprintf(h21s,"%d.%d",int_hucre21/10000,int_hucre21%10000);
 80028d0:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <main+0x760>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <main+0x6f8>)
 80028d6:	fb82 1203 	smull	r1, r2, r2, r3
 80028da:	1312      	asrs	r2, r2, #12
 80028dc:	17db      	asrs	r3, r3, #31
 80028de:	1ad0      	subs	r0, r2, r3
 80028e0:	4b2a      	ldr	r3, [pc, #168]	@ (800298c <main+0x760>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002924 <main+0x6f8>)
 80028e6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ea:	1311      	asrs	r1, r2, #12
 80028ec:	17da      	asrs	r2, r3, #31
 80028ee:	1a8a      	subs	r2, r1, r2
 80028f0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80028f4:	fb01 f202 	mul.w	r2, r1, r2
 80028f8:	1a9a      	subs	r2, r3, r2
 80028fa:	4613      	mov	r3, r2
 80028fc:	4602      	mov	r2, r0
 80028fe:	4906      	ldr	r1, [pc, #24]	@ (8002918 <main+0x6ec>)
 8002900:	4823      	ldr	r0, [pc, #140]	@ (8002990 <main+0x764>)
 8002902:	f009 f80f 	bl	800b924 <siprintf>
		 sprintf(h22s,"%d.%d",int_hucre22/10000,int_hucre22%10000);
 8002906:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <main+0x768>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a06      	ldr	r2, [pc, #24]	@ (8002924 <main+0x6f8>)
 800290c:	fb82 1203 	smull	r1, r2, r2, r3
 8002910:	1312      	asrs	r2, r2, #12
 8002912:	17db      	asrs	r3, r3, #31
 8002914:	1ad0      	subs	r0, r2, r3
 8002916:	e03f      	b.n	8002998 <main+0x76c>
 8002918:	0800c16c 	.word	0x0800c16c
 800291c:	200023b4 	.word	0x200023b4
 8002920:	20002268 	.word	0x20002268
 8002924:	68db8bad 	.word	0x68db8bad
 8002928:	200023c8 	.word	0x200023c8
 800292c:	2000226c 	.word	0x2000226c
 8002930:	200023dc 	.word	0x200023dc
 8002934:	20002270 	.word	0x20002270
 8002938:	200023f0 	.word	0x200023f0
 800293c:	20002274 	.word	0x20002274
 8002940:	20002404 	.word	0x20002404
 8002944:	20002278 	.word	0x20002278
 8002948:	20002418 	.word	0x20002418
 800294c:	2000227c 	.word	0x2000227c
 8002950:	2000242c 	.word	0x2000242c
 8002954:	20002280 	.word	0x20002280
 8002958:	20002440 	.word	0x20002440
 800295c:	20002284 	.word	0x20002284
 8002960:	20002454 	.word	0x20002454
 8002964:	20002288 	.word	0x20002288
 8002968:	20002468 	.word	0x20002468
 800296c:	2000228c 	.word	0x2000228c
 8002970:	2000247c 	.word	0x2000247c
 8002974:	20002290 	.word	0x20002290
 8002978:	20002490 	.word	0x20002490
 800297c:	20002294 	.word	0x20002294
 8002980:	200024a4 	.word	0x200024a4
 8002984:	20002298 	.word	0x20002298
 8002988:	200024b8 	.word	0x200024b8
 800298c:	2000229c 	.word	0x2000229c
 8002990:	200024cc 	.word	0x200024cc
 8002994:	200022a0 	.word	0x200022a0
 8002998:	4bae      	ldr	r3, [pc, #696]	@ (8002c54 <main+0xa28>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4aae      	ldr	r2, [pc, #696]	@ (8002c58 <main+0xa2c>)
 800299e:	fb82 1203 	smull	r1, r2, r2, r3
 80029a2:	1311      	asrs	r1, r2, #12
 80029a4:	17da      	asrs	r2, r3, #31
 80029a6:	1a8a      	subs	r2, r1, r2
 80029a8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80029ac:	fb01 f202 	mul.w	r2, r1, r2
 80029b0:	1a9a      	subs	r2, r3, r2
 80029b2:	4613      	mov	r3, r2
 80029b4:	4602      	mov	r2, r0
 80029b6:	49a9      	ldr	r1, [pc, #676]	@ (8002c5c <main+0xa30>)
 80029b8:	48a9      	ldr	r0, [pc, #676]	@ (8002c60 <main+0xa34>)
 80029ba:	f008 ffb3 	bl	800b924 <siprintf>

		 if(arac_hizi <= 5)
 80029be:	4ba9      	ldr	r3, [pc, #676]	@ (8002c64 <main+0xa38>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d808      	bhi.n	80029d8 <main+0x7ac>
		 		  		  {
		 		  hiz_ibresiderece = ((arac_hizi*3)+337);
 80029c6:	4ba7      	ldr	r3, [pc, #668]	@ (8002c64 <main+0xa38>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80029d4:	4aa4      	ldr	r2, [pc, #656]	@ (8002c68 <main+0xa3c>)
 80029d6:	6013      	str	r3, [r2, #0]

		 		  }
		 		  if(arac_hizi > 5 && arac_hizi < 7)
 80029d8:	4ba2      	ldr	r3, [pc, #648]	@ (8002c64 <main+0xa38>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d90c      	bls.n	80029fa <main+0x7ce>
 80029e0:	4ba0      	ldr	r3, [pc, #640]	@ (8002c64 <main+0xa38>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b06      	cmp	r3, #6
 80029e6:	d808      	bhi.n	80029fa <main+0x7ce>
		 						  		  {
		 						  hiz_ibresiderece = ((arac_hizi*5)+325);
 80029e8:	4b9e      	ldr	r3, [pc, #632]	@ (8002c64 <main+0xa38>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	f203 1345 	addw	r3, r3, #325	@ 0x145
 80029f6:	4a9c      	ldr	r2, [pc, #624]	@ (8002c68 <main+0xa3c>)
 80029f8:	6013      	str	r3, [r2, #0]

		 						  }

		 		  if(arac_hizi >= 7 && arac_hizi < 10)
 80029fa:	4b9a      	ldr	r3, [pc, #616]	@ (8002c64 <main+0xa38>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d90b      	bls.n	8002a1a <main+0x7ee>
 8002a02:	4b98      	ldr	r3, [pc, #608]	@ (8002c64 <main+0xa38>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b09      	cmp	r3, #9
 8002a08:	d807      	bhi.n	8002a1a <main+0x7ee>
		 							  		  {
		 							  hiz_ibresiderece = (((arac_hizi*5)+326)-360);
 8002a0a:	4b96      	ldr	r3, [pc, #600]	@ (8002c64 <main+0xa38>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b22      	subs	r3, #34	@ 0x22
 8002a16:	4a94      	ldr	r2, [pc, #592]	@ (8002c68 <main+0xa3c>)
 8002a18:	6013      	str	r3, [r2, #0]

		 							  }

		 		  if(arac_hizi >= 10)
 8002a1a:	4b92      	ldr	r3, [pc, #584]	@ (8002c64 <main+0xa38>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	d907      	bls.n	8002a32 <main+0x806>
		 							  		  {
		 							  hiz_ibresiderece = (arac_hizi*5)-37;
 8002a22:	4b90      	ldr	r3, [pc, #576]	@ (8002c64 <main+0xa38>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b25      	subs	r3, #37	@ 0x25
 8002a2e:	4a8e      	ldr	r2, [pc, #568]	@ (8002c68 <main+0xa3c>)
 8002a30:	6013      	str	r3, [r2, #0]

		 							  }

		 NEXTION_SendString(&H1, &h1s); //Hucre 1
 8002a32:	498e      	ldr	r1, [pc, #568]	@ (8002c6c <main+0xa40>)
 8002a34:	488e      	ldr	r0, [pc, #568]	@ (8002c70 <main+0xa44>)
 8002a36:	f7ff fb7f 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H2, &h2s); //Hucre 2
 8002a3a:	498e      	ldr	r1, [pc, #568]	@ (8002c74 <main+0xa48>)
 8002a3c:	488e      	ldr	r0, [pc, #568]	@ (8002c78 <main+0xa4c>)
 8002a3e:	f7ff fb7b 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H3, &h3s); //Hucre 3
 8002a42:	498e      	ldr	r1, [pc, #568]	@ (8002c7c <main+0xa50>)
 8002a44:	488e      	ldr	r0, [pc, #568]	@ (8002c80 <main+0xa54>)
 8002a46:	f7ff fb77 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H4, &h4s); //Hucre 4
 8002a4a:	498e      	ldr	r1, [pc, #568]	@ (8002c84 <main+0xa58>)
 8002a4c:	488e      	ldr	r0, [pc, #568]	@ (8002c88 <main+0xa5c>)
 8002a4e:	f7ff fb73 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H5, &h5s); //Hucre 5
 8002a52:	498e      	ldr	r1, [pc, #568]	@ (8002c8c <main+0xa60>)
 8002a54:	488e      	ldr	r0, [pc, #568]	@ (8002c90 <main+0xa64>)
 8002a56:	f7ff fb6f 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H6, &h6s); //Hucre 6
 8002a5a:	498e      	ldr	r1, [pc, #568]	@ (8002c94 <main+0xa68>)
 8002a5c:	488e      	ldr	r0, [pc, #568]	@ (8002c98 <main+0xa6c>)
 8002a5e:	f7ff fb6b 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H7,  &h7s); //Hucre 7
 8002a62:	498e      	ldr	r1, [pc, #568]	@ (8002c9c <main+0xa70>)
 8002a64:	488e      	ldr	r0, [pc, #568]	@ (8002ca0 <main+0xa74>)
 8002a66:	f7ff fb67 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H8,  &h8s); //Hucre 8
 8002a6a:	498e      	ldr	r1, [pc, #568]	@ (8002ca4 <main+0xa78>)
 8002a6c:	488e      	ldr	r0, [pc, #568]	@ (8002ca8 <main+0xa7c>)
 8002a6e:	f7ff fb63 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H9,  &h9s); //Hucre 9
 8002a72:	498e      	ldr	r1, [pc, #568]	@ (8002cac <main+0xa80>)
 8002a74:	488e      	ldr	r0, [pc, #568]	@ (8002cb0 <main+0xa84>)
 8002a76:	f7ff fb5f 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H10, &h10s); //Hucre 10
 8002a7a:	498e      	ldr	r1, [pc, #568]	@ (8002cb4 <main+0xa88>)
 8002a7c:	488e      	ldr	r0, [pc, #568]	@ (8002cb8 <main+0xa8c>)
 8002a7e:	f7ff fb5b 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H11, &h11s); //Hucre 11
 8002a82:	498e      	ldr	r1, [pc, #568]	@ (8002cbc <main+0xa90>)
 8002a84:	488e      	ldr	r0, [pc, #568]	@ (8002cc0 <main+0xa94>)
 8002a86:	f7ff fb57 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H12, &h12s); //Hucre 12
 8002a8a:	498e      	ldr	r1, [pc, #568]	@ (8002cc4 <main+0xa98>)
 8002a8c:	488e      	ldr	r0, [pc, #568]	@ (8002cc8 <main+0xa9c>)
 8002a8e:	f7ff fb53 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H13, &h13s); //Hucre 13
 8002a92:	498e      	ldr	r1, [pc, #568]	@ (8002ccc <main+0xaa0>)
 8002a94:	488e      	ldr	r0, [pc, #568]	@ (8002cd0 <main+0xaa4>)
 8002a96:	f7ff fb4f 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H14, &h14s); //Hucre 14
 8002a9a:	498e      	ldr	r1, [pc, #568]	@ (8002cd4 <main+0xaa8>)
 8002a9c:	488e      	ldr	r0, [pc, #568]	@ (8002cd8 <main+0xaac>)
 8002a9e:	f7ff fb4b 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H15, &h15s); //Hucre 15
 8002aa2:	498e      	ldr	r1, [pc, #568]	@ (8002cdc <main+0xab0>)
 8002aa4:	488e      	ldr	r0, [pc, #568]	@ (8002ce0 <main+0xab4>)
 8002aa6:	f7ff fb47 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H16, &h16s); //Hucre 16
 8002aaa:	498e      	ldr	r1, [pc, #568]	@ (8002ce4 <main+0xab8>)
 8002aac:	488e      	ldr	r0, [pc, #568]	@ (8002ce8 <main+0xabc>)
 8002aae:	f7ff fb43 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H17, &h17s); //Hucre 17
 8002ab2:	498e      	ldr	r1, [pc, #568]	@ (8002cec <main+0xac0>)
 8002ab4:	488e      	ldr	r0, [pc, #568]	@ (8002cf0 <main+0xac4>)
 8002ab6:	f7ff fb3f 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H18, &h18s); //Hucre 18
 8002aba:	498e      	ldr	r1, [pc, #568]	@ (8002cf4 <main+0xac8>)
 8002abc:	488e      	ldr	r0, [pc, #568]	@ (8002cf8 <main+0xacc>)
 8002abe:	f7ff fb3b 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H19, &h19s); //Hucre 19
 8002ac2:	498e      	ldr	r1, [pc, #568]	@ (8002cfc <main+0xad0>)
 8002ac4:	488e      	ldr	r0, [pc, #568]	@ (8002d00 <main+0xad4>)
 8002ac6:	f7ff fb37 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H20, &h20s); //Hucre 20
 8002aca:	498e      	ldr	r1, [pc, #568]	@ (8002d04 <main+0xad8>)
 8002acc:	488e      	ldr	r0, [pc, #568]	@ (8002d08 <main+0xadc>)
 8002ace:	f7ff fb33 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H21, &h21s); //Hucre 21
 8002ad2:	498e      	ldr	r1, [pc, #568]	@ (8002d0c <main+0xae0>)
 8002ad4:	488e      	ldr	r0, [pc, #568]	@ (8002d10 <main+0xae4>)
 8002ad6:	f7ff fb2f 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&H22, &h22s); //Hucre 22
 8002ada:	4961      	ldr	r1, [pc, #388]	@ (8002c60 <main+0xa34>)
 8002adc:	488d      	ldr	r0, [pc, #564]	@ (8002d14 <main+0xae8>)
 8002ade:	f7ff fb2b 	bl	8002138 <NEXTION_SendString>



		 NEXTION_SendString(&tsks, &kalansures); //Tam şarja kalan süre
 8002ae2:	498d      	ldr	r1, [pc, #564]	@ (8002d18 <main+0xaec>)
 8002ae4:	488d      	ldr	r0, [pc, #564]	@ (8002d1c <main+0xaf0>)
 8002ae6:	f7ff fb27 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&btg,  &topgerilims);  //Batarya toplam gerilim
 8002aea:	498d      	ldr	r1, [pc, #564]	@ (8002d20 <main+0xaf4>)
 8002aec:	488d      	ldr	r0, [pc, #564]	@ (8002d24 <main+0xaf8>)
 8002aee:	f7ff fb23 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&kem, &kalans);  //Kalan enerji miktarı
 8002af2:	498d      	ldr	r1, [pc, #564]	@ (8002d28 <main+0xafc>)
 8002af4:	488d      	ldr	r0, [pc, #564]	@ (8002d2c <main+0xb00>)
 8002af6:	f7ff fb1f 	bl	8002138 <NEXTION_SendString>
		 NEXTION_SendString(&sg,   &sarjgucus);  //sarj gücü
 8002afa:	498d      	ldr	r1, [pc, #564]	@ (8002d30 <main+0xb04>)
 8002afc:	488d      	ldr	r0, [pc, #564]	@ (8002d34 <main+0xb08>)
 8002afe:	f7ff fb1b 	bl	8002138 <NEXTION_SendString>

		 NEXTION_SendNum("z0",hiz_ibresiderece);
 8002b02:	4b59      	ldr	r3, [pc, #356]	@ (8002c68 <main+0xa3c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4619      	mov	r1, r3
 8002b08:	488b      	ldr	r0, [pc, #556]	@ (8002d38 <main+0xb0c>)
 8002b0a:	f7ff fb3b 	bl	8002184 <NEXTION_SendNum>
		 SendtoPB("j1.val",toplam_batarya); // Kalan batarya yüzdesi
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d3c <main+0xb10>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4619      	mov	r1, r3
 8002b16:	488a      	ldr	r0, [pc, #552]	@ (8002d40 <main+0xb14>)
 8002b18:	f7ff fb60 	bl	80021dc <SendtoPB>
		 SendtoPB("j0.val",batarya_sicaklik); // Batarya Sıcaklığı
 8002b1c:	4b89      	ldr	r3, [pc, #548]	@ (8002d44 <main+0xb18>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4619      	mov	r1, r3
 8002b24:	4888      	ldr	r0, [pc, #544]	@ (8002d48 <main+0xb1c>)
 8002b26:	f7ff fb59 	bl	80021dc <SendtoPB>


		 		  NEXTION_SendNum("n0",arac_hizi); //dijital hız
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c64 <main+0xa38>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4886      	ldr	r0, [pc, #536]	@ (8002d4c <main+0xb20>)
 8002b32:	f7ff fb27 	bl	8002184 <NEXTION_SendNum>





		 sprintf(motors,"AF6%dB",motor_temp_tam);
 8002b36:	4b86      	ldr	r3, [pc, #536]	@ (8002d50 <main+0xb24>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4985      	ldr	r1, [pc, #532]	@ (8002d54 <main+0xb28>)
 8002b3e:	4886      	ldr	r0, [pc, #536]	@ (8002d58 <main+0xb2c>)
 8002b40:	f008 fef0 	bl	800b924 <siprintf>
		 LORA_SendString(&motors);
 8002b44:	4884      	ldr	r0, [pc, #528]	@ (8002d58 <main+0xb2c>)
 8002b46:	f7ff fad9 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002b4a:	2096      	movs	r0, #150	@ 0x96
 8002b4c:	f001 fa44 	bl	8003fd8 <HAL_Delay>
		 sprintf(bataryas,"AF7%dB",bat_sicaklik);//batarya temp
 8002b50:	4b82      	ldr	r3, [pc, #520]	@ (8002d5c <main+0xb30>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4982      	ldr	r1, [pc, #520]	@ (8002d60 <main+0xb34>)
 8002b58:	4882      	ldr	r0, [pc, #520]	@ (8002d64 <main+0xb38>)
 8002b5a:	f008 fee3 	bl	800b924 <siprintf>
		 LORA_SendString(&bataryas);
 8002b5e:	4881      	ldr	r0, [pc, #516]	@ (8002d64 <main+0xb38>)
 8002b60:	f7ff facc 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002b64:	2096      	movs	r0, #150	@ 0x96
 8002b66:	f001 fa37 	bl	8003fd8 <HAL_Delay>
		 sprintf(arachızs,"AF5%dB",arac_hiz);//arac hızı
 8002b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d68 <main+0xb3c>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	497e      	ldr	r1, [pc, #504]	@ (8002d6c <main+0xb40>)
 8002b72:	487f      	ldr	r0, [pc, #508]	@ (8002d70 <main+0xb44>)
 8002b74:	f008 fed6 	bl	800b924 <siprintf>
		 LORA_SendString(&arachızs);
 8002b78:	487d      	ldr	r0, [pc, #500]	@ (8002d70 <main+0xb44>)
 8002b7a:	f7ff fabf 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002b7e:	2096      	movs	r0, #150	@ 0x96
 8002b80:	f001 fa2a 	bl	8003fd8 <HAL_Delay>
		 sprintf(kalans,"AG1%dB",int_kalan_enerj_miktari/100);//kalan enerji miktarı
 8002b84:	4b7b      	ldr	r3, [pc, #492]	@ (8002d74 <main+0xb48>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a7b      	ldr	r2, [pc, #492]	@ (8002d78 <main+0xb4c>)
 8002b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b8e:	1152      	asrs	r2, r2, #5
 8002b90:	17db      	asrs	r3, r3, #31
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	4979      	ldr	r1, [pc, #484]	@ (8002d7c <main+0xb50>)
 8002b98:	4863      	ldr	r0, [pc, #396]	@ (8002d28 <main+0xafc>)
 8002b9a:	f008 fec3 	bl	800b924 <siprintf>
		 LORA_SendString(&kalans);
 8002b9e:	4862      	ldr	r0, [pc, #392]	@ (8002d28 <main+0xafc>)
 8002ba0:	f7ff faac 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002ba4:	2096      	movs	r0, #150	@ 0x96
 8002ba6:	f001 fa17 	bl	8003fd8 <HAL_Delay>
		 sprintf(topgerilims,"AF9%dB",int_toplam_gerilim/100);//toplam gerilim
 8002baa:	4b75      	ldr	r3, [pc, #468]	@ (8002d80 <main+0xb54>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a72      	ldr	r2, [pc, #456]	@ (8002d78 <main+0xb4c>)
 8002bb0:	fb82 1203 	smull	r1, r2, r2, r3
 8002bb4:	1152      	asrs	r2, r2, #5
 8002bb6:	17db      	asrs	r3, r3, #31
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4971      	ldr	r1, [pc, #452]	@ (8002d84 <main+0xb58>)
 8002bbe:	4858      	ldr	r0, [pc, #352]	@ (8002d20 <main+0xaf4>)
 8002bc0:	f008 feb0 	bl	800b924 <siprintf>
		 LORA_SendString(&topgerilims);
 8002bc4:	4856      	ldr	r0, [pc, #344]	@ (8002d20 <main+0xaf4>)
 8002bc6:	f7ff fa99 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002bca:	2096      	movs	r0, #150	@ 0x96
 8002bcc:	f001 fa04 	bl	8003fd8 <HAL_Delay>
		 sprintf(kalansures,"AG2%dB",kalan_sure);//kalan sure
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d88 <main+0xb5c>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	496d      	ldr	r1, [pc, #436]	@ (8002d8c <main+0xb60>)
 8002bd8:	484f      	ldr	r0, [pc, #316]	@ (8002d18 <main+0xaec>)
 8002bda:	f008 fea3 	bl	800b924 <siprintf>
		 LORA_SendString(&kalansures);
 8002bde:	484e      	ldr	r0, [pc, #312]	@ (8002d18 <main+0xaec>)
 8002be0:	f7ff fa8c 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002be4:	2096      	movs	r0, #150	@ 0x96
 8002be6:	f001 f9f7 	bl	8003fd8 <HAL_Delay>
		 sprintf(sarjgucus,"AG3%dB",sarj_gucu);//sarj gücü
 8002bea:	4b69      	ldr	r3, [pc, #420]	@ (8002d90 <main+0xb64>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4968      	ldr	r1, [pc, #416]	@ (8002d94 <main+0xb68>)
 8002bf2:	484f      	ldr	r0, [pc, #316]	@ (8002d30 <main+0xb04>)
 8002bf4:	f008 fe96 	bl	800b924 <siprintf>
		 LORA_SendString(&sarjgucus);
 8002bf8:	484d      	ldr	r0, [pc, #308]	@ (8002d30 <main+0xb04>)
 8002bfa:	f7ff fa7f 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002bfe:	2096      	movs	r0, #150	@ 0x96
 8002c00:	f001 f9ea 	bl	8003fd8 <HAL_Delay>

		 //TOPLAMbatarya yüzdesi eksik AF8%dB
		 LORA_SendString("AF8100B");
 8002c04:	4864      	ldr	r0, [pc, #400]	@ (8002d98 <main+0xb6c>)
 8002c06:	f7ff fa79 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002c0a:	2096      	movs	r0, #150	@ 0x96
 8002c0c:	f001 f9e4 	bl	8003fd8 <HAL_Delay>


		 sprintf(h1s,"AD1%d.%dB",int_hucre1/10000,int_hucre1%10000);
 8002c10:	4b62      	ldr	r3, [pc, #392]	@ (8002d9c <main+0xb70>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <main+0xa2c>)
 8002c16:	fb82 1203 	smull	r1, r2, r2, r3
 8002c1a:	1312      	asrs	r2, r2, #12
 8002c1c:	17db      	asrs	r3, r3, #31
 8002c1e:	1ad0      	subs	r0, r2, r3
 8002c20:	4b5e      	ldr	r3, [pc, #376]	@ (8002d9c <main+0xb70>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0c      	ldr	r2, [pc, #48]	@ (8002c58 <main+0xa2c>)
 8002c26:	fb82 1203 	smull	r1, r2, r2, r3
 8002c2a:	1311      	asrs	r1, r2, #12
 8002c2c:	17da      	asrs	r2, r3, #31
 8002c2e:	1a8a      	subs	r2, r1, r2
 8002c30:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002c34:	fb01 f202 	mul.w	r2, r1, r2
 8002c38:	1a9a      	subs	r2, r3, r2
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4958      	ldr	r1, [pc, #352]	@ (8002da0 <main+0xb74>)
 8002c40:	480a      	ldr	r0, [pc, #40]	@ (8002c6c <main+0xa40>)
 8002c42:	f008 fe6f 	bl	800b924 <siprintf>
		 LORA_SendString(&h1s);
 8002c46:	4809      	ldr	r0, [pc, #36]	@ (8002c6c <main+0xa40>)
 8002c48:	f7ff fa58 	bl	80020fc <LORA_SendString>
		 HAL_Delay(15);
 8002c4c:	200f      	movs	r0, #15
 8002c4e:	f001 f9c3 	bl	8003fd8 <HAL_Delay>
 8002c52:	e0a7      	b.n	8002da4 <main+0xb78>
 8002c54:	200022a0 	.word	0x200022a0
 8002c58:	68db8bad 	.word	0x68db8bad
 8002c5c:	0800c16c 	.word	0x0800c16c
 8002c60:	200024e0 	.word	0x200024e0
 8002c64:	200021e0 	.word	0x200021e0
 8002c68:	20002700 	.word	0x20002700
 8002c6c:	2000233c 	.word	0x2000233c
 8002c70:	20000004 	.word	0x20000004
 8002c74:	20002350 	.word	0x20002350
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	20002364 	.word	0x20002364
 8002c80:	2000000c 	.word	0x2000000c
 8002c84:	20002378 	.word	0x20002378
 8002c88:	20000010 	.word	0x20000010
 8002c8c:	2000238c 	.word	0x2000238c
 8002c90:	20000014 	.word	0x20000014
 8002c94:	200023a0 	.word	0x200023a0
 8002c98:	20000018 	.word	0x20000018
 8002c9c:	200023b4 	.word	0x200023b4
 8002ca0:	2000001c 	.word	0x2000001c
 8002ca4:	200023c8 	.word	0x200023c8
 8002ca8:	20000020 	.word	0x20000020
 8002cac:	200023dc 	.word	0x200023dc
 8002cb0:	20000024 	.word	0x20000024
 8002cb4:	200023f0 	.word	0x200023f0
 8002cb8:	20000028 	.word	0x20000028
 8002cbc:	20002404 	.word	0x20002404
 8002cc0:	2000002c 	.word	0x2000002c
 8002cc4:	20002418 	.word	0x20002418
 8002cc8:	20000030 	.word	0x20000030
 8002ccc:	2000242c 	.word	0x2000242c
 8002cd0:	20000034 	.word	0x20000034
 8002cd4:	20002440 	.word	0x20002440
 8002cd8:	20000038 	.word	0x20000038
 8002cdc:	20002454 	.word	0x20002454
 8002ce0:	2000003c 	.word	0x2000003c
 8002ce4:	20002468 	.word	0x20002468
 8002ce8:	20000040 	.word	0x20000040
 8002cec:	2000247c 	.word	0x2000247c
 8002cf0:	20000044 	.word	0x20000044
 8002cf4:	20002490 	.word	0x20002490
 8002cf8:	20000048 	.word	0x20000048
 8002cfc:	200024a4 	.word	0x200024a4
 8002d00:	2000004c 	.word	0x2000004c
 8002d04:	200024b8 	.word	0x200024b8
 8002d08:	20000050 	.word	0x20000050
 8002d0c:	200024cc 	.word	0x200024cc
 8002d10:	20000054 	.word	0x20000054
 8002d14:	20000058 	.word	0x20000058
 8002d18:	20002310 	.word	0x20002310
 8002d1c:	2000005c 	.word	0x2000005c
 8002d20:	200022fc 	.word	0x200022fc
 8002d24:	20000060 	.word	0x20000060
 8002d28:	200022e8 	.word	0x200022e8
 8002d2c:	20000064 	.word	0x20000064
 8002d30:	20002324 	.word	0x20002324
 8002d34:	20000068 	.word	0x20000068
 8002d38:	0800c174 	.word	0x0800c174
 8002d3c:	20002704 	.word	0x20002704
 8002d40:	0800c178 	.word	0x0800c178
 8002d44:	20002708 	.word	0x20002708
 8002d48:	0800c180 	.word	0x0800c180
 8002d4c:	0800c188 	.word	0x0800c188
 8002d50:	200021ba 	.word	0x200021ba
 8002d54:	0800c18c 	.word	0x0800c18c
 8002d58:	200022ac 	.word	0x200022ac
 8002d5c:	20002338 	.word	0x20002338
 8002d60:	0800c194 	.word	0x0800c194
 8002d64:	200022c0 	.word	0x200022c0
 8002d68:	200021b8 	.word	0x200021b8
 8002d6c:	0800c19c 	.word	0x0800c19c
 8002d70:	200022d4 	.word	0x200022d4
 8002d74:	200022a8 	.word	0x200022a8
 8002d78:	51eb851f 	.word	0x51eb851f
 8002d7c:	0800c1a4 	.word	0x0800c1a4
 8002d80:	200022a4 	.word	0x200022a4
 8002d84:	0800c1ac 	.word	0x0800c1ac
 8002d88:	200021d2 	.word	0x200021d2
 8002d8c:	0800c1b4 	.word	0x0800c1b4
 8002d90:	200021d0 	.word	0x200021d0
 8002d94:	0800c1bc 	.word	0x0800c1bc
 8002d98:	0800c1c4 	.word	0x0800c1c4
 8002d9c:	2000224c 	.word	0x2000224c
 8002da0:	0800c1cc 	.word	0x0800c1cc
		 sprintf(h2s,"AD2%d.%dB",int_hucre2/10000,int_hucre2%10000);
 8002da4:	4bc7      	ldr	r3, [pc, #796]	@ (80030c4 <main+0xe98>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4ac7      	ldr	r2, [pc, #796]	@ (80030c8 <main+0xe9c>)
 8002daa:	fb82 1203 	smull	r1, r2, r2, r3
 8002dae:	1312      	asrs	r2, r2, #12
 8002db0:	17db      	asrs	r3, r3, #31
 8002db2:	1ad0      	subs	r0, r2, r3
 8002db4:	4bc3      	ldr	r3, [pc, #780]	@ (80030c4 <main+0xe98>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4ac3      	ldr	r2, [pc, #780]	@ (80030c8 <main+0xe9c>)
 8002dba:	fb82 1203 	smull	r1, r2, r2, r3
 8002dbe:	1311      	asrs	r1, r2, #12
 8002dc0:	17da      	asrs	r2, r3, #31
 8002dc2:	1a8a      	subs	r2, r1, r2
 8002dc4:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002dc8:	fb01 f202 	mul.w	r2, r1, r2
 8002dcc:	1a9a      	subs	r2, r3, r2
 8002dce:	4613      	mov	r3, r2
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	49be      	ldr	r1, [pc, #760]	@ (80030cc <main+0xea0>)
 8002dd4:	48be      	ldr	r0, [pc, #760]	@ (80030d0 <main+0xea4>)
 8002dd6:	f008 fda5 	bl	800b924 <siprintf>
		 LORA_SendString(&h2s);
 8002dda:	48bd      	ldr	r0, [pc, #756]	@ (80030d0 <main+0xea4>)
 8002ddc:	f7ff f98e 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002de0:	2096      	movs	r0, #150	@ 0x96
 8002de2:	f001 f8f9 	bl	8003fd8 <HAL_Delay>
		 sprintf(h3s,"AD3%d.%dB",int_hucre3/10000,int_hucre3%10000);
 8002de6:	4bbb      	ldr	r3, [pc, #748]	@ (80030d4 <main+0xea8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4ab7      	ldr	r2, [pc, #732]	@ (80030c8 <main+0xe9c>)
 8002dec:	fb82 1203 	smull	r1, r2, r2, r3
 8002df0:	1312      	asrs	r2, r2, #12
 8002df2:	17db      	asrs	r3, r3, #31
 8002df4:	1ad0      	subs	r0, r2, r3
 8002df6:	4bb7      	ldr	r3, [pc, #732]	@ (80030d4 <main+0xea8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4ab3      	ldr	r2, [pc, #716]	@ (80030c8 <main+0xe9c>)
 8002dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8002e00:	1311      	asrs	r1, r2, #12
 8002e02:	17da      	asrs	r2, r3, #31
 8002e04:	1a8a      	subs	r2, r1, r2
 8002e06:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002e0a:	fb01 f202 	mul.w	r2, r1, r2
 8002e0e:	1a9a      	subs	r2, r3, r2
 8002e10:	4613      	mov	r3, r2
 8002e12:	4602      	mov	r2, r0
 8002e14:	49b0      	ldr	r1, [pc, #704]	@ (80030d8 <main+0xeac>)
 8002e16:	48b1      	ldr	r0, [pc, #708]	@ (80030dc <main+0xeb0>)
 8002e18:	f008 fd84 	bl	800b924 <siprintf>
		 LORA_SendString(&h3s);
 8002e1c:	48af      	ldr	r0, [pc, #700]	@ (80030dc <main+0xeb0>)
 8002e1e:	f7ff f96d 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002e22:	2096      	movs	r0, #150	@ 0x96
 8002e24:	f001 f8d8 	bl	8003fd8 <HAL_Delay>
		 sprintf(h4s,"AD4%d.%dB",int_hucre4/10000,int_hucre4%10000);
 8002e28:	4bad      	ldr	r3, [pc, #692]	@ (80030e0 <main+0xeb4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4aa6      	ldr	r2, [pc, #664]	@ (80030c8 <main+0xe9c>)
 8002e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e32:	1312      	asrs	r2, r2, #12
 8002e34:	17db      	asrs	r3, r3, #31
 8002e36:	1ad0      	subs	r0, r2, r3
 8002e38:	4ba9      	ldr	r3, [pc, #676]	@ (80030e0 <main+0xeb4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4aa2      	ldr	r2, [pc, #648]	@ (80030c8 <main+0xe9c>)
 8002e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e42:	1311      	asrs	r1, r2, #12
 8002e44:	17da      	asrs	r2, r3, #31
 8002e46:	1a8a      	subs	r2, r1, r2
 8002e48:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002e4c:	fb01 f202 	mul.w	r2, r1, r2
 8002e50:	1a9a      	subs	r2, r3, r2
 8002e52:	4613      	mov	r3, r2
 8002e54:	4602      	mov	r2, r0
 8002e56:	49a3      	ldr	r1, [pc, #652]	@ (80030e4 <main+0xeb8>)
 8002e58:	48a3      	ldr	r0, [pc, #652]	@ (80030e8 <main+0xebc>)
 8002e5a:	f008 fd63 	bl	800b924 <siprintf>
		 LORA_SendString(&h4s);
 8002e5e:	48a2      	ldr	r0, [pc, #648]	@ (80030e8 <main+0xebc>)
 8002e60:	f7ff f94c 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002e64:	2096      	movs	r0, #150	@ 0x96
 8002e66:	f001 f8b7 	bl	8003fd8 <HAL_Delay>
		 sprintf(h5s,"AD5%d.%dB",int_hucre5/10000,int_hucre5%10000);
 8002e6a:	4ba0      	ldr	r3, [pc, #640]	@ (80030ec <main+0xec0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a96      	ldr	r2, [pc, #600]	@ (80030c8 <main+0xe9c>)
 8002e70:	fb82 1203 	smull	r1, r2, r2, r3
 8002e74:	1312      	asrs	r2, r2, #12
 8002e76:	17db      	asrs	r3, r3, #31
 8002e78:	1ad0      	subs	r0, r2, r3
 8002e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80030ec <main+0xec0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a92      	ldr	r2, [pc, #584]	@ (80030c8 <main+0xe9c>)
 8002e80:	fb82 1203 	smull	r1, r2, r2, r3
 8002e84:	1311      	asrs	r1, r2, #12
 8002e86:	17da      	asrs	r2, r3, #31
 8002e88:	1a8a      	subs	r2, r1, r2
 8002e8a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002e8e:	fb01 f202 	mul.w	r2, r1, r2
 8002e92:	1a9a      	subs	r2, r3, r2
 8002e94:	4613      	mov	r3, r2
 8002e96:	4602      	mov	r2, r0
 8002e98:	4995      	ldr	r1, [pc, #596]	@ (80030f0 <main+0xec4>)
 8002e9a:	4896      	ldr	r0, [pc, #600]	@ (80030f4 <main+0xec8>)
 8002e9c:	f008 fd42 	bl	800b924 <siprintf>
		 LORA_SendString(&h5s);
 8002ea0:	4894      	ldr	r0, [pc, #592]	@ (80030f4 <main+0xec8>)
 8002ea2:	f7ff f92b 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002ea6:	2096      	movs	r0, #150	@ 0x96
 8002ea8:	f001 f896 	bl	8003fd8 <HAL_Delay>
		 sprintf(h6s,"AD6%d.%dB",int_hucre6/10000,int_hucre6%10000);
 8002eac:	4b92      	ldr	r3, [pc, #584]	@ (80030f8 <main+0xecc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a85      	ldr	r2, [pc, #532]	@ (80030c8 <main+0xe9c>)
 8002eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb6:	1312      	asrs	r2, r2, #12
 8002eb8:	17db      	asrs	r3, r3, #31
 8002eba:	1ad0      	subs	r0, r2, r3
 8002ebc:	4b8e      	ldr	r3, [pc, #568]	@ (80030f8 <main+0xecc>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a81      	ldr	r2, [pc, #516]	@ (80030c8 <main+0xe9c>)
 8002ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec6:	1311      	asrs	r1, r2, #12
 8002ec8:	17da      	asrs	r2, r3, #31
 8002eca:	1a8a      	subs	r2, r1, r2
 8002ecc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002ed0:	fb01 f202 	mul.w	r2, r1, r2
 8002ed4:	1a9a      	subs	r2, r3, r2
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4988      	ldr	r1, [pc, #544]	@ (80030fc <main+0xed0>)
 8002edc:	4888      	ldr	r0, [pc, #544]	@ (8003100 <main+0xed4>)
 8002ede:	f008 fd21 	bl	800b924 <siprintf>
		 LORA_SendString(&h6s);
 8002ee2:	4887      	ldr	r0, [pc, #540]	@ (8003100 <main+0xed4>)
 8002ee4:	f7ff f90a 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002ee8:	2096      	movs	r0, #150	@ 0x96
 8002eea:	f001 f875 	bl	8003fd8 <HAL_Delay>
		 sprintf(h7s,"AD7%d.%dB",int_hucre7/10000,int_hucre7%10000);
 8002eee:	4b85      	ldr	r3, [pc, #532]	@ (8003104 <main+0xed8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a75      	ldr	r2, [pc, #468]	@ (80030c8 <main+0xe9c>)
 8002ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ef8:	1312      	asrs	r2, r2, #12
 8002efa:	17db      	asrs	r3, r3, #31
 8002efc:	1ad0      	subs	r0, r2, r3
 8002efe:	4b81      	ldr	r3, [pc, #516]	@ (8003104 <main+0xed8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a71      	ldr	r2, [pc, #452]	@ (80030c8 <main+0xe9c>)
 8002f04:	fb82 1203 	smull	r1, r2, r2, r3
 8002f08:	1311      	asrs	r1, r2, #12
 8002f0a:	17da      	asrs	r2, r3, #31
 8002f0c:	1a8a      	subs	r2, r1, r2
 8002f0e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002f12:	fb01 f202 	mul.w	r2, r1, r2
 8002f16:	1a9a      	subs	r2, r3, r2
 8002f18:	4613      	mov	r3, r2
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	497a      	ldr	r1, [pc, #488]	@ (8003108 <main+0xedc>)
 8002f1e:	487b      	ldr	r0, [pc, #492]	@ (800310c <main+0xee0>)
 8002f20:	f008 fd00 	bl	800b924 <siprintf>
		 LORA_SendString(&h7s);
 8002f24:	4879      	ldr	r0, [pc, #484]	@ (800310c <main+0xee0>)
 8002f26:	f7ff f8e9 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002f2a:	2096      	movs	r0, #150	@ 0x96
 8002f2c:	f001 f854 	bl	8003fd8 <HAL_Delay>
		 sprintf(h8s,"AD8%d.%dB",int_hucre8/10000,int_hucre8%10000);
 8002f30:	4b77      	ldr	r3, [pc, #476]	@ (8003110 <main+0xee4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a64      	ldr	r2, [pc, #400]	@ (80030c8 <main+0xe9c>)
 8002f36:	fb82 1203 	smull	r1, r2, r2, r3
 8002f3a:	1312      	asrs	r2, r2, #12
 8002f3c:	17db      	asrs	r3, r3, #31
 8002f3e:	1ad0      	subs	r0, r2, r3
 8002f40:	4b73      	ldr	r3, [pc, #460]	@ (8003110 <main+0xee4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a60      	ldr	r2, [pc, #384]	@ (80030c8 <main+0xe9c>)
 8002f46:	fb82 1203 	smull	r1, r2, r2, r3
 8002f4a:	1311      	asrs	r1, r2, #12
 8002f4c:	17da      	asrs	r2, r3, #31
 8002f4e:	1a8a      	subs	r2, r1, r2
 8002f50:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002f54:	fb01 f202 	mul.w	r2, r1, r2
 8002f58:	1a9a      	subs	r2, r3, r2
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	496d      	ldr	r1, [pc, #436]	@ (8003114 <main+0xee8>)
 8002f60:	486d      	ldr	r0, [pc, #436]	@ (8003118 <main+0xeec>)
 8002f62:	f008 fcdf 	bl	800b924 <siprintf>
		 LORA_SendString(&h8s);
 8002f66:	486c      	ldr	r0, [pc, #432]	@ (8003118 <main+0xeec>)
 8002f68:	f7ff f8c8 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002f6c:	2096      	movs	r0, #150	@ 0x96
 8002f6e:	f001 f833 	bl	8003fd8 <HAL_Delay>
		 sprintf(h9s,"AD9%d.%dB",int_hucre9/10000,int_hucre9%10000);
 8002f72:	4b6a      	ldr	r3, [pc, #424]	@ (800311c <main+0xef0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a54      	ldr	r2, [pc, #336]	@ (80030c8 <main+0xe9c>)
 8002f78:	fb82 1203 	smull	r1, r2, r2, r3
 8002f7c:	1312      	asrs	r2, r2, #12
 8002f7e:	17db      	asrs	r3, r3, #31
 8002f80:	1ad0      	subs	r0, r2, r3
 8002f82:	4b66      	ldr	r3, [pc, #408]	@ (800311c <main+0xef0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a50      	ldr	r2, [pc, #320]	@ (80030c8 <main+0xe9c>)
 8002f88:	fb82 1203 	smull	r1, r2, r2, r3
 8002f8c:	1311      	asrs	r1, r2, #12
 8002f8e:	17da      	asrs	r2, r3, #31
 8002f90:	1a8a      	subs	r2, r1, r2
 8002f92:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002f96:	fb01 f202 	mul.w	r2, r1, r2
 8002f9a:	1a9a      	subs	r2, r3, r2
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	495f      	ldr	r1, [pc, #380]	@ (8003120 <main+0xef4>)
 8002fa2:	4860      	ldr	r0, [pc, #384]	@ (8003124 <main+0xef8>)
 8002fa4:	f008 fcbe 	bl	800b924 <siprintf>
		 LORA_SendString(&h9s);
 8002fa8:	485e      	ldr	r0, [pc, #376]	@ (8003124 <main+0xef8>)
 8002faa:	f7ff f8a7 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002fae:	2096      	movs	r0, #150	@ 0x96
 8002fb0:	f001 f812 	bl	8003fd8 <HAL_Delay>
		 sprintf(h10s,"AE1%d.%dB",int_hucre10/10000,int_hucre10%10000);
 8002fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8003128 <main+0xefc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a43      	ldr	r2, [pc, #268]	@ (80030c8 <main+0xe9c>)
 8002fba:	fb82 1203 	smull	r1, r2, r2, r3
 8002fbe:	1312      	asrs	r2, r2, #12
 8002fc0:	17db      	asrs	r3, r3, #31
 8002fc2:	1ad0      	subs	r0, r2, r3
 8002fc4:	4b58      	ldr	r3, [pc, #352]	@ (8003128 <main+0xefc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80030c8 <main+0xe9c>)
 8002fca:	fb82 1203 	smull	r1, r2, r2, r3
 8002fce:	1311      	asrs	r1, r2, #12
 8002fd0:	17da      	asrs	r2, r3, #31
 8002fd2:	1a8a      	subs	r2, r1, r2
 8002fd4:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002fd8:	fb01 f202 	mul.w	r2, r1, r2
 8002fdc:	1a9a      	subs	r2, r3, r2
 8002fde:	4613      	mov	r3, r2
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4952      	ldr	r1, [pc, #328]	@ (800312c <main+0xf00>)
 8002fe4:	4852      	ldr	r0, [pc, #328]	@ (8003130 <main+0xf04>)
 8002fe6:	f008 fc9d 	bl	800b924 <siprintf>
		 LORA_SendString(&h10s);
 8002fea:	4851      	ldr	r0, [pc, #324]	@ (8003130 <main+0xf04>)
 8002fec:	f7ff f886 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8002ff0:	2096      	movs	r0, #150	@ 0x96
 8002ff2:	f000 fff1 	bl	8003fd8 <HAL_Delay>
		 sprintf(h11s,"AE2%d.%dB",int_hucre11/10000,int_hucre11%10000);
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8003134 <main+0xf08>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a33      	ldr	r2, [pc, #204]	@ (80030c8 <main+0xe9c>)
 8002ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8003000:	1312      	asrs	r2, r2, #12
 8003002:	17db      	asrs	r3, r3, #31
 8003004:	1ad0      	subs	r0, r2, r3
 8003006:	4b4b      	ldr	r3, [pc, #300]	@ (8003134 <main+0xf08>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2f      	ldr	r2, [pc, #188]	@ (80030c8 <main+0xe9c>)
 800300c:	fb82 1203 	smull	r1, r2, r2, r3
 8003010:	1311      	asrs	r1, r2, #12
 8003012:	17da      	asrs	r2, r3, #31
 8003014:	1a8a      	subs	r2, r1, r2
 8003016:	f242 7110 	movw	r1, #10000	@ 0x2710
 800301a:	fb01 f202 	mul.w	r2, r1, r2
 800301e:	1a9a      	subs	r2, r3, r2
 8003020:	4613      	mov	r3, r2
 8003022:	4602      	mov	r2, r0
 8003024:	4944      	ldr	r1, [pc, #272]	@ (8003138 <main+0xf0c>)
 8003026:	4845      	ldr	r0, [pc, #276]	@ (800313c <main+0xf10>)
 8003028:	f008 fc7c 	bl	800b924 <siprintf>
		 LORA_SendString(&h11s);
 800302c:	4843      	ldr	r0, [pc, #268]	@ (800313c <main+0xf10>)
 800302e:	f7ff f865 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8003032:	2096      	movs	r0, #150	@ 0x96
 8003034:	f000 ffd0 	bl	8003fd8 <HAL_Delay>
		 sprintf(h12s,"AE3%d.%dB",int_hucre12/10000,int_hucre12%10000);
 8003038:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <main+0xf14>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <main+0xe9c>)
 800303e:	fb82 1203 	smull	r1, r2, r2, r3
 8003042:	1312      	asrs	r2, r2, #12
 8003044:	17db      	asrs	r3, r3, #31
 8003046:	1ad0      	subs	r0, r2, r3
 8003048:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <main+0xf14>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1e      	ldr	r2, [pc, #120]	@ (80030c8 <main+0xe9c>)
 800304e:	fb82 1203 	smull	r1, r2, r2, r3
 8003052:	1311      	asrs	r1, r2, #12
 8003054:	17da      	asrs	r2, r3, #31
 8003056:	1a8a      	subs	r2, r1, r2
 8003058:	f242 7110 	movw	r1, #10000	@ 0x2710
 800305c:	fb01 f202 	mul.w	r2, r1, r2
 8003060:	1a9a      	subs	r2, r3, r2
 8003062:	4613      	mov	r3, r2
 8003064:	4602      	mov	r2, r0
 8003066:	4937      	ldr	r1, [pc, #220]	@ (8003144 <main+0xf18>)
 8003068:	4837      	ldr	r0, [pc, #220]	@ (8003148 <main+0xf1c>)
 800306a:	f008 fc5b 	bl	800b924 <siprintf>
		 LORA_SendString(h12s);
 800306e:	4836      	ldr	r0, [pc, #216]	@ (8003148 <main+0xf1c>)
 8003070:	f7ff f844 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8003074:	2096      	movs	r0, #150	@ 0x96
 8003076:	f000 ffaf 	bl	8003fd8 <HAL_Delay>
		 sprintf(h13s,"AE4%d.%dB",int_hucre13/10000,int_hucre13%10000);
 800307a:	4b34      	ldr	r3, [pc, #208]	@ (800314c <main+0xf20>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a12      	ldr	r2, [pc, #72]	@ (80030c8 <main+0xe9c>)
 8003080:	fb82 1203 	smull	r1, r2, r2, r3
 8003084:	1312      	asrs	r2, r2, #12
 8003086:	17db      	asrs	r3, r3, #31
 8003088:	1ad0      	subs	r0, r2, r3
 800308a:	4b30      	ldr	r3, [pc, #192]	@ (800314c <main+0xf20>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a0e      	ldr	r2, [pc, #56]	@ (80030c8 <main+0xe9c>)
 8003090:	fb82 1203 	smull	r1, r2, r2, r3
 8003094:	1311      	asrs	r1, r2, #12
 8003096:	17da      	asrs	r2, r3, #31
 8003098:	1a8a      	subs	r2, r1, r2
 800309a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800309e:	fb01 f202 	mul.w	r2, r1, r2
 80030a2:	1a9a      	subs	r2, r3, r2
 80030a4:	4613      	mov	r3, r2
 80030a6:	4602      	mov	r2, r0
 80030a8:	4929      	ldr	r1, [pc, #164]	@ (8003150 <main+0xf24>)
 80030aa:	482a      	ldr	r0, [pc, #168]	@ (8003154 <main+0xf28>)
 80030ac:	f008 fc3a 	bl	800b924 <siprintf>
		 LORA_SendString(&h13s);
 80030b0:	4828      	ldr	r0, [pc, #160]	@ (8003154 <main+0xf28>)
 80030b2:	f7ff f823 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 80030b6:	2096      	movs	r0, #150	@ 0x96
 80030b8:	f000 ff8e 	bl	8003fd8 <HAL_Delay>
		 sprintf(h14s,"AE5%d.%dB",int_hucre14/10000,int_hucre14%10000);
 80030bc:	4b26      	ldr	r3, [pc, #152]	@ (8003158 <main+0xf2c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	e04c      	b.n	800315c <main+0xf30>
 80030c2:	bf00      	nop
 80030c4:	20002250 	.word	0x20002250
 80030c8:	68db8bad 	.word	0x68db8bad
 80030cc:	0800c1d8 	.word	0x0800c1d8
 80030d0:	20002350 	.word	0x20002350
 80030d4:	20002254 	.word	0x20002254
 80030d8:	0800c1e4 	.word	0x0800c1e4
 80030dc:	20002364 	.word	0x20002364
 80030e0:	20002258 	.word	0x20002258
 80030e4:	0800c1f0 	.word	0x0800c1f0
 80030e8:	20002378 	.word	0x20002378
 80030ec:	2000225c 	.word	0x2000225c
 80030f0:	0800c1fc 	.word	0x0800c1fc
 80030f4:	2000238c 	.word	0x2000238c
 80030f8:	20002260 	.word	0x20002260
 80030fc:	0800c208 	.word	0x0800c208
 8003100:	200023a0 	.word	0x200023a0
 8003104:	20002264 	.word	0x20002264
 8003108:	0800c214 	.word	0x0800c214
 800310c:	200023b4 	.word	0x200023b4
 8003110:	20002268 	.word	0x20002268
 8003114:	0800c220 	.word	0x0800c220
 8003118:	200023c8 	.word	0x200023c8
 800311c:	2000226c 	.word	0x2000226c
 8003120:	0800c22c 	.word	0x0800c22c
 8003124:	200023dc 	.word	0x200023dc
 8003128:	20002270 	.word	0x20002270
 800312c:	0800c238 	.word	0x0800c238
 8003130:	200023f0 	.word	0x200023f0
 8003134:	20002274 	.word	0x20002274
 8003138:	0800c244 	.word	0x0800c244
 800313c:	20002404 	.word	0x20002404
 8003140:	20002278 	.word	0x20002278
 8003144:	0800c250 	.word	0x0800c250
 8003148:	20002418 	.word	0x20002418
 800314c:	2000227c 	.word	0x2000227c
 8003150:	0800c25c 	.word	0x0800c25c
 8003154:	2000242c 	.word	0x2000242c
 8003158:	20002280 	.word	0x20002280
 800315c:	4a94      	ldr	r2, [pc, #592]	@ (80033b0 <main+0x1184>)
 800315e:	fb82 1203 	smull	r1, r2, r2, r3
 8003162:	1312      	asrs	r2, r2, #12
 8003164:	17db      	asrs	r3, r3, #31
 8003166:	1ad0      	subs	r0, r2, r3
 8003168:	4b92      	ldr	r3, [pc, #584]	@ (80033b4 <main+0x1188>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a90      	ldr	r2, [pc, #576]	@ (80033b0 <main+0x1184>)
 800316e:	fb82 1203 	smull	r1, r2, r2, r3
 8003172:	1311      	asrs	r1, r2, #12
 8003174:	17da      	asrs	r2, r3, #31
 8003176:	1a8a      	subs	r2, r1, r2
 8003178:	f242 7110 	movw	r1, #10000	@ 0x2710
 800317c:	fb01 f202 	mul.w	r2, r1, r2
 8003180:	1a9a      	subs	r2, r3, r2
 8003182:	4613      	mov	r3, r2
 8003184:	4602      	mov	r2, r0
 8003186:	498c      	ldr	r1, [pc, #560]	@ (80033b8 <main+0x118c>)
 8003188:	488c      	ldr	r0, [pc, #560]	@ (80033bc <main+0x1190>)
 800318a:	f008 fbcb 	bl	800b924 <siprintf>
		 LORA_SendString(&h14s);
 800318e:	488b      	ldr	r0, [pc, #556]	@ (80033bc <main+0x1190>)
 8003190:	f7fe ffb4 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8003194:	2096      	movs	r0, #150	@ 0x96
 8003196:	f000 ff1f 	bl	8003fd8 <HAL_Delay>
		 sprintf(h15s,"AE6%d.%dB",int_hucre15/10000,int_hucre15%10000);
 800319a:	4b89      	ldr	r3, [pc, #548]	@ (80033c0 <main+0x1194>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a84      	ldr	r2, [pc, #528]	@ (80033b0 <main+0x1184>)
 80031a0:	fb82 1203 	smull	r1, r2, r2, r3
 80031a4:	1312      	asrs	r2, r2, #12
 80031a6:	17db      	asrs	r3, r3, #31
 80031a8:	1ad0      	subs	r0, r2, r3
 80031aa:	4b85      	ldr	r3, [pc, #532]	@ (80033c0 <main+0x1194>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a80      	ldr	r2, [pc, #512]	@ (80033b0 <main+0x1184>)
 80031b0:	fb82 1203 	smull	r1, r2, r2, r3
 80031b4:	1311      	asrs	r1, r2, #12
 80031b6:	17da      	asrs	r2, r3, #31
 80031b8:	1a8a      	subs	r2, r1, r2
 80031ba:	f242 7110 	movw	r1, #10000	@ 0x2710
 80031be:	fb01 f202 	mul.w	r2, r1, r2
 80031c2:	1a9a      	subs	r2, r3, r2
 80031c4:	4613      	mov	r3, r2
 80031c6:	4602      	mov	r2, r0
 80031c8:	497e      	ldr	r1, [pc, #504]	@ (80033c4 <main+0x1198>)
 80031ca:	487f      	ldr	r0, [pc, #508]	@ (80033c8 <main+0x119c>)
 80031cc:	f008 fbaa 	bl	800b924 <siprintf>
		 LORA_SendString(&h15s);
 80031d0:	487d      	ldr	r0, [pc, #500]	@ (80033c8 <main+0x119c>)
 80031d2:	f7fe ff93 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 80031d6:	2096      	movs	r0, #150	@ 0x96
 80031d8:	f000 fefe 	bl	8003fd8 <HAL_Delay>
		 sprintf(h16s,"AE7%d.%dB",int_hucre16/10000,int_hucre16%10000);
 80031dc:	4b7b      	ldr	r3, [pc, #492]	@ (80033cc <main+0x11a0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a73      	ldr	r2, [pc, #460]	@ (80033b0 <main+0x1184>)
 80031e2:	fb82 1203 	smull	r1, r2, r2, r3
 80031e6:	1312      	asrs	r2, r2, #12
 80031e8:	17db      	asrs	r3, r3, #31
 80031ea:	1ad0      	subs	r0, r2, r3
 80031ec:	4b77      	ldr	r3, [pc, #476]	@ (80033cc <main+0x11a0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6f      	ldr	r2, [pc, #444]	@ (80033b0 <main+0x1184>)
 80031f2:	fb82 1203 	smull	r1, r2, r2, r3
 80031f6:	1311      	asrs	r1, r2, #12
 80031f8:	17da      	asrs	r2, r3, #31
 80031fa:	1a8a      	subs	r2, r1, r2
 80031fc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003200:	fb01 f202 	mul.w	r2, r1, r2
 8003204:	1a9a      	subs	r2, r3, r2
 8003206:	4613      	mov	r3, r2
 8003208:	4602      	mov	r2, r0
 800320a:	4971      	ldr	r1, [pc, #452]	@ (80033d0 <main+0x11a4>)
 800320c:	4871      	ldr	r0, [pc, #452]	@ (80033d4 <main+0x11a8>)
 800320e:	f008 fb89 	bl	800b924 <siprintf>
		 LORA_SendString(&h16s);
 8003212:	4870      	ldr	r0, [pc, #448]	@ (80033d4 <main+0x11a8>)
 8003214:	f7fe ff72 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8003218:	2096      	movs	r0, #150	@ 0x96
 800321a:	f000 fedd 	bl	8003fd8 <HAL_Delay>
		 sprintf(h17s,"AE8%d.%dB",int_hucre17/10000,int_hucre17%10000);
 800321e:	4b6e      	ldr	r3, [pc, #440]	@ (80033d8 <main+0x11ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a63      	ldr	r2, [pc, #396]	@ (80033b0 <main+0x1184>)
 8003224:	fb82 1203 	smull	r1, r2, r2, r3
 8003228:	1312      	asrs	r2, r2, #12
 800322a:	17db      	asrs	r3, r3, #31
 800322c:	1ad0      	subs	r0, r2, r3
 800322e:	4b6a      	ldr	r3, [pc, #424]	@ (80033d8 <main+0x11ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a5f      	ldr	r2, [pc, #380]	@ (80033b0 <main+0x1184>)
 8003234:	fb82 1203 	smull	r1, r2, r2, r3
 8003238:	1311      	asrs	r1, r2, #12
 800323a:	17da      	asrs	r2, r3, #31
 800323c:	1a8a      	subs	r2, r1, r2
 800323e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003242:	fb01 f202 	mul.w	r2, r1, r2
 8003246:	1a9a      	subs	r2, r3, r2
 8003248:	4613      	mov	r3, r2
 800324a:	4602      	mov	r2, r0
 800324c:	4963      	ldr	r1, [pc, #396]	@ (80033dc <main+0x11b0>)
 800324e:	4864      	ldr	r0, [pc, #400]	@ (80033e0 <main+0x11b4>)
 8003250:	f008 fb68 	bl	800b924 <siprintf>
		 LORA_SendString(&h17s);
 8003254:	4862      	ldr	r0, [pc, #392]	@ (80033e0 <main+0x11b4>)
 8003256:	f7fe ff51 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 800325a:	2096      	movs	r0, #150	@ 0x96
 800325c:	f000 febc 	bl	8003fd8 <HAL_Delay>
		 sprintf(h18s,"AE9%d.%dB",int_hucre18/10000,int_hucre18%10000);
 8003260:	4b60      	ldr	r3, [pc, #384]	@ (80033e4 <main+0x11b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <main+0x1184>)
 8003266:	fb82 1203 	smull	r1, r2, r2, r3
 800326a:	1312      	asrs	r2, r2, #12
 800326c:	17db      	asrs	r3, r3, #31
 800326e:	1ad0      	subs	r0, r2, r3
 8003270:	4b5c      	ldr	r3, [pc, #368]	@ (80033e4 <main+0x11b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a4e      	ldr	r2, [pc, #312]	@ (80033b0 <main+0x1184>)
 8003276:	fb82 1203 	smull	r1, r2, r2, r3
 800327a:	1311      	asrs	r1, r2, #12
 800327c:	17da      	asrs	r2, r3, #31
 800327e:	1a8a      	subs	r2, r1, r2
 8003280:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003284:	fb01 f202 	mul.w	r2, r1, r2
 8003288:	1a9a      	subs	r2, r3, r2
 800328a:	4613      	mov	r3, r2
 800328c:	4602      	mov	r2, r0
 800328e:	4956      	ldr	r1, [pc, #344]	@ (80033e8 <main+0x11bc>)
 8003290:	4856      	ldr	r0, [pc, #344]	@ (80033ec <main+0x11c0>)
 8003292:	f008 fb47 	bl	800b924 <siprintf>
		 LORA_SendString(&h18s);
 8003296:	4855      	ldr	r0, [pc, #340]	@ (80033ec <main+0x11c0>)
 8003298:	f7fe ff30 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 800329c:	2096      	movs	r0, #150	@ 0x96
 800329e:	f000 fe9b 	bl	8003fd8 <HAL_Delay>
		 sprintf(h19s,"AF1%d.%dB",int_hucre19/10000,int_hucre19%10000);
 80032a2:	4b53      	ldr	r3, [pc, #332]	@ (80033f0 <main+0x11c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a42      	ldr	r2, [pc, #264]	@ (80033b0 <main+0x1184>)
 80032a8:	fb82 1203 	smull	r1, r2, r2, r3
 80032ac:	1312      	asrs	r2, r2, #12
 80032ae:	17db      	asrs	r3, r3, #31
 80032b0:	1ad0      	subs	r0, r2, r3
 80032b2:	4b4f      	ldr	r3, [pc, #316]	@ (80033f0 <main+0x11c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3e      	ldr	r2, [pc, #248]	@ (80033b0 <main+0x1184>)
 80032b8:	fb82 1203 	smull	r1, r2, r2, r3
 80032bc:	1311      	asrs	r1, r2, #12
 80032be:	17da      	asrs	r2, r3, #31
 80032c0:	1a8a      	subs	r2, r1, r2
 80032c2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80032c6:	fb01 f202 	mul.w	r2, r1, r2
 80032ca:	1a9a      	subs	r2, r3, r2
 80032cc:	4613      	mov	r3, r2
 80032ce:	4602      	mov	r2, r0
 80032d0:	4948      	ldr	r1, [pc, #288]	@ (80033f4 <main+0x11c8>)
 80032d2:	4849      	ldr	r0, [pc, #292]	@ (80033f8 <main+0x11cc>)
 80032d4:	f008 fb26 	bl	800b924 <siprintf>
		 LORA_SendString(&h19s);
 80032d8:	4847      	ldr	r0, [pc, #284]	@ (80033f8 <main+0x11cc>)
 80032da:	f7fe ff0f 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 80032de:	2096      	movs	r0, #150	@ 0x96
 80032e0:	f000 fe7a 	bl	8003fd8 <HAL_Delay>
		 sprintf(h20s,"AF2%d.%dB",int_hucre20/10000,int_hucre20%10000);
 80032e4:	4b45      	ldr	r3, [pc, #276]	@ (80033fc <main+0x11d0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a31      	ldr	r2, [pc, #196]	@ (80033b0 <main+0x1184>)
 80032ea:	fb82 1203 	smull	r1, r2, r2, r3
 80032ee:	1312      	asrs	r2, r2, #12
 80032f0:	17db      	asrs	r3, r3, #31
 80032f2:	1ad0      	subs	r0, r2, r3
 80032f4:	4b41      	ldr	r3, [pc, #260]	@ (80033fc <main+0x11d0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2d      	ldr	r2, [pc, #180]	@ (80033b0 <main+0x1184>)
 80032fa:	fb82 1203 	smull	r1, r2, r2, r3
 80032fe:	1311      	asrs	r1, r2, #12
 8003300:	17da      	asrs	r2, r3, #31
 8003302:	1a8a      	subs	r2, r1, r2
 8003304:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003308:	fb01 f202 	mul.w	r2, r1, r2
 800330c:	1a9a      	subs	r2, r3, r2
 800330e:	4613      	mov	r3, r2
 8003310:	4602      	mov	r2, r0
 8003312:	493b      	ldr	r1, [pc, #236]	@ (8003400 <main+0x11d4>)
 8003314:	483b      	ldr	r0, [pc, #236]	@ (8003404 <main+0x11d8>)
 8003316:	f008 fb05 	bl	800b924 <siprintf>
		 LORA_SendString(&h20s);
 800331a:	483a      	ldr	r0, [pc, #232]	@ (8003404 <main+0x11d8>)
 800331c:	f7fe feee 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8003320:	2096      	movs	r0, #150	@ 0x96
 8003322:	f000 fe59 	bl	8003fd8 <HAL_Delay>
		 sprintf(h21s,"AF3%d.%dB",int_hucre21/10000,int_hucre21%10000);
 8003326:	4b38      	ldr	r3, [pc, #224]	@ (8003408 <main+0x11dc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a21      	ldr	r2, [pc, #132]	@ (80033b0 <main+0x1184>)
 800332c:	fb82 1203 	smull	r1, r2, r2, r3
 8003330:	1312      	asrs	r2, r2, #12
 8003332:	17db      	asrs	r3, r3, #31
 8003334:	1ad0      	subs	r0, r2, r3
 8003336:	4b34      	ldr	r3, [pc, #208]	@ (8003408 <main+0x11dc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	@ (80033b0 <main+0x1184>)
 800333c:	fb82 1203 	smull	r1, r2, r2, r3
 8003340:	1311      	asrs	r1, r2, #12
 8003342:	17da      	asrs	r2, r3, #31
 8003344:	1a8a      	subs	r2, r1, r2
 8003346:	f242 7110 	movw	r1, #10000	@ 0x2710
 800334a:	fb01 f202 	mul.w	r2, r1, r2
 800334e:	1a9a      	subs	r2, r3, r2
 8003350:	4613      	mov	r3, r2
 8003352:	4602      	mov	r2, r0
 8003354:	492d      	ldr	r1, [pc, #180]	@ (800340c <main+0x11e0>)
 8003356:	482e      	ldr	r0, [pc, #184]	@ (8003410 <main+0x11e4>)
 8003358:	f008 fae4 	bl	800b924 <siprintf>
		 LORA_SendString(&h21s);
 800335c:	482c      	ldr	r0, [pc, #176]	@ (8003410 <main+0x11e4>)
 800335e:	f7fe fecd 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 8003362:	2096      	movs	r0, #150	@ 0x96
 8003364:	f000 fe38 	bl	8003fd8 <HAL_Delay>
		 sprintf(h22s,"AF4%d.%dB",int_hucre22/10000,int_hucre22%10000);
 8003368:	4b2a      	ldr	r3, [pc, #168]	@ (8003414 <main+0x11e8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a10      	ldr	r2, [pc, #64]	@ (80033b0 <main+0x1184>)
 800336e:	fb82 1203 	smull	r1, r2, r2, r3
 8003372:	1312      	asrs	r2, r2, #12
 8003374:	17db      	asrs	r3, r3, #31
 8003376:	1ad0      	subs	r0, r2, r3
 8003378:	4b26      	ldr	r3, [pc, #152]	@ (8003414 <main+0x11e8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0c      	ldr	r2, [pc, #48]	@ (80033b0 <main+0x1184>)
 800337e:	fb82 1203 	smull	r1, r2, r2, r3
 8003382:	1311      	asrs	r1, r2, #12
 8003384:	17da      	asrs	r2, r3, #31
 8003386:	1a8a      	subs	r2, r1, r2
 8003388:	f242 7110 	movw	r1, #10000	@ 0x2710
 800338c:	fb01 f202 	mul.w	r2, r1, r2
 8003390:	1a9a      	subs	r2, r3, r2
 8003392:	4613      	mov	r3, r2
 8003394:	4602      	mov	r2, r0
 8003396:	4920      	ldr	r1, [pc, #128]	@ (8003418 <main+0x11ec>)
 8003398:	4820      	ldr	r0, [pc, #128]	@ (800341c <main+0x11f0>)
 800339a:	f008 fac3 	bl	800b924 <siprintf>
		 LORA_SendString(&h22s);
 800339e:	481f      	ldr	r0, [pc, #124]	@ (800341c <main+0x11f0>)
 80033a0:	f7fe feac 	bl	80020fc <LORA_SendString>
		 HAL_Delay(150);
 80033a4:	2096      	movs	r0, #150	@ 0x96
 80033a6:	f000 fe17 	bl	8003fd8 <HAL_Delay>
{
 80033aa:	f7fe bf8a 	b.w	80022c2 <main+0x96>
 80033ae:	bf00      	nop
 80033b0:	68db8bad 	.word	0x68db8bad
 80033b4:	20002280 	.word	0x20002280
 80033b8:	0800c268 	.word	0x0800c268
 80033bc:	20002440 	.word	0x20002440
 80033c0:	20002284 	.word	0x20002284
 80033c4:	0800c274 	.word	0x0800c274
 80033c8:	20002454 	.word	0x20002454
 80033cc:	20002288 	.word	0x20002288
 80033d0:	0800c280 	.word	0x0800c280
 80033d4:	20002468 	.word	0x20002468
 80033d8:	2000228c 	.word	0x2000228c
 80033dc:	0800c28c 	.word	0x0800c28c
 80033e0:	2000247c 	.word	0x2000247c
 80033e4:	20002290 	.word	0x20002290
 80033e8:	0800c298 	.word	0x0800c298
 80033ec:	20002490 	.word	0x20002490
 80033f0:	20002294 	.word	0x20002294
 80033f4:	0800c2a4 	.word	0x0800c2a4
 80033f8:	200024a4 	.word	0x200024a4
 80033fc:	20002298 	.word	0x20002298
 8003400:	0800c2b0 	.word	0x0800c2b0
 8003404:	200024b8 	.word	0x200024b8
 8003408:	2000229c 	.word	0x2000229c
 800340c:	0800c2bc 	.word	0x0800c2bc
 8003410:	200024cc 	.word	0x200024cc
 8003414:	200022a0 	.word	0x200022a0
 8003418:	0800c2c8 	.word	0x0800c2c8
 800341c:	200024e0 	.word	0x200024e0

08003420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b094      	sub	sp, #80	@ 0x50
 8003424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003426:	f107 0320 	add.w	r3, r7, #32
 800342a:	2230      	movs	r2, #48	@ 0x30
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f008 fa9a 	bl	800b968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003434:	f107 030c 	add.w	r3, r7, #12
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	4b28      	ldr	r3, [pc, #160]	@ (80034ec <SystemClock_Config+0xcc>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	4a27      	ldr	r2, [pc, #156]	@ (80034ec <SystemClock_Config+0xcc>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003452:	6413      	str	r3, [r2, #64]	@ 0x40
 8003454:	4b25      	ldr	r3, [pc, #148]	@ (80034ec <SystemClock_Config+0xcc>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003460:	2300      	movs	r3, #0
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <SystemClock_Config+0xd0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <SystemClock_Config+0xd0>)
 800346a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <SystemClock_Config+0xd0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800347c:	2301      	movs	r3, #1
 800347e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003486:	2302      	movs	r3, #2
 8003488:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800348a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003490:	2304      	movs	r3, #4
 8003492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003494:	23a8      	movs	r3, #168	@ 0xa8
 8003496:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003498:	2302      	movs	r3, #2
 800349a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800349c:	2304      	movs	r3, #4
 800349e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 fd93 	bl	8005fd0 <HAL_RCC_OscConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034b0:	f000 fa46 	bl	8003940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b4:	230f      	movs	r3, #15
 80034b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b8:	2302      	movs	r3, #2
 80034ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	2105      	movs	r1, #5
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 fff4 	bl	80064c0 <HAL_RCC_ClockConfig>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80034de:	f000 fa2f 	bl	8003940 <Error_Handler>
  }
}
 80034e2:	bf00      	nop
 80034e4:	3750      	adds	r7, #80	@ 0x50
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000

080034f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034fa:	463b      	mov	r3, r7
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003506:	4b21      	ldr	r3, [pc, #132]	@ (800358c <MX_ADC1_Init+0x98>)
 8003508:	4a21      	ldr	r2, [pc, #132]	@ (8003590 <MX_ADC1_Init+0x9c>)
 800350a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800350c:	4b1f      	ldr	r3, [pc, #124]	@ (800358c <MX_ADC1_Init+0x98>)
 800350e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003514:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <MX_ADC1_Init+0x98>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800351a:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <MX_ADC1_Init+0x98>)
 800351c:	2201      	movs	r2, #1
 800351e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003520:	4b1a      	ldr	r3, [pc, #104]	@ (800358c <MX_ADC1_Init+0x98>)
 8003522:	2201      	movs	r2, #1
 8003524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003526:	4b19      	ldr	r3, [pc, #100]	@ (800358c <MX_ADC1_Init+0x98>)
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800352e:	4b17      	ldr	r3, [pc, #92]	@ (800358c <MX_ADC1_Init+0x98>)
 8003530:	2200      	movs	r2, #0
 8003532:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003534:	4b15      	ldr	r3, [pc, #84]	@ (800358c <MX_ADC1_Init+0x98>)
 8003536:	4a17      	ldr	r2, [pc, #92]	@ (8003594 <MX_ADC1_Init+0xa0>)
 8003538:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800353a:	4b14      	ldr	r3, [pc, #80]	@ (800358c <MX_ADC1_Init+0x98>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003540:	4b12      	ldr	r3, [pc, #72]	@ (800358c <MX_ADC1_Init+0x98>)
 8003542:	2201      	movs	r2, #1
 8003544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <MX_ADC1_Init+0x98>)
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800354e:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <MX_ADC1_Init+0x98>)
 8003550:	2201      	movs	r2, #1
 8003552:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003554:	480d      	ldr	r0, [pc, #52]	@ (800358c <MX_ADC1_Init+0x98>)
 8003556:	f000 fd63 	bl	8004020 <HAL_ADC_Init>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003560:	f000 f9ee 	bl	8003940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003564:	2301      	movs	r3, #1
 8003566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800356c:	2305      	movs	r3, #5
 800356e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003570:	463b      	mov	r3, r7
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	@ (800358c <MX_ADC1_Init+0x98>)
 8003576:	f000 febb 	bl	80042f0 <HAL_ADC_ConfigChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003580:	f000 f9de 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20002500 	.word	0x20002500
 8003590:	40012000 	.word	0x40012000
 8003594:	0f000001 	.word	0x0f000001

08003598 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800359c:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <MX_CAN1_Init+0x64>)
 800359e:	4a18      	ldr	r2, [pc, #96]	@ (8003600 <MX_CAN1_Init+0x68>)
 80035a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 80035a2:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035a4:	2215      	movs	r2, #21
 80035a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80035ae:	4b13      	ldr	r3, [pc, #76]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035b6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80035ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80035bc:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035be:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80035c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80035c4:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80035ca:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80035d6:	4b09      	ldr	r3, [pc, #36]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035d8:	2200      	movs	r2, #0
 80035da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80035dc:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035de:	2200      	movs	r2, #0
 80035e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80035e2:	4b06      	ldr	r3, [pc, #24]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80035e8:	4804      	ldr	r0, [pc, #16]	@ (80035fc <MX_CAN1_Init+0x64>)
 80035ea:	f001 f921 	bl	8004830 <HAL_CAN_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80035f4:	f000 f9a4 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200025a8 	.word	0x200025a8
 8003600:	40006400 	.word	0x40006400

08003604 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003608:	4b17      	ldr	r3, [pc, #92]	@ (8003668 <MX_SPI1_Init+0x64>)
 800360a:	4a18      	ldr	r2, [pc, #96]	@ (800366c <MX_SPI1_Init+0x68>)
 800360c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800360e:	4b16      	ldr	r3, [pc, #88]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003610:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003614:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800361c:	4b12      	ldr	r3, [pc, #72]	@ (8003668 <MX_SPI1_Init+0x64>)
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003628:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <MX_SPI1_Init+0x64>)
 800362a:	2200      	movs	r2, #0
 800362c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800362e:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003634:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003636:	4b0c      	ldr	r3, [pc, #48]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003638:	2218      	movs	r2, #24
 800363a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800363c:	4b0a      	ldr	r3, [pc, #40]	@ (8003668 <MX_SPI1_Init+0x64>)
 800363e:	2200      	movs	r2, #0
 8003640:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003642:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003644:	2200      	movs	r2, #0
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003648:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <MX_SPI1_Init+0x64>)
 800364a:	2200      	movs	r2, #0
 800364c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003650:	220a      	movs	r2, #10
 8003652:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003654:	4804      	ldr	r0, [pc, #16]	@ (8003668 <MX_SPI1_Init+0x64>)
 8003656:	f003 f953 	bl	8006900 <HAL_SPI_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003660:	f000 f96e 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	200025d0 	.word	0x200025d0
 800366c:	40013000 	.word	0x40013000

08003670 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003676:	f107 0308 	add.w	r3, r7, #8
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003684:	463b      	mov	r3, r7
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800368c:	4b1e      	ldr	r3, [pc, #120]	@ (8003708 <MX_TIM2_Init+0x98>)
 800368e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003692:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8003694:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <MX_TIM2_Init+0x98>)
 8003696:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800369a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800369c:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <MX_TIM2_Init+0x98>)
 800369e:	2200      	movs	r2, #0
 80036a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80036a2:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <MX_TIM2_Init+0x98>)
 80036a4:	f240 128f 	movw	r2, #399	@ 0x18f
 80036a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036aa:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <MX_TIM2_Init+0x98>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036b0:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <MX_TIM2_Init+0x98>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036b6:	4814      	ldr	r0, [pc, #80]	@ (8003708 <MX_TIM2_Init+0x98>)
 80036b8:	f003 fd7a 	bl	80071b0 <HAL_TIM_Base_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036c2:	f000 f93d 	bl	8003940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036cc:	f107 0308 	add.w	r3, r7, #8
 80036d0:	4619      	mov	r1, r3
 80036d2:	480d      	ldr	r0, [pc, #52]	@ (8003708 <MX_TIM2_Init+0x98>)
 80036d4:	f003 ff1c 	bl	8007510 <HAL_TIM_ConfigClockSource>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80036de:	f000 f92f 	bl	8003940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036ea:	463b      	mov	r3, r7
 80036ec:	4619      	mov	r1, r3
 80036ee:	4806      	ldr	r0, [pc, #24]	@ (8003708 <MX_TIM2_Init+0x98>)
 80036f0:	f004 f944 	bl	800797c <HAL_TIMEx_MasterConfigSynchronization>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80036fa:	f000 f921 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20002628 	.word	0x20002628

0800370c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <MX_UART4_Init+0x4c>)
 8003712:	4a12      	ldr	r2, [pc, #72]	@ (800375c <MX_UART4_Init+0x50>)
 8003714:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003716:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <MX_UART4_Init+0x4c>)
 8003718:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800371c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800371e:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <MX_UART4_Init+0x4c>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003724:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <MX_UART4_Init+0x4c>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800372a:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <MX_UART4_Init+0x4c>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003730:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <MX_UART4_Init+0x4c>)
 8003732:	220c      	movs	r2, #12
 8003734:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003736:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <MX_UART4_Init+0x4c>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <MX_UART4_Init+0x4c>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003742:	4805      	ldr	r0, [pc, #20]	@ (8003758 <MX_UART4_Init+0x4c>)
 8003744:	f004 f9aa 	bl	8007a9c <HAL_UART_Init>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800374e:	f000 f8f7 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20002670 	.word	0x20002670
 800375c:	40004c00 	.word	0x40004c00

08003760 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003764:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <MX_UART5_Init+0x4c>)
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <MX_UART5_Init+0x50>)
 8003768:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <MX_UART5_Init+0x4c>)
 800376c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003770:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003772:	4b0e      	ldr	r3, [pc, #56]	@ (80037ac <MX_UART5_Init+0x4c>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <MX_UART5_Init+0x4c>)
 800377a:	2200      	movs	r2, #0
 800377c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800377e:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <MX_UART5_Init+0x4c>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003784:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <MX_UART5_Init+0x4c>)
 8003786:	220c      	movs	r2, #12
 8003788:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <MX_UART5_Init+0x4c>)
 800378c:	2200      	movs	r2, #0
 800378e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003790:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <MX_UART5_Init+0x4c>)
 8003792:	2200      	movs	r2, #0
 8003794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003796:	4805      	ldr	r0, [pc, #20]	@ (80037ac <MX_UART5_Init+0x4c>)
 8003798:	f004 f980 	bl	8007a9c <HAL_UART_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80037a2:	f000 f8cd 	bl	8003940 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200026b8 	.word	0x200026b8
 80037b0:	40005000 	.word	0x40005000

080037b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <MX_DMA_Init+0x3c>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	4a0b      	ldr	r2, [pc, #44]	@ (80037f0 <MX_DMA_Init+0x3c>)
 80037c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ca:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <MX_DMA_Init+0x3c>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	2038      	movs	r0, #56	@ 0x38
 80037dc:	f001 fe9b 	bl	8005516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037e0:	2038      	movs	r0, #56	@ 0x38
 80037e2:	f001 feb4 	bl	800554e <HAL_NVIC_EnableIRQ>

}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800

080037f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fa:	f107 031c 	add.w	r3, r7, #28
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	4b48      	ldr	r3, [pc, #288]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	4a47      	ldr	r2, [pc, #284]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6313      	str	r3, [r2, #48]	@ 0x30
 800381a:	4b45      	ldr	r3, [pc, #276]	@ (8003930 <MX_GPIO_Init+0x13c>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	4b41      	ldr	r3, [pc, #260]	@ (8003930 <MX_GPIO_Init+0x13c>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	4a40      	ldr	r2, [pc, #256]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003834:	6313      	str	r3, [r2, #48]	@ 0x30
 8003836:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	4b3a      	ldr	r3, [pc, #232]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	4a39      	ldr	r2, [pc, #228]	@ (8003930 <MX_GPIO_Init+0x13c>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6313      	str	r3, [r2, #48]	@ 0x30
 8003852:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003866:	4a32      	ldr	r2, [pc, #200]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003868:	f043 0310 	orr.w	r3, r3, #16
 800386c:	6313      	str	r3, [r2, #48]	@ 0x30
 800386e:	4b30      	ldr	r3, [pc, #192]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	4b2c      	ldr	r3, [pc, #176]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	4a2b      	ldr	r2, [pc, #172]	@ (8003930 <MX_GPIO_Init+0x13c>)
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	6313      	str	r3, [r2, #48]	@ 0x30
 800388a:	4b29      	ldr	r3, [pc, #164]	@ (8003930 <MX_GPIO_Init+0x13c>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	4b25      	ldr	r3, [pc, #148]	@ (8003930 <MX_GPIO_Init+0x13c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	4a24      	ldr	r2, [pc, #144]	@ (8003930 <MX_GPIO_Init+0x13c>)
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a6:	4b22      	ldr	r3, [pc, #136]	@ (8003930 <MX_GPIO_Init+0x13c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2102      	movs	r1, #2
 80038b6:	481f      	ldr	r0, [pc, #124]	@ (8003934 <MX_GPIO_Init+0x140>)
 80038b8:	f002 fb70 	bl	8005f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80038bc:	2200      	movs	r2, #0
 80038be:	2110      	movs	r1, #16
 80038c0:	481d      	ldr	r0, [pc, #116]	@ (8003938 <MX_GPIO_Init+0x144>)
 80038c2:	f002 fb6b 	bl	8005f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80038c6:	2200      	movs	r2, #0
 80038c8:	f44f 41d4 	mov.w	r1, #27136	@ 0x6a00
 80038cc:	481b      	ldr	r0, [pc, #108]	@ (800393c <MX_GPIO_Init+0x148>)
 80038ce:	f002 fb65 	bl	8005f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038d2:	2302      	movs	r3, #2
 80038d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d6:	2301      	movs	r3, #1
 80038d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038de:	2300      	movs	r3, #0
 80038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	4619      	mov	r1, r3
 80038e8:	4812      	ldr	r0, [pc, #72]	@ (8003934 <MX_GPIO_Init+0x140>)
 80038ea:	f002 f9bb 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038ee:	2310      	movs	r3, #16
 80038f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f2:	2301      	movs	r3, #1
 80038f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fe:	f107 031c 	add.w	r3, r7, #28
 8003902:	4619      	mov	r1, r3
 8003904:	480c      	ldr	r0, [pc, #48]	@ (8003938 <MX_GPIO_Init+0x144>)
 8003906:	f002 f9ad 	bl	8005c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800390a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 800390e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003910:	2301      	movs	r3, #1
 8003912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003918:	2300      	movs	r3, #0
 800391a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	4619      	mov	r1, r3
 8003922:	4806      	ldr	r0, [pc, #24]	@ (800393c <MX_GPIO_Init+0x148>)
 8003924:	f002 f99e 	bl	8005c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003928:	bf00      	nop
 800392a:	3730      	adds	r7, #48	@ 0x30
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	40020800 	.word	0x40020800
 8003938:	40020000 	.word	0x40020000
 800393c:	40021000 	.word	0x40021000

08003940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003944:	b672      	cpsid	i
}
 8003946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <Error_Handler+0x8>

0800394c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <HAL_MspInit+0x4c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	4a0f      	ldr	r2, [pc, #60]	@ (8003998 <HAL_MspInit+0x4c>)
 800395c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003960:	6453      	str	r3, [r2, #68]	@ 0x44
 8003962:	4b0d      	ldr	r3, [pc, #52]	@ (8003998 <HAL_MspInit+0x4c>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	603b      	str	r3, [r7, #0]
 8003972:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <HAL_MspInit+0x4c>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	4a08      	ldr	r2, [pc, #32]	@ (8003998 <HAL_MspInit+0x4c>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	@ 0x40
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_MspInit+0x4c>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a78 <HAL_ADC_MspInit+0xdc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d157      	bne.n	8003a6e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	4b2e      	ldr	r3, [pc, #184]	@ (8003a7c <HAL_ADC_MspInit+0xe0>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a7c <HAL_ADC_MspInit+0xe0>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ce:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_ADC_MspInit+0xe0>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b27      	ldr	r3, [pc, #156]	@ (8003a7c <HAL_ADC_MspInit+0xe0>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	4a26      	ldr	r2, [pc, #152]	@ (8003a7c <HAL_ADC_MspInit+0xe0>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ea:	4b24      	ldr	r3, [pc, #144]	@ (8003a7c <HAL_ADC_MspInit+0xe0>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039f6:	2302      	movs	r3, #2
 80039f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fa:	2303      	movs	r3, #3
 80039fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	481d      	ldr	r0, [pc, #116]	@ (8003a80 <HAL_ADC_MspInit+0xe4>)
 8003a0a:	f002 f92b 	bl	8005c64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a10:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <HAL_ADC_MspInit+0xec>)
 8003a12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a20:	4b18      	ldr	r3, [pc, #96]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a26:	4b17      	ldr	r3, [pc, #92]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a36:	4b13      	ldr	r3, [pc, #76]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a46:	4b0f      	ldr	r3, [pc, #60]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a52:	480c      	ldr	r0, [pc, #48]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a54:	f001 fd96 	bl	8005584 <HAL_DMA_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003a5e:	f7ff ff6f 	bl	8003940 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a07      	ldr	r2, [pc, #28]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a68:	4a06      	ldr	r2, [pc, #24]	@ (8003a84 <HAL_ADC_MspInit+0xe8>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003a6e:	bf00      	nop
 8003a70:	3728      	adds	r7, #40	@ 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40012000 	.word	0x40012000
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020000 	.word	0x40020000
 8003a84:	20002548 	.word	0x20002548
 8003a88:	40026410 	.word	0x40026410

08003a8c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	@ 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b20 <HAL_CAN_MspInit+0x94>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d134      	bne.n	8003b18 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b24 <HAL_CAN_MspInit+0x98>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b24 <HAL_CAN_MspInit+0x98>)
 8003ab8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003abe:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_CAN_MspInit+0x98>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <HAL_CAN_MspInit+0x98>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	4a14      	ldr	r2, [pc, #80]	@ (8003b24 <HAL_CAN_MspInit+0x98>)
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ada:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <HAL_CAN_MspInit+0x98>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ae6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003af8:	2309      	movs	r3, #9
 8003afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4619      	mov	r1, r3
 8003b02:	4809      	ldr	r0, [pc, #36]	@ (8003b28 <HAL_CAN_MspInit+0x9c>)
 8003b04:	f002 f8ae 	bl	8005c64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	2014      	movs	r0, #20
 8003b0e:	f001 fd02 	bl	8005516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003b12:	2014      	movs	r0, #20
 8003b14:	f001 fd1b 	bl	800554e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8003b18:	bf00      	nop
 8003b1a:	3728      	adds	r7, #40	@ 0x28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40006400 	.word	0x40006400
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40020400 	.word	0x40020400

08003b2c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	@ 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a19      	ldr	r2, [pc, #100]	@ (8003bb0 <HAL_SPI_MspInit+0x84>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d12b      	bne.n	8003ba6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b18      	ldr	r3, [pc, #96]	@ (8003bb4 <HAL_SPI_MspInit+0x88>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	4a17      	ldr	r2, [pc, #92]	@ (8003bb4 <HAL_SPI_MspInit+0x88>)
 8003b58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5e:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <HAL_SPI_MspInit+0x88>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b11      	ldr	r3, [pc, #68]	@ (8003bb4 <HAL_SPI_MspInit+0x88>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	4a10      	ldr	r2, [pc, #64]	@ (8003bb4 <HAL_SPI_MspInit+0x88>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb4 <HAL_SPI_MspInit+0x88>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b86:	23e0      	movs	r3, #224	@ 0xe0
 8003b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b92:	2303      	movs	r3, #3
 8003b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b96:	2305      	movs	r3, #5
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9a:	f107 0314 	add.w	r3, r7, #20
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	4805      	ldr	r0, [pc, #20]	@ (8003bb8 <HAL_SPI_MspInit+0x8c>)
 8003ba2:	f002 f85f 	bl	8005c64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003ba6:	bf00      	nop
 8003ba8:	3728      	adds	r7, #40	@ 0x28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40013000 	.word	0x40013000
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40020000 	.word	0x40020000

08003bbc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bcc:	d115      	bne.n	8003bfa <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_TIM_Base_MspInit+0x48>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8003c04 <HAL_TIM_Base_MspInit+0x48>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <HAL_TIM_Base_MspInit+0x48>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bea:	2200      	movs	r2, #0
 8003bec:	2100      	movs	r1, #0
 8003bee:	201c      	movs	r0, #28
 8003bf0:	f001 fc91 	bl	8005516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bf4:	201c      	movs	r0, #28
 8003bf6:	f001 fcaa 	bl	800554e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800

08003c08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	@ 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c10:	f107 031c 	add.w	r3, r7, #28
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a42      	ldr	r2, [pc, #264]	@ (8003d30 <HAL_UART_MspInit+0x128>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d12d      	bne.n	8003c86 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	4a40      	ldr	r2, [pc, #256]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	4a39      	ldr	r2, [pc, #228]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c56:	4b37      	ldr	r3, [pc, #220]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c70:	2303      	movs	r3, #3
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c74:	2308      	movs	r3, #8
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c78:	f107 031c 	add.w	r3, r7, #28
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	482e      	ldr	r0, [pc, #184]	@ (8003d38 <HAL_UART_MspInit+0x130>)
 8003c80:	f001 fff0 	bl	8005c64 <HAL_GPIO_Init>
    /* USER CODE BEGIN UART5_MspInit 1 */

    /* USER CODE END UART5_MspInit 1 */
  }

}
 8003c84:	e04f      	b.n	8003d26 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==UART5)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d3c <HAL_UART_MspInit+0x134>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d14a      	bne.n	8003d26 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003c9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca0:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	4b20      	ldr	r3, [pc, #128]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	4a18      	ldr	r2, [pc, #96]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003cd2:	f043 0308 	orr.w	r3, r3, #8
 8003cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <HAL_UART_MspInit+0x12c>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003ce4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	2302      	movs	r3, #2
 8003cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfa:	f107 031c 	add.w	r3, r7, #28
 8003cfe:	4619      	mov	r1, r3
 8003d00:	480d      	ldr	r0, [pc, #52]	@ (8003d38 <HAL_UART_MspInit+0x130>)
 8003d02:	f001 ffaf 	bl	8005c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d06:	2304      	movs	r3, #4
 8003d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d12:	2303      	movs	r3, #3
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d16:	2308      	movs	r3, #8
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d1a:	f107 031c 	add.w	r3, r7, #28
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4807      	ldr	r0, [pc, #28]	@ (8003d40 <HAL_UART_MspInit+0x138>)
 8003d22:	f001 ff9f 	bl	8005c64 <HAL_GPIO_Init>
}
 8003d26:	bf00      	nop
 8003d28:	3730      	adds	r7, #48	@ 0x30
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40004c00 	.word	0x40004c00
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40005000 	.word	0x40005000
 8003d40:	40020c00 	.word	0x40020c00

08003d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <NMI_Handler+0x4>

08003d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <HardFault_Handler+0x4>

08003d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d58:	bf00      	nop
 8003d5a:	e7fd      	b.n	8003d58 <MemManage_Handler+0x4>

08003d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <BusFault_Handler+0x4>

08003d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <UsageFault_Handler+0x4>

08003d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <SysTick_Handler+0x34>)
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <SysTick_Handler+0x18>
			Timer1--;
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <SysTick_Handler+0x34>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <SysTick_Handler+0x34>)
 8003dae:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <SysTick_Handler+0x38>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <SysTick_Handler+0x2c>
			Timer2--;
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <SysTick_Handler+0x38>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	4b03      	ldr	r3, [pc, #12]	@ (8003dd0 <SysTick_Handler+0x38>)
 8003dc2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dc4:	f000 f8e8 	bl	8003f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200000fc 	.word	0x200000fc
 8003dd0:	200000fe 	.word	0x200000fe

08003dd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003dd8:	4802      	ldr	r0, [pc, #8]	@ (8003de4 <CAN1_RX0_IRQHandler+0x10>)
 8003dda:	f001 f891 	bl	8004f00 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200025a8 	.word	0x200025a8

08003de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dec:	4802      	ldr	r0, [pc, #8]	@ (8003df8 <TIM2_IRQHandler+0x10>)
 8003dee:	f003 fa9f 	bl	8007330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20002628 	.word	0x20002628

08003dfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e00:	4802      	ldr	r0, [pc, #8]	@ (8003e0c <DMA2_Stream0_IRQHandler+0x10>)
 8003e02:	f001 fcc5 	bl	8005790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20002548 	.word	0x20002548

08003e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e18:	4a14      	ldr	r2, [pc, #80]	@ (8003e6c <_sbrk+0x5c>)
 8003e1a:	4b15      	ldr	r3, [pc, #84]	@ (8003e70 <_sbrk+0x60>)
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e24:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <_sbrk+0x64>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e2c:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <_sbrk+0x64>)
 8003e2e:	4a12      	ldr	r2, [pc, #72]	@ (8003e78 <_sbrk+0x68>)
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e32:	4b10      	ldr	r3, [pc, #64]	@ (8003e74 <_sbrk+0x64>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d207      	bcs.n	8003e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e40:	f007 fdaa 	bl	800b998 <__errno>
 8003e44:	4603      	mov	r3, r0
 8003e46:	220c      	movs	r2, #12
 8003e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	e009      	b.n	8003e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e50:	4b08      	ldr	r3, [pc, #32]	@ (8003e74 <_sbrk+0x64>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <_sbrk+0x64>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4a05      	ldr	r2, [pc, #20]	@ (8003e74 <_sbrk+0x64>)
 8003e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20020000 	.word	0x20020000
 8003e70:	00000400 	.word	0x00000400
 8003e74:	2000270c 	.word	0x2000270c
 8003e78:	20002a98 	.word	0x20002a98

08003e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <SystemInit+0x20>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e86:	4a05      	ldr	r2, [pc, #20]	@ (8003e9c <SystemInit+0x20>)
 8003e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ed8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ea4:	f7ff ffea 	bl	8003e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea8:	480c      	ldr	r0, [pc, #48]	@ (8003edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eaa:	490d      	ldr	r1, [pc, #52]	@ (8003ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003eac:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eb0:	e002      	b.n	8003eb8 <LoopCopyDataInit>

08003eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb6:	3304      	adds	r3, #4

08003eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ebc:	d3f9      	bcc.n	8003eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8003eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec4:	e001      	b.n	8003eca <LoopFillZerobss>

08003ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec8:	3204      	adds	r2, #4

08003eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ecc:	d3fb      	bcc.n	8003ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ece:	f007 fd69 	bl	800b9a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ed2:	f7fe f9ab 	bl	800222c <main>
  bx  lr    
 8003ed6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee0:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8003ee4:	0800c7c0 	.word	0x0800c7c0
  ldr r2, =_sbss
 8003ee8:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8003eec:	20002a98 	.word	0x20002a98

08003ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ef0:	e7fe      	b.n	8003ef0 <ADC_IRQHandler>
	...

08003ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <HAL_Init+0x40>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <HAL_Init+0x40>)
 8003efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_Init+0x40>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <HAL_Init+0x40>)
 8003f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <HAL_Init+0x40>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a07      	ldr	r2, [pc, #28]	@ (8003f34 <HAL_Init+0x40>)
 8003f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	f001 faef 	bl	8005500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f22:	200f      	movs	r0, #15
 8003f24:	f000 f808 	bl	8003f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f28:	f7ff fd10 	bl	800394c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023c00 	.word	0x40023c00

08003f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f40:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <HAL_InitTick+0x54>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <HAL_InitTick+0x58>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fb07 	bl	800556a <HAL_SYSTICK_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e00e      	b.n	8003f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d80a      	bhi.n	8003f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	f001 facf 	bl	8005516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f78:	4a06      	ldr	r2, [pc, #24]	@ (8003f94 <HAL_InitTick+0x5c>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000070 	.word	0x20000070
 8003f90:	20000078 	.word	0x20000078
 8003f94:	20000074 	.word	0x20000074

08003f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_IncTick+0x20>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <HAL_IncTick+0x24>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a04      	ldr	r2, [pc, #16]	@ (8003fbc <HAL_IncTick+0x24>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000078 	.word	0x20000078
 8003fbc:	20002710 	.word	0x20002710

08003fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	@ (8003fd4 <HAL_GetTick+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20002710 	.word	0x20002710

08003fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff ffee 	bl	8003fc0 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d005      	beq.n	8003ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <HAL_Delay+0x44>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ffe:	bf00      	nop
 8004000:	f7ff ffde 	bl	8003fc0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d8f7      	bhi.n	8004000 <HAL_Delay+0x28>
  {
  }
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000078 	.word	0x20000078

08004020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e033      	b.n	800409e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fcac 	bl	800399c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d118      	bne.n	8004090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004066:	f023 0302 	bic.w	r3, r3, #2
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa5e 	bl	8004534 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	@ 0x40
 800408e:	e001      	b.n	8004094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_Start_DMA+0x1e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0e9      	b.n	800429a <HAL_ADC_Start_DMA+0x1f2>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d018      	beq.n	800410e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040ec:	4b6d      	ldr	r3, [pc, #436]	@ (80042a4 <HAL_ADC_Start_DMA+0x1fc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6d      	ldr	r2, [pc, #436]	@ (80042a8 <HAL_ADC_Start_DMA+0x200>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	0c9a      	lsrs	r2, r3, #18
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004100:	e002      	b.n	8004108 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3b01      	subs	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f9      	bne.n	8004102 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411c:	d107      	bne.n	800412e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800412c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 80a1 	bne.w	8004280 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004146:	f023 0301 	bic.w	r3, r3, #1
 800414a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004168:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417c:	d106      	bne.n	800418c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	f023 0206 	bic.w	r2, r3, #6
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44
 800418a:	e002      	b.n	8004192 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800419a:	4b44      	ldr	r3, [pc, #272]	@ (80042ac <HAL_ADC_Start_DMA+0x204>)
 800419c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a2:	4a43      	ldr	r2, [pc, #268]	@ (80042b0 <HAL_ADC_Start_DMA+0x208>)
 80041a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	4a42      	ldr	r2, [pc, #264]	@ (80042b4 <HAL_ADC_Start_DMA+0x20c>)
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b2:	4a41      	ldr	r2, [pc, #260]	@ (80042b8 <HAL_ADC_Start_DMA+0x210>)
 80041b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80041be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80041ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	334c      	adds	r3, #76	@ 0x4c
 80041ea:	4619      	mov	r1, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f001 fa76 	bl	80056e0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d12a      	bne.n	8004256 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2d      	ldr	r2, [pc, #180]	@ (80042bc <HAL_ADC_Start_DMA+0x214>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d015      	beq.n	8004236 <HAL_ADC_Start_DMA+0x18e>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2c      	ldr	r2, [pc, #176]	@ (80042c0 <HAL_ADC_Start_DMA+0x218>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d105      	bne.n	8004220 <HAL_ADC_Start_DMA+0x178>
 8004214:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <HAL_ADC_Start_DMA+0x204>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <HAL_ADC_Start_DMA+0x21c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d136      	bne.n	8004298 <HAL_ADC_Start_DMA+0x1f0>
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <HAL_ADC_Start_DMA+0x204>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	d130      	bne.n	8004298 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d129      	bne.n	8004298 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	e020      	b.n	8004298 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a18      	ldr	r2, [pc, #96]	@ (80042bc <HAL_ADC_Start_DMA+0x214>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d11b      	bne.n	8004298 <HAL_ADC_Start_DMA+0x1f0>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d114      	bne.n	8004298 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	e00b      	b.n	8004298 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0210 	orr.w	r2, r3, #16
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000070 	.word	0x20000070
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	40012300 	.word	0x40012300
 80042b0:	0800472d 	.word	0x0800472d
 80042b4:	080047e7 	.word	0x080047e7
 80042b8:	08004803 	.word	0x08004803
 80042bc:	40012000 	.word	0x40012000
 80042c0:	40012100 	.word	0x40012100
 80042c4:	40012200 	.word	0x40012200

080042c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_ADC_ConfigChannel+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e105      	b.n	8004518 <HAL_ADC_ConfigChannel+0x228>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b09      	cmp	r3, #9
 800431a:	d925      	bls.n	8004368 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68d9      	ldr	r1, [r3, #12]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	3b1e      	subs	r3, #30
 8004332:	2207      	movs	r2, #7
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43da      	mvns	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	400a      	ands	r2, r1
 8004340:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68d9      	ldr	r1, [r3, #12]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	4618      	mov	r0, r3
 8004354:	4603      	mov	r3, r0
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4403      	add	r3, r0
 800435a:	3b1e      	subs	r3, #30
 800435c:	409a      	lsls	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	e022      	b.n	80043ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6919      	ldr	r1, [r3, #16]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	4613      	mov	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4413      	add	r3, r2
 800437c:	2207      	movs	r2, #7
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43da      	mvns	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	400a      	ands	r2, r1
 800438a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6919      	ldr	r1, [r3, #16]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	4618      	mov	r0, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4403      	add	r3, r0
 80043a4:	409a      	lsls	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d824      	bhi.n	8004400 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	3b05      	subs	r3, #5
 80043c8:	221f      	movs	r2, #31
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43da      	mvns	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	400a      	ands	r2, r1
 80043d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	4618      	mov	r0, r3
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	3b05      	subs	r3, #5
 80043f2:	fa00 f203 	lsl.w	r2, r0, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80043fe:	e04c      	b.n	800449a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b0c      	cmp	r3, #12
 8004406:	d824      	bhi.n	8004452 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	3b23      	subs	r3, #35	@ 0x23
 800441a:	221f      	movs	r2, #31
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43da      	mvns	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	400a      	ands	r2, r1
 8004428:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	4618      	mov	r0, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	3b23      	subs	r3, #35	@ 0x23
 8004444:	fa00 f203 	lsl.w	r2, r0, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004450:	e023      	b.n	800449a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	3b41      	subs	r3, #65	@ 0x41
 8004464:	221f      	movs	r2, #31
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43da      	mvns	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	400a      	ands	r2, r1
 8004472:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	4618      	mov	r0, r3
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	3b41      	subs	r3, #65	@ 0x41
 800448e:	fa00 f203 	lsl.w	r2, r0, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800449a:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <HAL_ADC_ConfigChannel+0x234>)
 800449c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a21      	ldr	r2, [pc, #132]	@ (8004528 <HAL_ADC_ConfigChannel+0x238>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d109      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x1cc>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b12      	cmp	r3, #18
 80044ae:	d105      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a19      	ldr	r2, [pc, #100]	@ (8004528 <HAL_ADC_ConfigChannel+0x238>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d123      	bne.n	800450e <HAL_ADC_ConfigChannel+0x21e>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d003      	beq.n	80044d6 <HAL_ADC_ConfigChannel+0x1e6>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b11      	cmp	r3, #17
 80044d4:	d11b      	bne.n	800450e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d111      	bne.n	800450e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <HAL_ADC_ConfigChannel+0x23c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a10      	ldr	r2, [pc, #64]	@ (8004530 <HAL_ADC_ConfigChannel+0x240>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	0c9a      	lsrs	r2, r3, #18
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004500:	e002      	b.n	8004508 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3b01      	subs	r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f9      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40012300 	.word	0x40012300
 8004528:	40012000 	.word	0x40012000
 800452c:	20000070 	.word	0x20000070
 8004530:	431bde83 	.word	0x431bde83

08004534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800453c:	4b79      	ldr	r3, [pc, #484]	@ (8004724 <ADC_Init+0x1f0>)
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	431a      	orrs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6859      	ldr	r1, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	021a      	lsls	r2, r3, #8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800458c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6899      	ldr	r1, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c6:	4a58      	ldr	r2, [pc, #352]	@ (8004728 <ADC_Init+0x1f4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d022      	beq.n	8004612 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6899      	ldr	r1, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80045fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6899      	ldr	r1, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	e00f      	b.n	8004632 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004630:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0202 	bic.w	r2, r2, #2
 8004640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6899      	ldr	r1, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7e1b      	ldrb	r3, [r3, #24]
 800464c:	005a      	lsls	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01b      	beq.n	8004698 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800466e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800467e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6859      	ldr	r1, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	3b01      	subs	r3, #1
 800468c:	035a      	lsls	r2, r3, #13
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	e007      	b.n	80046a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	051a      	lsls	r2, r3, #20
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80046dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6899      	ldr	r1, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046ea:	025a      	lsls	r2, r3, #9
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6899      	ldr	r1, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	029a      	lsls	r2, r3, #10
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40012300 	.word	0x40012300
 8004728:	0f000001 	.word	0x0f000001

0800472c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004738:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004742:	2b00      	cmp	r3, #0
 8004744:	d13c      	bne.n	80047c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d12b      	bne.n	80047b8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004764:	2b00      	cmp	r3, #0
 8004766:	d127      	bne.n	80047b8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004780:	2b00      	cmp	r3, #0
 8004782:	d119      	bne.n	80047b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0220 	bic.w	r2, r2, #32
 8004792:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b0:	f043 0201 	orr.w	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7fc fec7 	bl	800154c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047be:	e00e      	b.n	80047de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fd85 	bl	80042dc <HAL_ADC_ErrorCallback>
}
 80047d2:	e004      	b.n	80047de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff fd67 	bl	80042c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2240      	movs	r2, #64	@ 0x40
 8004814:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	f043 0204 	orr.w	r2, r3, #4
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff fd5a 	bl	80042dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0ed      	b.n	8004a1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff f91c 	bl	8003a8c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004864:	f7ff fbac 	bl	8003fc0 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800486a:	e012      	b.n	8004892 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800486c:	f7ff fba8 	bl	8003fc0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b0a      	cmp	r3, #10
 8004878:	d90b      	bls.n	8004892 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2205      	movs	r2, #5
 800488a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0c5      	b.n	8004a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0e5      	beq.n	800486c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0202 	bic.w	r2, r2, #2
 80048ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048b0:	f7ff fb86 	bl	8003fc0 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80048b6:	e012      	b.n	80048de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80048b8:	f7ff fb82 	bl	8003fc0 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b0a      	cmp	r3, #10
 80048c4:	d90b      	bls.n	80048de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2205      	movs	r2, #5
 80048d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e09f      	b.n	8004a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	7e1b      	ldrb	r3, [r3, #24]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d108      	bne.n	8004906 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e007      	b.n	8004916 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7e5b      	ldrb	r3, [r3, #25]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d108      	bne.n	8004930 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e007      	b.n	8004940 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800493e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	7e9b      	ldrb	r3, [r3, #26]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d108      	bne.n	800495a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0220 	orr.w	r2, r2, #32
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e007      	b.n	800496a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0220 	bic.w	r2, r2, #32
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7edb      	ldrb	r3, [r3, #27]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d108      	bne.n	8004984 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0210 	bic.w	r2, r2, #16
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e007      	b.n	8004994 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0210 	orr.w	r2, r2, #16
 8004992:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7f1b      	ldrb	r3, [r3, #28]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d108      	bne.n	80049ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0208 	orr.w	r2, r2, #8
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e007      	b.n	80049be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7f5b      	ldrb	r3, [r3, #29]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d108      	bne.n	80049d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0204 	orr.w	r2, r2, #4
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e007      	b.n	80049e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	ea42 0103 	orr.w	r1, r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	1e5a      	subs	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d003      	beq.n	8004a4e <HAL_CAN_ConfigFilter+0x26>
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f040 80be 	bne.w	8004bca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
 8004a4e:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004a50:	617b      	str	r3, [r7, #20]
    can_ip = hcan->Instance;

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a68:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Select the start filter number of CAN2 slave instance */
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2201      	movs	r2, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	60fb      	str	r3, [r7, #12]
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);

 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);

 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d123      	bne.n	8004af8 <HAL_CAN_ConfigFilter+0xd0>
    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
    {
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	401a      	ands	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	0419      	lsls	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	b29b      	uxth	r3, r3
      /* First 16-bit identifier and First 16-bit mask */
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	6952      	ldr	r2, [r2, #20]
      /* Or First 16-bit identifier and Second 16-bit identifier */
 8004ad2:	4319      	orrs	r1, r3
      /* First 16-bit identifier and First 16-bit mask */
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3248      	adds	r2, #72	@ 0x48
 8004ad8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	0419      	lsls	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b29a      	uxth	r2, r3
      /* Second 16-bit identifier and Second 16-bit mask */
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 8004aec:	430a      	orrs	r2, r1
      /* Second 16-bit identifier and Second 16-bit mask */
 8004aee:	6979      	ldr	r1, [r7, #20]
 8004af0:	3348      	adds	r3, #72	@ 0x48
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	440b      	add	r3, r1
 8004af6:	605a      	str	r2, [r3, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
    }
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d122      	bne.n	8004b46 <HAL_CAN_ConfigFilter+0x11e>

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
    {
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);

      /* 32-bit identifier or First 32-bit identifier */
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0419      	lsls	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b29b      	uxth	r3, r3

 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	6952      	ldr	r2, [r2, #20]
      /* 32-bit identifier or First 32-bit identifier */
 8004b20:	4319      	orrs	r1, r3

 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	3248      	adds	r2, #72	@ 0x48
 8004b26:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0419      	lsls	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	b29a      	uxth	r2, r3

 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
      /* 32-bit mask or Second 32-bit identifier */
 8004b3a:	430a      	orrs	r2, r1

 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	3348      	adds	r3, #72	@ 0x48
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	605a      	str	r2, [r3, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_CAN_ConfigFilter+0x13a>
    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
    {
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	401a      	ands	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004b60:	e007      	b.n	8004b72 <HAL_CAN_ConfigFilter+0x14a>
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
    }

 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <HAL_CAN_ConfigFilter+0x166>
    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
    {
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	43db      	mvns	r3, r3
 8004b84:	401a      	ands	r2, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004b8c:	e007      	b.n	8004b9e <HAL_CAN_ConfigFilter+0x176>
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
    }
    else
    {
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d107      	bne.n	8004bb6 <HAL_CAN_ConfigFilter+0x18e>
    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
    }

 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004bbc:	f023 0201 	bic.w	r2, r3, #1
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e006      	b.n	8004bd8 <HAL_CAN_ConfigFilter+0x1b0>
    /* Return function status */
    return HAL_OK;
  }
  else
  {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004bd6:	2301      	movs	r3, #1

    return HAL_ERROR;
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40006400 	.word	0x40006400

08004be8 <HAL_CAN_Start>:
/**
  * @brief  Start the CAN module.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d12e      	bne.n	8004c5a <HAL_CAN_Start+0x72>

  if (hcan->State == HAL_CAN_STATE_READY)
  {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2020 	strb.w	r2, [r3, #32]
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0201 	bic.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);

 8004c14:	f7ff f9d4 	bl	8003fc0 <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]
    /* Get tick */
    tickstart = HAL_GetTick();

 8004c1a:	e012      	b.n	8004c42 <HAL_CAN_Start+0x5a>
    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
    {
 8004c1c:	f7ff f9d0 	bl	8003fc0 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b0a      	cmp	r3, #10
 8004c28:	d90b      	bls.n	8004c42 <HAL_CAN_Start+0x5a>
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
      {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;

 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2205      	movs	r2, #5
 8004c3a:	f883 2020 	strb.w	r2, [r3, #32]
        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e012      	b.n	8004c68 <HAL_CAN_Start+0x80>

 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <HAL_CAN_Start+0x34>

        return HAL_ERROR;
      }
    }

 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

 8004c56:	2300      	movs	r3, #0
 8004c58:	e006      	b.n	8004c68 <HAL_CAN_Start+0x80>
    /* Return function status */
    return HAL_OK;
  }
  else
  {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004c66:	2301      	movs	r3, #1

    return HAL_ERROR;
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_CAN_GetRxMessage>:
  * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c84:	75fb      	strb	r3, [r7, #23]
{
  HAL_CAN_StateTypeDef state = hcan->State;

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d003      	beq.n	8004c94 <HAL_CAN_GetRxMessage+0x24>
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	f040 8103 	bne.w	8004e9a <HAL_CAN_GetRxMessage+0x22a>

  if ((state == HAL_CAN_STATE_READY) ||
      (state == HAL_CAN_STATE_LISTENING))
  {
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10e      	bne.n	8004cb8 <HAL_CAN_GetRxMessage+0x48>
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d116      	bne.n	8004cd6 <HAL_CAN_GetRxMessage+0x66>
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
      {
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0f7      	b.n	8004ea8 <HAL_CAN_GetRxMessage+0x238>

        return HAL_ERROR;
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d107      	bne.n	8004cd6 <HAL_CAN_GetRxMessage+0x66>
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0e8      	b.n	8004ea8 <HAL_CAN_GetRxMessage+0x238>

        return HAL_ERROR;
      }
    }

 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	331b      	adds	r3, #27
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	4413      	add	r3, r2
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0204 	and.w	r2, r3, #4
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	609a      	str	r2, [r3, #8]
    /* Get the header */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10c      	bne.n	8004d0e <HAL_CAN_GetRxMessage+0x9e>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
    if (pHeader->IDE == CAN_ID_STD)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	331b      	adds	r3, #27
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	4413      	add	r3, r2
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	0d5b      	lsrs	r3, r3, #21
 8004d04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e00b      	b.n	8004d26 <HAL_CAN_GetRxMessage+0xb6>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
    }
    else
    {
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	331b      	adds	r3, #27
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	4413      	add	r3, r2
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	08db      	lsrs	r3, r3, #3
 8004d1e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
    else
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	605a      	str	r2, [r3, #4]
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	331b      	adds	r3, #27
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	4413      	add	r3, r2
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0202 	and.w	r2, r3, #2
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
    }
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	331b      	adds	r3, #27
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	4413      	add	r3, r2
 8004d48:	3304      	adds	r3, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_CAN_GetRxMessage+0xec>
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
    {
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2208      	movs	r2, #8
 8004d58:	611a      	str	r2, [r3, #16]
 8004d5a:	e00b      	b.n	8004d74 <HAL_CAN_GetRxMessage+0x104>
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
    }
    else
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	331b      	adds	r3, #27
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	4413      	add	r3, r2
 8004d68:	3304      	adds	r3, #4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	611a      	str	r2, [r3, #16]
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	331b      	adds	r3, #27
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	4413      	add	r3, r2
 8004d80:	3304      	adds	r3, #4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	619a      	str	r2, [r3, #24]
    }
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	331b      	adds	r3, #27
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	615a      	str	r2, [r3, #20]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;

 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	701a      	strb	r2, [r3, #0]
    /* Get the data */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	0a1a      	lsrs	r2, r3, #8
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0c1a      	lsrs	r2, r3, #16
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	3302      	adds	r3, #2
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	0e1a      	lsrs	r2, r3, #24
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	3303      	adds	r3, #3
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0a1a      	lsrs	r2, r3, #8
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	3305      	adds	r3, #5
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	0c1a      	lsrs	r2, r3, #16
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	3306      	adds	r3, #6
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	0e1a      	lsrs	r2, r3, #24
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	3307      	adds	r3, #7
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);

 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d108      	bne.n	8004e86 <HAL_CAN_GetRxMessage+0x216>
    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0220 	orr.w	r2, r2, #32
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	e007      	b.n	8004e96 <HAL_CAN_GetRxMessage+0x226>
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0220 	orr.w	r2, r2, #32
 8004e94:	611a      	str	r2, [r3, #16]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

 8004e96:	2300      	movs	r3, #0
 8004e98:	e006      	b.n	8004ea8 <HAL_CAN_GetRxMessage+0x238>
    /* Return function status */
    return HAL_OK;
  }
  else
  {
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ea6:	2301      	movs	r3, #1

    return HAL_ERROR;
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_CAN_ActivateNotification>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec4:	73fb      	strb	r3, [r7, #15]
{
  HAL_CAN_StateTypeDef state = hcan->State;

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d002      	beq.n	8004ed2 <HAL_CAN_ActivateNotification+0x1e>
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d109      	bne.n	8004ee6 <HAL_CAN_ActivateNotification+0x32>

  if ((state == HAL_CAN_STATE_READY) ||
      (state == HAL_CAN_STATE_LISTENING))
  {
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6959      	ldr	r1, [r3, #20]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	615a      	str	r2, [r3, #20]
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);

 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e006      	b.n	8004ef4 <HAL_CAN_ActivateNotification+0x40>
    /* Return function status */
    return HAL_OK;
  }
  else
  {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ef2:	2301      	movs	r3, #1

    return HAL_ERROR;
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_CAN_IRQHandler>:
/**
  * @brief  Handles CAN interrupt request
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	@ 0x28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
{
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	623b      	str	r3, [r7, #32]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61fb      	str	r3, [r7, #28]
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	617b      	str	r3, [r7, #20]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	613b      	str	r3, [r7, #16]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	60fb      	str	r3, [r7, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d07c      	beq.n	8005040 <HAL_CAN_IRQHandler+0x140>
  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
  {
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x98>
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
    {
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2201      	movs	r2, #1
 8004f56:	609a      	str	r2, [r3, #8]
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_CAN_IRQHandler+0x6a>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f983 	bl	800526e <HAL_CAN_TxMailbox0CompleteCallback>
 8004f68:	e016      	b.n	8004f98 <HAL_CAN_IRQHandler+0x98>
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <HAL_CAN_IRQHandler+0x7e>
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
        {
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f7c:	e00c      	b.n	8004f98 <HAL_CAN_IRQHandler+0x98>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <HAL_CAN_IRQHandler+0x92>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
        {
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f90:	e002      	b.n	8004f98 <HAL_CAN_IRQHandler+0x98>
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f989 	bl	80052aa <HAL_CAN_TxMailbox0AbortCallback>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
        }
      }
    }

 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d024      	beq.n	8004fec <HAL_CAN_IRQHandler+0xec>
    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
    {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004faa:	609a      	str	r2, [r3, #8]
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_CAN_IRQHandler+0xbe>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f963 	bl	8005282 <HAL_CAN_TxMailbox1CompleteCallback>
 8004fbc:	e016      	b.n	8004fec <HAL_CAN_IRQHandler+0xec>
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <HAL_CAN_IRQHandler+0xd2>
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
        {
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd0:	e00c      	b.n	8004fec <HAL_CAN_IRQHandler+0xec>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <HAL_CAN_IRQHandler+0xe6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
        {
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe4:	e002      	b.n	8004fec <HAL_CAN_IRQHandler+0xec>
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f969 	bl	80052be <HAL_CAN_TxMailbox1AbortCallback>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
        }
      }
    }

 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d024      	beq.n	8005040 <HAL_CAN_IRQHandler+0x140>
    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
    {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ffe:	609a      	str	r2, [r3, #8]
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_CAN_IRQHandler+0x112>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f943 	bl	8005296 <HAL_CAN_TxMailbox2CompleteCallback>
 8005010:	e016      	b.n	8005040 <HAL_CAN_IRQHandler+0x140>
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d004      	beq.n	8005026 <HAL_CAN_IRQHandler+0x126>
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
        {
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005022:	627b      	str	r3, [r7, #36]	@ 0x24
 8005024:	e00c      	b.n	8005040 <HAL_CAN_IRQHandler+0x140>
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HAL_CAN_IRQHandler+0x13a>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
        {
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
 8005038:	e002      	b.n	8005040 <HAL_CAN_IRQHandler+0x140>
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f949 	bl	80052d2 <HAL_CAN_TxMailbox2AbortCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
        }
      }
    }
  }

 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00c      	beq.n	8005064 <HAL_CAN_IRQHandler+0x164>
  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
    {
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2210      	movs	r2, #16
 8005062:	60da      	str	r2, [r3, #12]
      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_CAN_IRQHandler+0x186>
  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d006      	beq.n	8005086 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
    {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2208      	movs	r2, #8
 800507e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f930 	bl	80052e6 <HAL_CAN_RxFifo0FullCallback>
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_CAN_IRQHandler+0x1a4>
  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
  {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_CAN_IRQHandler+0x1a4>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc fc0c 	bl	80018bc <HAL_CAN_RxFifo0MsgPendingCallback>
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00c      	beq.n	80050c8 <HAL_CAN_IRQHandler+0x1c8>
  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
    {
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2210      	movs	r2, #16
 80050c6:	611a      	str	r2, [r3, #16]
      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00b      	beq.n	80050ea <HAL_CAN_IRQHandler+0x1ea>
  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d006      	beq.n	80050ea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
    {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2208      	movs	r2, #8
 80050e2:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f912 	bl	800530e <HAL_CAN_RxFifo1FullCallback>
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <HAL_CAN_IRQHandler+0x208>
  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
  {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_CAN_IRQHandler+0x208>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8f9 	bl	80052fa <HAL_CAN_RxFifo1MsgPendingCallback>
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_CAN_IRQHandler+0x22a>
  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
    {
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2210      	movs	r2, #16
 8005122:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8fc 	bl	8005322 <HAL_CAN_SleepCallback>
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00b      	beq.n	800514c <HAL_CAN_IRQHandler+0x24c>
  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d006      	beq.n	800514c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
    {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2208      	movs	r2, #8
 8005144:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8f5 	bl	8005336 <HAL_CAN_WakeUpFromRxMsgCallback>
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d07b      	beq.n	800524e <HAL_CAN_IRQHandler+0x34e>
  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d072      	beq.n	8005246 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
    {
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_CAN_IRQHandler+0x27c>
      /* Check Error Warning Flag */
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0301 	and.w	r3, r3, #1
    {
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_CAN_IRQHandler+0x27c>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;

        /* No need for clear of Error Warning Flag as read-only */
      }

 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <HAL_CAN_IRQHandler+0x298>
      /* Check Error Passive Flag */
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f003 0302 	and.w	r3, r3, #2

 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_CAN_IRQHandler+0x298>
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	f043 0302 	orr.w	r3, r3, #2
 8005196:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;

        /* No need for clear of Error Passive Flag as read-only */
      }

 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_CAN_IRQHandler+0x2b4>
      /* Check Bus-off Flag */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0304 	and.w	r3, r3, #4

 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_CAN_IRQHandler+0x2b4>
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	f043 0304 	orr.w	r3, r3, #4
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;

        /* No need for clear of Error Bus-Off as read-only */
      }

 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d043      	beq.n	8005246 <HAL_CAN_IRQHandler+0x346>
      /* Check Last Error Code Flag */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70

 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d03e      	beq.n	8005246 <HAL_CAN_IRQHandler+0x346>
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
          ((esrflags & CAN_ESR_LEC) != 0U))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ce:	2b60      	cmp	r3, #96	@ 0x60
 80051d0:	d02b      	beq.n	800522a <HAL_CAN_IRQHandler+0x32a>
 80051d2:	2b60      	cmp	r3, #96	@ 0x60
 80051d4:	d82e      	bhi.n	8005234 <HAL_CAN_IRQHandler+0x334>
 80051d6:	2b50      	cmp	r3, #80	@ 0x50
 80051d8:	d022      	beq.n	8005220 <HAL_CAN_IRQHandler+0x320>
 80051da:	2b50      	cmp	r3, #80	@ 0x50
 80051dc:	d82a      	bhi.n	8005234 <HAL_CAN_IRQHandler+0x334>
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	d019      	beq.n	8005216 <HAL_CAN_IRQHandler+0x316>
 80051e2:	2b40      	cmp	r3, #64	@ 0x40
 80051e4:	d826      	bhi.n	8005234 <HAL_CAN_IRQHandler+0x334>
 80051e6:	2b30      	cmp	r3, #48	@ 0x30
 80051e8:	d010      	beq.n	800520c <HAL_CAN_IRQHandler+0x30c>
 80051ea:	2b30      	cmp	r3, #48	@ 0x30
 80051ec:	d822      	bhi.n	8005234 <HAL_CAN_IRQHandler+0x334>
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d002      	beq.n	80051f8 <HAL_CAN_IRQHandler+0x2f8>
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d005      	beq.n	8005202 <HAL_CAN_IRQHandler+0x302>
            errorcode |= HAL_CAN_ERROR_BD;
            break;
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
 80051f6:	e01d      	b.n	8005234 <HAL_CAN_IRQHandler+0x334>
          case (CAN_ESR_LEC_0):
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	f043 0308 	orr.w	r3, r3, #8
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Set CAN error code to Stuff error */
 8005200:	e019      	b.n	8005236 <HAL_CAN_IRQHandler+0x336>
          case (CAN_ESR_LEC_1):
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	f043 0310 	orr.w	r3, r3, #16
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Set CAN error code to Form error */
 800520a:	e014      	b.n	8005236 <HAL_CAN_IRQHandler+0x336>
          case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	f043 0320 	orr.w	r3, r3, #32
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Set CAN error code to Acknowledgement error */
 8005214:	e00f      	b.n	8005236 <HAL_CAN_IRQHandler+0x336>
          case (CAN_ESR_LEC_2):
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Set CAN error code to Bit recessive error */
 800521e:	e00a      	b.n	8005236 <HAL_CAN_IRQHandler+0x336>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 8005220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Set CAN error code to Bit Dominant error */
 8005228:	e005      	b.n	8005236 <HAL_CAN_IRQHandler+0x336>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Set CAN error code to CRC error */
 8005232:	e000      	b.n	8005236 <HAL_CAN_IRQHandler+0x336>
            break;
 8005234:	bf00      	nop
          default:
            break;
        }

 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005244:	619a      	str	r2, [r3, #24]
        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
      }
    }

 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2204      	movs	r2, #4
 800524c:	605a      	str	r2, [r3, #4]
    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
  }

 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_CAN_IRQHandler+0x366>
  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
  {
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f872 	bl	800534a <HAL_CAN_ErrorCallback>
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 8005266:	bf00      	nop
 8005268:	3728      	adds	r7, #40	@ 0x28
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_CAN_TxMailbox0CompleteCallback>:
/**
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_CAN_TxMailbox1CompleteCallback>:
/**
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_CAN_TxMailbox2CompleteCallback>:
/**
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_CAN_TxMailbox0AbortCallback>:
/**
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_CAN_TxMailbox1AbortCallback>:
/**
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_CAN_TxMailbox2AbortCallback>:
/**
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_CAN_RxFifo0FullCallback>:
/**
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <HAL_CAN_RxFifo1MsgPendingCallback>:
/**
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <HAL_CAN_RxFifo1FullCallback>:
/**
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HAL_CAN_SleepCallback>:
/**
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_CAN_WakeUpFromRxMsgCallback>:
/**
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <HAL_CAN_ErrorCallback>:
/**
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005370:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800537c:	4013      	ands	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800538c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005392:	4a04      	ldr	r2, [pc, #16]	@ (80053a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	60d3      	str	r3, [r2, #12]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	e000ed00 	.word	0xe000ed00

080053a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053ac:	4b04      	ldr	r3, [pc, #16]	@ (80053c0 <__NVIC_GetPriorityGrouping+0x18>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	f003 0307 	and.w	r3, r3, #7
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	db0b      	blt.n	80053ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	f003 021f 	and.w	r2, r3, #31
 80053dc:	4907      	ldr	r1, [pc, #28]	@ (80053fc <__NVIC_EnableIRQ+0x38>)
 80053de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	2001      	movs	r0, #1
 80053e6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000e100 	.word	0xe000e100

08005400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	6039      	str	r1, [r7, #0]
 800540a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800540c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005410:	2b00      	cmp	r3, #0
 8005412:	db0a      	blt.n	800542a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	490c      	ldr	r1, [pc, #48]	@ (800544c <__NVIC_SetPriority+0x4c>)
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	0112      	lsls	r2, r2, #4
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	440b      	add	r3, r1
 8005424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005428:	e00a      	b.n	8005440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4908      	ldr	r1, [pc, #32]	@ (8005450 <__NVIC_SetPriority+0x50>)
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	3b04      	subs	r3, #4
 8005438:	0112      	lsls	r2, r2, #4
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	440b      	add	r3, r1
 800543e:	761a      	strb	r2, [r3, #24]
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	e000e100 	.word	0xe000e100
 8005450:	e000ed00 	.word	0xe000ed00

08005454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	@ 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	f1c3 0307 	rsb	r3, r3, #7
 800546e:	2b04      	cmp	r3, #4
 8005470:	bf28      	it	cs
 8005472:	2304      	movcs	r3, #4
 8005474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3304      	adds	r3, #4
 800547a:	2b06      	cmp	r3, #6
 800547c:	d902      	bls.n	8005484 <NVIC_EncodePriority+0x30>
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	3b03      	subs	r3, #3
 8005482:	e000      	b.n	8005486 <NVIC_EncodePriority+0x32>
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005488:	f04f 32ff 	mov.w	r2, #4294967295
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43da      	mvns	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	401a      	ands	r2, r3
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800549c:	f04f 31ff 	mov.w	r1, #4294967295
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	43d9      	mvns	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054ac:	4313      	orrs	r3, r2
         );
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3724      	adds	r7, #36	@ 0x24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054cc:	d301      	bcc.n	80054d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054ce:	2301      	movs	r3, #1
 80054d0:	e00f      	b.n	80054f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054d2:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <SysTick_Config+0x40>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054da:	210f      	movs	r1, #15
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	f7ff ff8e 	bl	8005400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <SysTick_Config+0x40>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ea:	4b04      	ldr	r3, [pc, #16]	@ (80054fc <SysTick_Config+0x40>)
 80054ec:	2207      	movs	r2, #7
 80054ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	e000e010 	.word	0xe000e010

08005500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff29 	bl	8005360 <__NVIC_SetPriorityGrouping>
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	4603      	mov	r3, r0
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005524:	2300      	movs	r3, #0
 8005526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005528:	f7ff ff3e 	bl	80053a8 <__NVIC_GetPriorityGrouping>
 800552c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f7ff ff8e 	bl	8005454 <NVIC_EncodePriority>
 8005538:	4602      	mov	r2, r0
 800553a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff ff5d 	bl	8005400 <__NVIC_SetPriority>
}
 8005546:	bf00      	nop
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	4603      	mov	r3, r0
 8005556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ff31 	bl	80053c4 <__NVIC_EnableIRQ>
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ffa2 	bl	80054bc <SysTick_Config>
 8005578:	4603      	mov	r3, r0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005590:	f7fe fd16 	bl	8003fc0 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e099      	b.n	80056d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c0:	e00f      	b.n	80055e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055c2:	f7fe fcfd 	bl	8003fc0 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d908      	bls.n	80055e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2203      	movs	r2, #3
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e078      	b.n	80056d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e8      	bne.n	80055c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <HAL_DMA_Init+0x158>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800560e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	2b04      	cmp	r3, #4
 800563a:	d107      	bne.n	800564c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	4313      	orrs	r3, r2
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	2b04      	cmp	r3, #4
 8005674:	d117      	bne.n	80056a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa6f 	bl	8005b6c <DMA_CheckFifoParam>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2240      	movs	r2, #64	@ 0x40
 8005698:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80056a2:	2301      	movs	r3, #1
 80056a4:	e016      	b.n	80056d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fa26 	bl	8005b00 <DMA_CalcBaseAndBitshift>
 80056b4:	4603      	mov	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056bc:	223f      	movs	r2, #63	@ 0x3f
 80056be:	409a      	lsls	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	f010803f 	.word	0xf010803f

080056e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_DMA_Start_IT+0x26>
 8005702:	2302      	movs	r3, #2
 8005704:	e040      	b.n	8005788 <HAL_DMA_Start_IT+0xa8>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	d12f      	bne.n	800577a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f9b8 	bl	8005aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	223f      	movs	r2, #63	@ 0x3f
 800573a:	409a      	lsls	r2, r3
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0216 	orr.w	r2, r2, #22
 800574e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0208 	orr.w	r2, r2, #8
 8005766:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e005      	b.n	8005786 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005782:	2302      	movs	r3, #2
 8005784:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800579c:	4b8e      	ldr	r3, [pc, #568]	@ (80059d8 <HAL_DMA_IRQHandler+0x248>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a8e      	ldr	r2, [pc, #568]	@ (80059dc <HAL_DMA_IRQHandler+0x24c>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	0a9b      	lsrs	r3, r3, #10
 80057a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ba:	2208      	movs	r2, #8
 80057bc:	409a      	lsls	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4013      	ands	r3, r2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01a      	beq.n	80057fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d013      	beq.n	80057fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e8:	2208      	movs	r2, #8
 80057ea:	409a      	lsls	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f4:	f043 0201 	orr.w	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	2201      	movs	r2, #1
 8005802:	409a      	lsls	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d012      	beq.n	8005832 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581e:	2201      	movs	r2, #1
 8005820:	409a      	lsls	r2, r3
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582a:	f043 0202 	orr.w	r2, r3, #2
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	2204      	movs	r2, #4
 8005838:	409a      	lsls	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d012      	beq.n	8005868 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005854:	2204      	movs	r2, #4
 8005856:	409a      	lsls	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005860:	f043 0204 	orr.w	r2, r3, #4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	2210      	movs	r2, #16
 800586e:	409a      	lsls	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d043      	beq.n	8005900 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d03c      	beq.n	8005900 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588a:	2210      	movs	r2, #16
 800588c:	409a      	lsls	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d018      	beq.n	80058d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d108      	bne.n	80058c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d024      	beq.n	8005900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
 80058be:	e01f      	b.n	8005900 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	4798      	blx	r3
 80058d0:	e016      	b.n	8005900 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0208 	bic.w	r2, r2, #8
 80058ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005904:	2220      	movs	r2, #32
 8005906:	409a      	lsls	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 808f 	beq.w	8005a30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8087 	beq.w	8005a30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005926:	2220      	movs	r2, #32
 8005928:	409a      	lsls	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b05      	cmp	r3, #5
 8005938:	d136      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0216 	bic.w	r2, r2, #22
 8005948:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695a      	ldr	r2, [r3, #20]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005958:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <HAL_DMA_IRQHandler+0x1da>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0208 	bic.w	r2, r2, #8
 8005978:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597e:	223f      	movs	r2, #63	@ 0x3f
 8005980:	409a      	lsls	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599a:	2b00      	cmp	r3, #0
 800599c:	d07e      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
        }
        return;
 80059a6:	e079      	b.n	8005a9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01d      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10d      	bne.n	80059e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d031      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	4798      	blx	r3
 80059d4:	e02c      	b.n	8005a30 <HAL_DMA_IRQHandler+0x2a0>
 80059d6:	bf00      	nop
 80059d8:	20000070 	.word	0x20000070
 80059dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d023      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	4798      	blx	r3
 80059f0:	e01e      	b.n	8005a30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10f      	bne.n	8005a20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0210 	bic.w	r2, r2, #16
 8005a0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d032      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d022      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2205      	movs	r2, #5
 8005a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d307      	bcc.n	8005a78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f2      	bne.n	8005a5c <HAL_DMA_IRQHandler+0x2cc>
 8005a76:	e000      	b.n	8005a7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4798      	blx	r3
 8005a9a:	e000      	b.n	8005a9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a9c:	bf00      	nop
    }
  }
}
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b40      	cmp	r3, #64	@ 0x40
 8005ad0:	d108      	bne.n	8005ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ae2:	e007      	b.n	8005af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	3b10      	subs	r3, #16
 8005b10:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <DMA_CalcBaseAndBitshift+0x64>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b1a:	4a13      	ldr	r2, [pc, #76]	@ (8005b68 <DMA_CalcBaseAndBitshift+0x68>)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d909      	bls.n	8005b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b40:	e007      	b.n	8005b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	aaaaaaab 	.word	0xaaaaaaab
 8005b68:	0800c334 	.word	0x0800c334

08005b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11f      	bne.n	8005bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d856      	bhi.n	8005c3a <DMA_CheckFifoParam+0xce>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <DMA_CheckFifoParam+0x28>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb7 	.word	0x08005bb7
 8005b9c:	08005ba5 	.word	0x08005ba5
 8005ba0:	08005c3b 	.word	0x08005c3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d046      	beq.n	8005c3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb4:	e043      	b.n	8005c3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bbe:	d140      	bne.n	8005c42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bc4:	e03d      	b.n	8005c42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bce:	d121      	bne.n	8005c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d837      	bhi.n	8005c46 <DMA_CheckFifoParam+0xda>
 8005bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <DMA_CheckFifoParam+0x70>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005bed 	.word	0x08005bed
 8005be0:	08005bf3 	.word	0x08005bf3
 8005be4:	08005bed 	.word	0x08005bed
 8005be8:	08005c05 	.word	0x08005c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e030      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d025      	beq.n	8005c4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c02:	e022      	b.n	8005c4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c0c:	d11f      	bne.n	8005c4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c12:	e01c      	b.n	8005c4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d903      	bls.n	8005c22 <DMA_CheckFifoParam+0xb6>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d003      	beq.n	8005c28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c20:	e018      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	73fb      	strb	r3, [r7, #15]
      break;
 8005c26:	e015      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00e      	beq.n	8005c52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
      break;
 8005c38:	e00b      	b.n	8005c52 <DMA_CheckFifoParam+0xe6>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e00a      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      break;
 8005c3e:	bf00      	nop
 8005c40:	e008      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      break;
 8005c42:	bf00      	nop
 8005c44:	e006      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      break;
 8005c46:	bf00      	nop
 8005c48:	e004      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e002      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <DMA_CheckFifoParam+0xe8>
      break;
 8005c52:	bf00      	nop
    }
  } 
  
  return status; 
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop

08005c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b089      	sub	sp, #36	@ 0x24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	e16b      	b.n	8005f58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c80:	2201      	movs	r2, #1
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4013      	ands	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	f040 815a 	bne.w	8005f52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d005      	beq.n	8005cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d130      	bne.n	8005d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cec:	2201      	movs	r2, #1
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	f003 0201 	and.w	r2, r3, #1
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d017      	beq.n	8005d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	2203      	movs	r2, #3
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d123      	bne.n	8005da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	08da      	lsrs	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3208      	adds	r2, #8
 8005d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	220f      	movs	r2, #15
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	08da      	lsrs	r2, r3, #3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3208      	adds	r2, #8
 8005da2:	69b9      	ldr	r1, [r7, #24]
 8005da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	2203      	movs	r2, #3
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 0203 	and.w	r2, r3, #3
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80b4 	beq.w	8005f52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	4b60      	ldr	r3, [pc, #384]	@ (8005f70 <HAL_GPIO_Init+0x30c>)
 8005df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df2:	4a5f      	ldr	r2, [pc, #380]	@ (8005f70 <HAL_GPIO_Init+0x30c>)
 8005df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8005f70 <HAL_GPIO_Init+0x30c>)
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e06:	4a5b      	ldr	r2, [pc, #364]	@ (8005f74 <HAL_GPIO_Init+0x310>)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	089b      	lsrs	r3, r3, #2
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	220f      	movs	r2, #15
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43db      	mvns	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a52      	ldr	r2, [pc, #328]	@ (8005f78 <HAL_GPIO_Init+0x314>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02b      	beq.n	8005e8a <HAL_GPIO_Init+0x226>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a51      	ldr	r2, [pc, #324]	@ (8005f7c <HAL_GPIO_Init+0x318>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d025      	beq.n	8005e86 <HAL_GPIO_Init+0x222>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a50      	ldr	r2, [pc, #320]	@ (8005f80 <HAL_GPIO_Init+0x31c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d01f      	beq.n	8005e82 <HAL_GPIO_Init+0x21e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a4f      	ldr	r2, [pc, #316]	@ (8005f84 <HAL_GPIO_Init+0x320>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d019      	beq.n	8005e7e <HAL_GPIO_Init+0x21a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8005f88 <HAL_GPIO_Init+0x324>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_GPIO_Init+0x216>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a4d      	ldr	r2, [pc, #308]	@ (8005f8c <HAL_GPIO_Init+0x328>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00d      	beq.n	8005e76 <HAL_GPIO_Init+0x212>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8005f90 <HAL_GPIO_Init+0x32c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <HAL_GPIO_Init+0x20e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a4b      	ldr	r2, [pc, #300]	@ (8005f94 <HAL_GPIO_Init+0x330>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d101      	bne.n	8005e6e <HAL_GPIO_Init+0x20a>
 8005e6a:	2307      	movs	r3, #7
 8005e6c:	e00e      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e6e:	2308      	movs	r3, #8
 8005e70:	e00c      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e72:	2306      	movs	r3, #6
 8005e74:	e00a      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e76:	2305      	movs	r3, #5
 8005e78:	e008      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e7a:	2304      	movs	r3, #4
 8005e7c:	e006      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e004      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e002      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_GPIO_Init+0x228>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	f002 0203 	and.w	r2, r2, #3
 8005e92:	0092      	lsls	r2, r2, #2
 8005e94:	4093      	lsls	r3, r2
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e9c:	4935      	ldr	r1, [pc, #212]	@ (8005f74 <HAL_GPIO_Init+0x310>)
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	089b      	lsrs	r3, r3, #2
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ece:	4a32      	ldr	r2, [pc, #200]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ed4:	4b30      	ldr	r3, [pc, #192]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ef8:	4a27      	ldr	r2, [pc, #156]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005efe:	4b26      	ldr	r3, [pc, #152]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f22:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4013      	ands	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f4c:	4a12      	ldr	r2, [pc, #72]	@ (8005f98 <HAL_GPIO_Init+0x334>)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	3301      	adds	r3, #1
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b0f      	cmp	r3, #15
 8005f5c:	f67f ae90 	bls.w	8005c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	3724      	adds	r7, #36	@ 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40023800 	.word	0x40023800
 8005f74:	40013800 	.word	0x40013800
 8005f78:	40020000 	.word	0x40020000
 8005f7c:	40020400 	.word	0x40020400
 8005f80:	40020800 	.word	0x40020800
 8005f84:	40020c00 	.word	0x40020c00
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	40021400 	.word	0x40021400
 8005f90:	40021800 	.word	0x40021800
 8005f94:	40021c00 	.word	0x40021c00
 8005f98:	40013c00 	.word	0x40013c00

08005f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	807b      	strh	r3, [r7, #2]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fac:	787b      	ldrb	r3, [r7, #1]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fb2:	887a      	ldrh	r2, [r7, #2]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fb8:	e003      	b.n	8005fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fba:	887b      	ldrh	r3, [r7, #2]
 8005fbc:	041a      	lsls	r2, r3, #16
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	619a      	str	r2, [r3, #24]
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e267      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d075      	beq.n	80060da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fee:	4b88      	ldr	r3, [pc, #544]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d00c      	beq.n	8006014 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ffa:	4b85      	ldr	r3, [pc, #532]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006002:	2b08      	cmp	r3, #8
 8006004:	d112      	bne.n	800602c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006006:	4b82      	ldr	r3, [pc, #520]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800600e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006012:	d10b      	bne.n	800602c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006014:	4b7e      	ldr	r3, [pc, #504]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d05b      	beq.n	80060d8 <HAL_RCC_OscConfig+0x108>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d157      	bne.n	80060d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e242      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006034:	d106      	bne.n	8006044 <HAL_RCC_OscConfig+0x74>
 8006036:	4b76      	ldr	r3, [pc, #472]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a75      	ldr	r2, [pc, #468]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	e01d      	b.n	8006080 <HAL_RCC_OscConfig+0xb0>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800604c:	d10c      	bne.n	8006068 <HAL_RCC_OscConfig+0x98>
 800604e:	4b70      	ldr	r3, [pc, #448]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6f      	ldr	r2, [pc, #444]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	4b6d      	ldr	r3, [pc, #436]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a6c      	ldr	r2, [pc, #432]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e00b      	b.n	8006080 <HAL_RCC_OscConfig+0xb0>
 8006068:	4b69      	ldr	r3, [pc, #420]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a68      	ldr	r2, [pc, #416]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800606e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b66      	ldr	r3, [pc, #408]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a65      	ldr	r2, [pc, #404]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800607a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d013      	beq.n	80060b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fd ff9a 	bl	8003fc0 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006090:	f7fd ff96 	bl	8003fc0 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	@ 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e207      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0xc0>
 80060ae:	e014      	b.n	80060da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b0:	f7fd ff86 	bl	8003fc0 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fd ff82 	bl	8003fc0 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	@ 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e1f3      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ca:	4b51      	ldr	r3, [pc, #324]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0xe8>
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d063      	beq.n	80061ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f003 030c 	and.w	r3, r3, #12
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060f2:	4b47      	ldr	r3, [pc, #284]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d11c      	bne.n	8006138 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060fe:	4b44      	ldr	r3, [pc, #272]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d116      	bne.n	8006138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610a:	4b41      	ldr	r3, [pc, #260]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_RCC_OscConfig+0x152>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d001      	beq.n	8006122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e1c7      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006122:	4b3b      	ldr	r3, [pc, #236]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4937      	ldr	r1, [pc, #220]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006136:	e03a      	b.n	80061ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d020      	beq.n	8006182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006140:	4b34      	ldr	r3, [pc, #208]	@ (8006214 <HAL_RCC_OscConfig+0x244>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fd ff3b 	bl	8003fc0 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614e:	f7fd ff37 	bl	8003fc0 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e1a8      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006160:	4b2b      	ldr	r3, [pc, #172]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616c:	4b28      	ldr	r3, [pc, #160]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4925      	ldr	r1, [pc, #148]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 800617c:	4313      	orrs	r3, r2
 800617e:	600b      	str	r3, [r1, #0]
 8006180:	e015      	b.n	80061ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006182:	4b24      	ldr	r3, [pc, #144]	@ (8006214 <HAL_RCC_OscConfig+0x244>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fd ff1a 	bl	8003fc0 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006190:	f7fd ff16 	bl	8003fc0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e187      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d036      	beq.n	8006228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c2:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <HAL_RCC_OscConfig+0x248>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fd fefa 	bl	8003fc0 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d0:	f7fd fef6 	bl	8003fc0 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e167      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006210 <HAL_RCC_OscConfig+0x240>)
 80061e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f0      	beq.n	80061d0 <HAL_RCC_OscConfig+0x200>
 80061ee:	e01b      	b.n	8006228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f0:	4b09      	ldr	r3, [pc, #36]	@ (8006218 <HAL_RCC_OscConfig+0x248>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f6:	f7fd fee3 	bl	8003fc0 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061fc:	e00e      	b.n	800621c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fe:	f7fd fedf 	bl	8003fc0 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d907      	bls.n	800621c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e150      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
 8006210:	40023800 	.word	0x40023800
 8006214:	42470000 	.word	0x42470000
 8006218:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800621c:	4b88      	ldr	r3, [pc, #544]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 800621e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ea      	bne.n	80061fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8097 	beq.w	8006364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006236:	2300      	movs	r3, #0
 8006238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800623a:	4b81      	ldr	r3, [pc, #516]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10f      	bne.n	8006266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	4b7d      	ldr	r3, [pc, #500]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	4a7c      	ldr	r2, [pc, #496]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 8006250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006254:	6413      	str	r3, [r2, #64]	@ 0x40
 8006256:	4b7a      	ldr	r3, [pc, #488]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006266:	4b77      	ldr	r3, [pc, #476]	@ (8006444 <HAL_RCC_OscConfig+0x474>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d118      	bne.n	80062a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006272:	4b74      	ldr	r3, [pc, #464]	@ (8006444 <HAL_RCC_OscConfig+0x474>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a73      	ldr	r2, [pc, #460]	@ (8006444 <HAL_RCC_OscConfig+0x474>)
 8006278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800627c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800627e:	f7fd fe9f 	bl	8003fc0 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006286:	f7fd fe9b 	bl	8003fc0 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e10c      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006298:	4b6a      	ldr	r3, [pc, #424]	@ (8006444 <HAL_RCC_OscConfig+0x474>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d106      	bne.n	80062ba <HAL_RCC_OscConfig+0x2ea>
 80062ac:	4b64      	ldr	r3, [pc, #400]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b0:	4a63      	ldr	r2, [pc, #396]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062b2:	f043 0301 	orr.w	r3, r3, #1
 80062b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b8:	e01c      	b.n	80062f4 <HAL_RCC_OscConfig+0x324>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d10c      	bne.n	80062dc <HAL_RCC_OscConfig+0x30c>
 80062c2:	4b5f      	ldr	r3, [pc, #380]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	4a5e      	ldr	r2, [pc, #376]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062c8:	f043 0304 	orr.w	r3, r3, #4
 80062cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d2:	4a5b      	ldr	r2, [pc, #364]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062da:	e00b      	b.n	80062f4 <HAL_RCC_OscConfig+0x324>
 80062dc:	4b58      	ldr	r3, [pc, #352]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e0:	4a57      	ldr	r2, [pc, #348]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e8:	4b55      	ldr	r3, [pc, #340]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ec:	4a54      	ldr	r2, [pc, #336]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80062ee:	f023 0304 	bic.w	r3, r3, #4
 80062f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d015      	beq.n	8006328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062fc:	f7fd fe60 	bl	8003fc0 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006302:	e00a      	b.n	800631a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006304:	f7fd fe5c 	bl	8003fc0 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e0cb      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631a:	4b49      	ldr	r3, [pc, #292]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0ee      	beq.n	8006304 <HAL_RCC_OscConfig+0x334>
 8006326:	e014      	b.n	8006352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006328:	f7fd fe4a 	bl	8003fc0 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632e:	e00a      	b.n	8006346 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006330:	f7fd fe46 	bl	8003fc0 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e0b5      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006346:	4b3e      	ldr	r3, [pc, #248]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 8006348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ee      	bne.n	8006330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d105      	bne.n	8006364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006358:	4b39      	ldr	r3, [pc, #228]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	4a38      	ldr	r2, [pc, #224]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006362:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80a1 	beq.w	80064b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800636e:	4b34      	ldr	r3, [pc, #208]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b08      	cmp	r3, #8
 8006378:	d05c      	beq.n	8006434 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d141      	bne.n	8006406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006382:	4b31      	ldr	r3, [pc, #196]	@ (8006448 <HAL_RCC_OscConfig+0x478>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7fd fe1a 	bl	8003fc0 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006390:	f7fd fe16 	bl	8003fc0 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e087      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a2:	4b27      	ldr	r3, [pc, #156]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	019b      	lsls	r3, r3, #6
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	3b01      	subs	r3, #1
 80063c8:	041b      	lsls	r3, r3, #16
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d0:	061b      	lsls	r3, r3, #24
 80063d2:	491b      	ldr	r1, [pc, #108]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <HAL_RCC_OscConfig+0x478>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063de:	f7fd fdef 	bl	8003fc0 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fd fdeb 	bl	8003fc0 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e05c      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f8:	4b11      	ldr	r3, [pc, #68]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x416>
 8006404:	e054      	b.n	80064b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006406:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <HAL_RCC_OscConfig+0x478>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800640c:	f7fd fdd8 	bl	8003fc0 <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006414:	f7fd fdd4 	bl	8003fc0 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e045      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006426:	4b06      	ldr	r3, [pc, #24]	@ (8006440 <HAL_RCC_OscConfig+0x470>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x444>
 8006432:	e03d      	b.n	80064b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d107      	bne.n	800644c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e038      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
 8006440:	40023800 	.word	0x40023800
 8006444:	40007000 	.word	0x40007000
 8006448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800644c:	4b1b      	ldr	r3, [pc, #108]	@ (80064bc <HAL_RCC_OscConfig+0x4ec>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d028      	beq.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006464:	429a      	cmp	r2, r3
 8006466:	d121      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006472:	429a      	cmp	r2, r3
 8006474:	d11a      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800647c:	4013      	ands	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006484:	4293      	cmp	r3, r2
 8006486:	d111      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	3b01      	subs	r3, #1
 8006496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006498:	429a      	cmp	r2, r3
 800649a:	d107      	bne.n	80064ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800

080064c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0cc      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064d4:	4b68      	ldr	r3, [pc, #416]	@ (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d90c      	bls.n	80064fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e2:	4b65      	ldr	r3, [pc, #404]	@ (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ea:	4b63      	ldr	r3, [pc, #396]	@ (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d001      	beq.n	80064fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0b8      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d020      	beq.n	800654a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006514:	4b59      	ldr	r3, [pc, #356]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a58      	ldr	r2, [pc, #352]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800651e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800652c:	4b53      	ldr	r3, [pc, #332]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a52      	ldr	r2, [pc, #328]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006538:	4b50      	ldr	r3, [pc, #320]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	494d      	ldr	r1, [pc, #308]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d044      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d107      	bne.n	800656e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800655e:	4b47      	ldr	r3, [pc, #284]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d119      	bne.n	800659e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e07f      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d003      	beq.n	800657e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657a:	2b03      	cmp	r3, #3
 800657c:	d107      	bne.n	800658e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800657e:	4b3f      	ldr	r3, [pc, #252]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e06f      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800658e:	4b3b      	ldr	r3, [pc, #236]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e067      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800659e:	4b37      	ldr	r3, [pc, #220]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f023 0203 	bic.w	r2, r3, #3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	4934      	ldr	r1, [pc, #208]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065b0:	f7fd fd06 	bl	8003fc0 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b6:	e00a      	b.n	80065ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065b8:	f7fd fd02 	bl	8003fc0 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e04f      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	4b2b      	ldr	r3, [pc, #172]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 020c 	and.w	r2, r3, #12
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	429a      	cmp	r2, r3
 80065de:	d1eb      	bne.n	80065b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065e0:	4b25      	ldr	r3, [pc, #148]	@ (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20c      	bcs.n	8006608 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4b22      	ldr	r3, [pc, #136]	@ (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f6:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d001      	beq.n	8006608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e032      	b.n	800666e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006614:	4b19      	ldr	r3, [pc, #100]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4916      	ldr	r1, [pc, #88]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	4313      	orrs	r3, r2
 8006624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006632:	4b12      	ldr	r3, [pc, #72]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	490e      	ldr	r1, [pc, #56]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006646:	f000 f821 	bl	800668c <HAL_RCC_GetSysClockFreq>
 800664a:	4602      	mov	r2, r0
 800664c:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <HAL_RCC_ClockConfig+0x1bc>)
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	091b      	lsrs	r3, r3, #4
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	490a      	ldr	r1, [pc, #40]	@ (8006680 <HAL_RCC_ClockConfig+0x1c0>)
 8006658:	5ccb      	ldrb	r3, [r1, r3]
 800665a:	fa22 f303 	lsr.w	r3, r2, r3
 800665e:	4a09      	ldr	r2, [pc, #36]	@ (8006684 <HAL_RCC_ClockConfig+0x1c4>)
 8006660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006662:	4b09      	ldr	r3, [pc, #36]	@ (8006688 <HAL_RCC_ClockConfig+0x1c8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7fd fc66 	bl	8003f38 <HAL_InitTick>

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40023c00 	.word	0x40023c00
 800667c:	40023800 	.word	0x40023800
 8006680:	0800c31c 	.word	0x0800c31c
 8006684:	20000070 	.word	0x20000070
 8006688:	20000074 	.word	0x20000074

0800668c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800668c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006690:	b094      	sub	sp, #80	@ 0x50
 8006692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	647b      	str	r3, [r7, #68]	@ 0x44
 8006698:	2300      	movs	r3, #0
 800669a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800669c:	2300      	movs	r3, #0
 800669e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t pllvco = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

 80066a4:	4b79      	ldr	r3, [pc, #484]	@ (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 030c 	and.w	r3, r3, #12
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d00d      	beq.n	80066cc <HAL_RCC_GetSysClockFreq+0x40>
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	f200 80e1 	bhi.w	8006878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_RCC_GetSysClockFreq+0x34>
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d003      	beq.n	80066c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80066be:	e0db      	b.n	8006878 <HAL_RCC_GetSysClockFreq+0x1ec>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
 80066c0:	4b73      	ldr	r3, [pc, #460]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x204>)
 80066c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    {
 80066c4:	e0db      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x1f2>
      sysclockfreq = HSI_VALUE;
      break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
 80066c6:	4b73      	ldr	r3, [pc, #460]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x208>)
 80066c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    {
 80066ca:	e0d8      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x1f2>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 80066cc:	4b6f      	ldr	r3, [pc, #444]	@ (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066d4:	647b      	str	r3, [r7, #68]	@ 0x44
      SYSCLK = PLL_VCO / PLLP */
 80066d6:	4b6d      	ldr	r3, [pc, #436]	@ (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d063      	beq.n	80067aa <HAL_RCC_GetSysClockFreq+0x11e>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
 80066e2:	4b6a      	ldr	r3, [pc, #424]	@ (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	2200      	movs	r2, #0
 80066ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f6:	2300      	movs	r3, #0
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066fe:	4622      	mov	r2, r4
 8006700:	462b      	mov	r3, r5
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f04f 0100 	mov.w	r1, #0
 800670a:	0159      	lsls	r1, r3, #5
 800670c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006710:	0150      	lsls	r0, r2, #5
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4621      	mov	r1, r4
 8006718:	1a51      	subs	r1, r2, r1
 800671a:	6139      	str	r1, [r7, #16]
 800671c:	4629      	mov	r1, r5
 800671e:	eb63 0301 	sbc.w	r3, r3, r1
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006730:	4659      	mov	r1, fp
 8006732:	018b      	lsls	r3, r1, #6
 8006734:	4651      	mov	r1, sl
 8006736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800673a:	4651      	mov	r1, sl
 800673c:	018a      	lsls	r2, r1, #6
 800673e:	4651      	mov	r1, sl
 8006740:	ebb2 0801 	subs.w	r8, r2, r1
 8006744:	4659      	mov	r1, fp
 8006746:	eb63 0901 	sbc.w	r9, r3, r1
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800675a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800675e:	4690      	mov	r8, r2
 8006760:	4699      	mov	r9, r3
 8006762:	4623      	mov	r3, r4
 8006764:	eb18 0303 	adds.w	r3, r8, r3
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	462b      	mov	r3, r5
 800676c:	eb49 0303 	adc.w	r3, r9, r3
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800677e:	4629      	mov	r1, r5
 8006780:	024b      	lsls	r3, r1, #9
 8006782:	4621      	mov	r1, r4
 8006784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006788:	4621      	mov	r1, r4
 800678a:	024a      	lsls	r2, r1, #9
 800678c:	4610      	mov	r0, r2
 800678e:	4619      	mov	r1, r3
 8006790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006792:	2200      	movs	r2, #0
 8006794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800679c:	f7fa f876 	bl	800088c <__aeabi_uldivmod>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4613      	mov	r3, r2
 80067a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067a8:	e058      	b.n	800685c <HAL_RCC_GetSysClockFreq+0x1d0>
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
 80067aa:	4b38      	ldr	r3, [pc, #224]	@ (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	099b      	lsrs	r3, r3, #6
 80067b0:	2200      	movs	r2, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	4611      	mov	r1, r2
 80067b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067ba:	623b      	str	r3, [r7, #32]
 80067bc:	2300      	movs	r3, #0
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	f04f 0000 	mov.w	r0, #0
 80067cc:	f04f 0100 	mov.w	r1, #0
 80067d0:	0159      	lsls	r1, r3, #5
 80067d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d6:	0150      	lsls	r0, r2, #5
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4641      	mov	r1, r8
 80067de:	ebb2 0a01 	subs.w	sl, r2, r1
 80067e2:	4649      	mov	r1, r9
 80067e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067fc:	ebb2 040a 	subs.w	r4, r2, sl
 8006800:	eb63 050b 	sbc.w	r5, r3, fp
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	00eb      	lsls	r3, r5, #3
 800680e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006812:	00e2      	lsls	r2, r4, #3
 8006814:	4614      	mov	r4, r2
 8006816:	461d      	mov	r5, r3
 8006818:	4643      	mov	r3, r8
 800681a:	18e3      	adds	r3, r4, r3
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	464b      	mov	r3, r9
 8006820:	eb45 0303 	adc.w	r3, r5, r3
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006832:	4629      	mov	r1, r5
 8006834:	028b      	lsls	r3, r1, #10
 8006836:	4621      	mov	r1, r4
 8006838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800683c:	4621      	mov	r1, r4
 800683e:	028a      	lsls	r2, r1, #10
 8006840:	4610      	mov	r0, r2
 8006842:	4619      	mov	r1, r3
 8006844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006846:	2200      	movs	r2, #0
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	61fa      	str	r2, [r7, #28]
 800684c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006850:	f7fa f81c 	bl	800088c <__aeabi_uldivmod>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4613      	mov	r3, r2
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800685c:	4b0b      	ldr	r3, [pc, #44]	@ (800688c <HAL_RCC_GetSysClockFreq+0x200>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	3301      	adds	r3, #1
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	643b      	str	r3, [r7, #64]	@ 0x40
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800686c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800686e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	64bb      	str	r3, [r7, #72]	@ 0x48

 8006876:	e002      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x1f2>
      sysclockfreq = pllvco / pllp;
      break;
    }
    default:
 8006878:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x204>)
 800687a:	64bb      	str	r3, [r7, #72]	@ 0x48
    {
 800687c:	bf00      	nop
      sysclockfreq = HSI_VALUE;
      break;
    }
 800687e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
  }
 8006880:	4618      	mov	r0, r3
 8006882:	3750      	adds	r7, #80	@ 0x50
 8006884:	46bd      	mov	sp, r7
 8006886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800
 8006890:	00f42400 	.word	0x00f42400
 8006894:	007a1200 	.word	0x007a1200

08006898 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
uint32_t HAL_RCC_GetHCLKFreq(void)
 800689c:	4b03      	ldr	r3, [pc, #12]	@ (80068ac <HAL_RCC_GetHCLKFreq+0x14>)
 800689e:	681b      	ldr	r3, [r3, #0]
{
 80068a0:	4618      	mov	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000070 	.word	0x20000070

080068b0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Returns the PCLK1 frequency
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b4:	f7ff fff0 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80068b8:	4602      	mov	r2, r0
 80068ba:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	0a9b      	lsrs	r3, r3, #10
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	4903      	ldr	r1, [pc, #12]	@ (80068d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c6:	5ccb      	ldrb	r3, [r1, r3]
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40023800 	.word	0x40023800
 80068d4:	0800c32c 	.word	0x0800c32c

080068d8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Returns the PCLK2 frequency
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068dc:	f7ff ffdc 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80068e0:	4602      	mov	r2, r0
 80068e2:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	0b5b      	lsrs	r3, r3, #13
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	4903      	ldr	r1, [pc, #12]	@ (80068fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ee:	5ccb      	ldrb	r3, [r1, r3]
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40023800 	.word	0x40023800
 80068fc:	0800c32c 	.word	0x0800c32c

08006900 <HAL_SPI_Init>:
  * @brief  Initialize the SPI according to the specified parameters
  *         in the SPI_InitTypeDef and initialize the associated handle.
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_SPI_Init+0x12>
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800690e:	2301      	movs	r3, #1
 8006910:	e07b      	b.n	8006a0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d108      	bne.n	800692c <HAL_SPI_Init+0x2c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006922:	d009      	beq.n	8006938 <HAL_SPI_Init+0x38>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	61da      	str	r2, [r3, #28]
 800692a:	e005      	b.n	8006938 <HAL_SPI_Init+0x38>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	611a      	str	r2, [r3, #16]
    /* Force polarity and phase to TI protocaol requirements */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	615a      	str	r2, [r3, #20]
#if (USE_SPI_CRC != 0U)
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	629a      	str	r2, [r3, #40]	@ 0x28
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <HAL_SPI_Init+0x58>

  if (hspi->State == HAL_SPI_STATE_RESET)
  {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fd f8ea 	bl	8003b2c <HAL_SPI_MspInit>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  hspi->State = HAL_SPI_STATE_BUSY;

 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800696e:	601a      	str	r2, [r3, #0]
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069bc:	ea42 0103 	orr.w	r1, r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.CLKPhase & SPI_CR1_CPHA) |
                                  (hspi->Init.NSS & SPI_CR1_SSM) |
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	f003 0104 	and.w	r1, r3, #4
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	f003 0210 	and.w	r2, r3, #16
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	605a      	str	r2, [r3, #4]
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069f8:	61da      	str	r2, [r3, #28]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	655a      	str	r2, [r3, #84]	@ 0x54

 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8006a08:	2300      	movs	r3, #0

 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_SPI_Transmit>:
  *               the configuration information for SPI module.
  * @param  pData pointer to data buffer (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b088      	sub	sp, #32
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a22:	2300      	movs	r3, #0
 8006a24:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_SPI_Transmit+0x22>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e12d      	b.n	8006c90 <HAL_SPI_Transmit+0x27e>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  tickstart = HAL_GetTick();
  initial_TxXferCount = Size;

 8006a3c:	f7fd fac0 	bl	8003fc0 <HAL_GetTick>
 8006a40:	61b8      	str	r0, [r7, #24]
  if (hspi->State != HAL_SPI_STATE_READY)
 8006a42:	88fb      	ldrh	r3, [r7, #6]
 8006a44:	82fb      	strh	r3, [r7, #22]
  {
    return HAL_BUSY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d002      	beq.n	8006a58 <HAL_SPI_Transmit+0x46>
  }

 8006a52:	2302      	movs	r3, #2
 8006a54:	77fb      	strb	r3, [r7, #31]
  if ((pData == NULL) || (Size == 0U))
 8006a56:	e116      	b.n	8006c86 <HAL_SPI_Transmit+0x274>
  {
    return HAL_ERROR;
  }
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_SPI_Transmit+0x52>
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <HAL_SPI_Transmit+0x58>

  /* Process Locked */
 8006a64:	2301      	movs	r3, #1
 8006a66:	77fb      	strb	r3, [r7, #31]
  __HAL_LOCK(hspi);
 8006a68:	e10d      	b.n	8006c86 <HAL_SPI_Transmit+0x274>

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->TxXferSize  = Size;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	869a      	strh	r2, [r3, #52]	@ 0x34

 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88fa      	ldrh	r2, [r7, #6]
 8006a88:	86da      	strh	r2, [r3, #54]	@ 0x36
  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  hspi->RxXferSize  = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxISR       = NULL;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	645a      	str	r2, [r3, #68]	@ 0x44

 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ab0:	d10f      	bne.n	8006ad2 <HAL_SPI_Transmit+0xc0>
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
    SPI_1LINE_TX(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ac0:	601a      	str	r2, [r3, #0]
  }
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ad0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
  {
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	d007      	beq.n	8006af0 <HAL_SPI_Transmit+0xde>
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
  }
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aee:	601a      	str	r2, [r3, #0]

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
  {
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006af8:	d14f      	bne.n	8006b9a <HAL_SPI_Transmit+0x188>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
    {
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_SPI_Transmit+0xf6>
 8006b02:	8afb      	ldrh	r3, [r7, #22]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d142      	bne.n	8006b8e <HAL_SPI_Transmit+0x17c>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	881a      	ldrh	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b18:	1c9a      	adds	r2, r3, #2
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
    {
 8006b2c:	e02f      	b.n	8006b8e <HAL_SPI_Transmit+0x17c>
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
      {
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d112      	bne.n	8006b62 <HAL_SPI_Transmit+0x150>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4c:	1c9a      	adds	r2, r3, #2
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	631a      	str	r2, [r3, #48]	@ 0x30
      }
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b60:	e015      	b.n	8006b8e <HAL_SPI_Transmit+0x17c>
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
        {
 8006b62:	f7fd fa2d 	bl	8003fc0 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d803      	bhi.n	8006b7a <HAL_SPI_Transmit+0x168>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_Transmit+0x16e>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_SPI_Transmit+0x17c>
          hspi->State = HAL_SPI_STATE_READY;
          __HAL_UNLOCK(hspi);
 8006b80:	2303      	movs	r3, #3
 8006b82:	77fb      	strb	r3, [r7, #31]
          return HAL_TIMEOUT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        }
 8006b8c:	e07b      	b.n	8006c86 <HAL_SPI_Transmit+0x274>
    {
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1ca      	bne.n	8006b2e <HAL_SPI_Transmit+0x11c>
 8006b98:	e050      	b.n	8006c3c <HAL_SPI_Transmit+0x22a>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
    {
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_Transmit+0x196>
 8006ba2:	8afb      	ldrh	r3, [r7, #22]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d144      	bne.n	8006c32 <HAL_SPI_Transmit+0x220>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	7812      	ldrb	r2, [r2, #0]
 8006bb4:	701a      	strb	r2, [r3, #0]
      hspi->TxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
    {
 8006bce:	e030      	b.n	8006c32 <HAL_SPI_Transmit+0x220>
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
      {
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d113      	bne.n	8006c06 <HAL_SPI_Transmit+0x1f4>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	7812      	ldrb	r2, [r2, #0]
 8006bea:	701a      	strb	r2, [r3, #0]
        hspi->TxXferCount--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	631a      	str	r2, [r3, #48]	@ 0x30
      }
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c04:	e015      	b.n	8006c32 <HAL_SPI_Transmit+0x220>
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
        {
 8006c06:	f7fd f9db 	bl	8003fc0 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d803      	bhi.n	8006c1e <HAL_SPI_Transmit+0x20c>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d102      	bne.n	8006c24 <HAL_SPI_Transmit+0x212>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d106      	bne.n	8006c32 <HAL_SPI_Transmit+0x220>
          hspi->State = HAL_SPI_STATE_READY;
          __HAL_UNLOCK(hspi);
 8006c24:	2303      	movs	r3, #3
 8006c26:	77fb      	strb	r3, [r7, #31]
          return HAL_TIMEOUT;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        }
 8006c30:	e029      	b.n	8006c86 <HAL_SPI_Transmit+0x274>
    {
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1c9      	bne.n	8006bd0 <HAL_SPI_Transmit+0x1be>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
  {
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fa61 	bl	8007108 <SPI_EndRxTxTransaction>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <HAL_SPI_Transmit+0x240>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
  }
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
  {
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10a      	bne.n	8006c70 <HAL_SPI_Transmit+0x25e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	693b      	ldr	r3, [r7, #16]

  hspi->State = HAL_SPI_STATE_READY;
  /* Process Unlocked */
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_SPI_Transmit+0x26c>
  __HAL_UNLOCK(hspi);

 8006c78:	2301      	movs	r3, #1
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e003      	b.n	8006c86 <HAL_SPI_Transmit+0x274>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  {
    return HAL_ERROR;
  }
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  else
  {
    return HAL_OK;
  }
}
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

 8006c8e:	7ffb      	ldrb	r3, [r7, #31]
/**
 8006c90:	4618      	mov	r0, r3
 8006c92:	3720      	adds	r7, #32
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_SPI_TransmitReceive>:
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08c      	sub	sp, #48	@ 0x30
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	807b      	strh	r3, [r7, #2]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;

  /* Check Direction parameter */
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006caa:	2300      	movs	r3, #0
 8006cac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_SPI_TransmitReceive+0x26>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e198      	b.n	8006ff0 <HAL_SPI_TransmitReceive+0x358>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  tmp_mode            = hspi->Init.Mode;
  initial_TxXferCount = Size;

 8006cc6:	f7fd f97b 	bl	8003fc0 <HAL_GetTick>
 8006cca:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  {
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	61fb      	str	r3, [r7, #28]
    return HAL_BUSY;
 8006cdc:	887b      	ldrh	r3, [r7, #2]
 8006cde:	837b      	strh	r3, [r7, #26]
  }

 8006ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d00f      	beq.n	8006d08 <HAL_SPI_TransmitReceive+0x70>
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cee:	d107      	bne.n	8006d00 <HAL_SPI_TransmitReceive+0x68>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <HAL_SPI_TransmitReceive+0x68>
 8006cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d003      	beq.n	8006d08 <HAL_SPI_TransmitReceive+0x70>
  {
    return HAL_ERROR;
 8006d00:	2302      	movs	r3, #2
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
 8006d06:	e16d      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x34c>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <HAL_SPI_TransmitReceive+0x82>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HAL_SPI_TransmitReceive+0x82>
 8006d14:	887b      	ldrh	r3, [r7, #2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <HAL_SPI_TransmitReceive+0x8a>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d20:	e160      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x34c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d003      	beq.n	8006d36 <HAL_SPI_TransmitReceive+0x9e>
  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2205      	movs	r2, #5
 8006d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->TxXferCount = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	887a      	ldrh	r2, [r7, #2]
 8006d46:	87da      	strh	r2, [r3, #62]	@ 0x3e

 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	887a      	ldrh	r2, [r7, #2]
 8006d4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  /*Init field not used in handle to zero */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->RxISR       = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	887a      	ldrh	r2, [r7, #2]
 8006d58:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	887a      	ldrh	r2, [r7, #2]
 8006d5e:	869a      	strh	r2, [r3, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	641a      	str	r2, [r3, #64]	@ 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
  }
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d76:	2b40      	cmp	r3, #64	@ 0x40
 8006d78:	d007      	beq.n	8006d8a <HAL_SPI_TransmitReceive+0xf2>

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d88:	601a      	str	r2, [r3, #0]
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d92:	d17c      	bne.n	8006e8e <HAL_SPI_TransmitReceive+0x1f6>
      hspi->pTxBuffPtr += sizeof(uint16_t);
      hspi->TxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x10a>
 8006d9c:	8b7b      	ldrh	r3, [r7, #26]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d16a      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x1e0>

#if (USE_SPI_CRC != 0U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	881a      	ldrh	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60da      	str	r2, [r3, #12]
      /* Enable CRC Transmission */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	1c9a      	adds	r2, r3, #2
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	631a      	str	r2, [r3, #48]	@ 0x30
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
      {
 8006dc6:	e057      	b.n	8006e78 <HAL_SPI_TransmitReceive+0x1e0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr += sizeof(uint16_t);
        hspi->TxXferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d11b      	bne.n	8006e0e <HAL_SPI_TransmitReceive+0x176>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d016      	beq.n	8006e0e <HAL_SPI_TransmitReceive+0x176>
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d113      	bne.n	8006e0e <HAL_SPI_TransmitReceive+0x176>
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	881a      	ldrh	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60da      	str	r2, [r3, #12]

 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_SPI_CRC != 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d119      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x1b8>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d014      	beq.n	8006e50 <HAL_SPI_TransmitReceive+0x1b8>
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e30:	b292      	uxth	r2, r2
 8006e32:	801a      	strh	r2, [r3, #0]
      }
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	1c9a      	adds	r2, r3, #2
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	639a      	str	r2, [r3, #56]	@ 0x38
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        __HAL_UNLOCK(hspi);
        return HAL_TIMEOUT;
 8006e50:	f7fd f8b6 	bl	8003fc0 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d80b      	bhi.n	8006e78 <HAL_SPI_TransmitReceive+0x1e0>
 8006e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d007      	beq.n	8006e78 <HAL_SPI_TransmitReceive+0x1e0>
      }
    }
 8006e68:	2303      	movs	r3, #3
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Transmit and Receive data in 8 Bit mode */
 8006e76:	e0b5      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x34c>
      {
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1a2      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x130>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d19d      	bne.n	8006dc8 <HAL_SPI_TransmitReceive+0x130>
 8006e8c:	e080      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x2f8>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
      hspi->pTxBuffPtr += sizeof(uint8_t);
      hspi->TxXferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <HAL_SPI_TransmitReceive+0x204>
 8006e96:	8b7b      	ldrh	r3, [r7, #26]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d16f      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x2e4>

#if (USE_SPI_CRC != 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	701a      	strb	r2, [r3, #0]
      /* Enable CRC Transmission */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
      {
 8006ec2:	e05b      	b.n	8006f7c <HAL_SPI_TransmitReceive+0x2e4>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
        hspi->pTxBuffPtr++;
        hspi->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d11c      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x274>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d017      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x274>
 8006edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d114      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x274>
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	330c      	adds	r3, #12
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	701a      	strb	r2, [r3, #0]

 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_SPI_CRC != 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006f08:	2300      	movs	r3, #0
 8006f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
        hspi->pRxBuffPtr++;
        hspi->RxXferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d119      	bne.n	8006f4e <HAL_SPI_TransmitReceive+0x2b6>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d014      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x2b6>
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]
      }
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	639a      	str	r2, [r3, #56]	@ 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        __HAL_UNLOCK(hspi);
        return HAL_TIMEOUT;
 8006f4e:	f7fd f837 	bl	8003fc0 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d803      	bhi.n	8006f66 <HAL_SPI_TransmitReceive+0x2ce>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d102      	bne.n	8006f6c <HAL_SPI_TransmitReceive+0x2d4>
 8006f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d107      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x2e4>
      }
    }
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

 8006f7a:	e033      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x34c>
      {
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d19e      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x22c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d199      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x22c>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    __HAL_UNLOCK(hspi);
 8006f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f8b7 	bl	8007108 <SPI_EndRxTxTransaction>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <HAL_SPI_TransmitReceive+0x316>
    return HAL_ERROR;
  }
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Clear overrun flag in 2 Lines communication mode because received is not read */
 8006fac:	e01a      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x34c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x334>


 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	697b      	ldr	r3, [r7, #20]
  hspi->State = HAL_SPI_STATE_READY;
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x344>

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e003      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x34c>
  {
    return HAL_ERROR;
  }
  else
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  {
    return HAL_OK;
  }
}
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

 8006fec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
/**
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3730      	adds	r7, #48	@ 0x30
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <SPI_WaitFlagStateUntilTimeout>:
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
      {
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	4613      	mov	r3, r2
 8007006:	71fb      	strb	r3, [r7, #7]
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007008:	f7fc ffda 	bl	8003fc0 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4413      	add	r3, r2
 8007016:	61fb      	str	r3, [r7, #28]
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007018:	f7fc ffd2 	bl	8003fc0 <HAL_GetTick>
 800701c:	61b8      	str	r0, [r7, #24]
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800701e:	4b39      	ldr	r3, [pc, #228]	@ (8007104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	015b      	lsls	r3, r3, #5
 8007024:	0d1b      	lsrs	r3, r3, #20
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	617b      	str	r3, [r7, #20]
        }

 800702e:	e054      	b.n	80070da <SPI_WaitFlagStateUntilTimeout+0xe2>
        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d050      	beq.n	80070da <SPI_WaitFlagStateUntilTimeout+0xe2>
        {
          SPI_RESET_CRC(hspi);
 8007038:	f7fc ffc2 	bl	8003fc0 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	429a      	cmp	r2, r3
 8007046:	d902      	bls.n	800704e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d13d      	bne.n	80070ca <SPI_WaitFlagStateUntilTimeout+0xd2>

        hspi->State = HAL_SPI_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);

 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800705c:	605a      	str	r2, [r3, #4]
        return HAL_TIMEOUT;
      }
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007066:	d111      	bne.n	800708c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007070:	d004      	beq.n	800707c <SPI_WaitFlagStateUntilTimeout+0x84>
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707a:	d107      	bne.n	800708c <SPI_WaitFlagStateUntilTimeout+0x94>
      if (count == 0U)
      {
        tmp_timeout = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800708a:	601a      	str	r2, [r3, #0]
      }
      else
      {
        count--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007094:	d10f      	bne.n	80070b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
      }
    }
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}

/**
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  * @brief  Handle the check of the RX transaction complete.
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 80070c6:	2303      	movs	r3, #3
 80070c8:	e017      	b.n	80070fa <SPI_WaitFlagStateUntilTimeout+0x102>
  *               the configuration information for SPI module.
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
  * @retval HAL status
  */
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]

 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4013      	ands	r3, r2
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	bf0c      	ite	eq
 80070ea:	2301      	moveq	r3, #1
 80070ec:	2300      	movne	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d19b      	bne.n	8007030 <SPI_WaitFlagStateUntilTimeout+0x38>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Disable SPI peripheral */
 80070f8:	2300      	movs	r3, #0
    __HAL_SPI_DISABLE(hspi);
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000070 	.word	0x20000070

08007108 <SPI_EndRxTxTransaction>:
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007108:	b580      	push	{r7, lr}
 800710a:	b088      	sub	sp, #32
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2201      	movs	r2, #1
 800711c:	2102      	movs	r1, #2
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff ff6a 	bl	8006ff8 <SPI_WaitFlagStateUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <SPI_EndRxTxTransaction+0x32>
      return HAL_TIMEOUT;
    }
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712e:	f043 0220 	orr.w	r2, r3, #32
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	655a      	str	r2, [r3, #84]	@ 0x54
  }
 8007136:	2303      	movs	r3, #3
 8007138:	e032      	b.n	80071a0 <SPI_EndRxTxTransaction+0x98>
  else
  {
    /* Wait BSY flag during 1 Byte time transfer in case of Full-Duplex and Tx transfer
    * If Timeout is reached, the transfer is considered as finish.
 800713a:	4b1b      	ldr	r3, [pc, #108]	@ (80071a8 <SPI_EndRxTxTransaction+0xa0>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a1b      	ldr	r2, [pc, #108]	@ (80071ac <SPI_EndRxTxTransaction+0xa4>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	0d5b      	lsrs	r3, r3, #21
 8007146:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007158:	d112      	bne.n	8007180 <SPI_EndRxTxTransaction+0x78>
    */
    do
    {
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2200      	movs	r2, #0
 8007162:	2180      	movs	r1, #128	@ 0x80
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7ff ff47 	bl	8006ff8 <SPI_WaitFlagStateUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d016      	beq.n	800719e <SPI_EndRxTxTransaction+0x96>
      if (count == 0U)
      {
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007174:	f043 0220 	orr.w	r2, r3, #32
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800717c:	2303      	movs	r3, #3
 800717e:	e00f      	b.n	80071a0 <SPI_EndRxTxTransaction+0x98>
}

/**
  * @brief  Handle the end of the RXTX transaction.
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <SPI_EndRxTxTransaction+0x94>
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	3b01      	subs	r3, #1
 800718a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007196:	2b80      	cmp	r3, #128	@ 0x80
 8007198:	d0f2      	beq.n	8007180 <SPI_EndRxTxTransaction+0x78>
 800719a:	e000      	b.n	800719e <SPI_EndRxTxTransaction+0x96>
  */
 800719c:	bf00      	nop
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);

  /* Init tickstart for timeout management */
 800719e:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20000070 	.word	0x20000070
 80071ac:	165e9f81 	.word	0x165e9f81

080071b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e041      	b.n	8007246 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fc fcf0 	bl	8003bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f000 fa7e 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b01      	cmp	r3, #1
 8007262:	d001      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e04e      	b.n	8007306 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a23      	ldr	r2, [pc, #140]	@ (8007314 <HAL_TIM_Base_Start_IT+0xc4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d022      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x80>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007292:	d01d      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x80>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1f      	ldr	r2, [pc, #124]	@ (8007318 <HAL_TIM_Base_Start_IT+0xc8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d018      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x80>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1e      	ldr	r2, [pc, #120]	@ (800731c <HAL_TIM_Base_Start_IT+0xcc>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d013      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x80>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007320 <HAL_TIM_Base_Start_IT+0xd0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d00e      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x80>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007324 <HAL_TIM_Base_Start_IT+0xd4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d009      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x80>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a19      	ldr	r2, [pc, #100]	@ (8007328 <HAL_TIM_Base_Start_IT+0xd8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <HAL_TIM_Base_Start_IT+0x80>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a18      	ldr	r2, [pc, #96]	@ (800732c <HAL_TIM_Base_Start_IT+0xdc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d111      	bne.n	80072f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b06      	cmp	r3, #6
 80072e0:	d010      	beq.n	8007304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f042 0201 	orr.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f2:	e007      	b.n	8007304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000
 8007318:	40000400 	.word	0x40000400
 800731c:	40000800 	.word	0x40000800
 8007320:	40000c00 	.word	0x40000c00
 8007324:	40010400 	.word	0x40010400
 8007328:	40014000 	.word	0x40014000
 800732c:	40001800 	.word	0x40001800

08007330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d020      	beq.n	8007394 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01b      	beq.n	8007394 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0202 	mvn.w	r2, #2
 8007364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f999 	bl	80076b2 <HAL_TIM_IC_CaptureCallback>
 8007380:	e005      	b.n	800738e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f98b 	bl	800769e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f99c 	bl	80076c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d020      	beq.n	80073e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01b      	beq.n	80073e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0204 	mvn.w	r2, #4
 80073b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f973 	bl	80076b2 <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f965 	bl	800769e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f976 	bl	80076c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d020      	beq.n	800742c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f06f 0208 	mvn.w	r2, #8
 80073fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2204      	movs	r2, #4
 8007402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f94d 	bl	80076b2 <HAL_TIM_IC_CaptureCallback>
 8007418:	e005      	b.n	8007426 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f93f 	bl	800769e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f950 	bl	80076c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0310 	and.w	r3, r3, #16
 8007432:	2b00      	cmp	r3, #0
 8007434:	d020      	beq.n	8007478 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0210 	mvn.w	r2, #16
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2208      	movs	r2, #8
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f927 	bl	80076b2 <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f919 	bl	800769e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f92a 	bl	80076c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00c      	beq.n	800749c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0201 	mvn.w	r2, #1
 8007494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fa f8a8 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00c      	beq.n	80074c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d007      	beq.n	80074c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fae4 	bl	8007a88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00c      	beq.n	80074e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d007      	beq.n	80074e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f8fb 	bl	80076da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0220 	mvn.w	r2, #32
 8007500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fab6 	bl	8007a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_TIM_ConfigClockSource+0x1c>
 8007528:	2302      	movs	r3, #2
 800752a:	e0b4      	b.n	8007696 <HAL_TIM_ConfigClockSource+0x186>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800754a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007564:	d03e      	beq.n	80075e4 <HAL_TIM_ConfigClockSource+0xd4>
 8007566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800756a:	f200 8087 	bhi.w	800767c <HAL_TIM_ConfigClockSource+0x16c>
 800756e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007572:	f000 8086 	beq.w	8007682 <HAL_TIM_ConfigClockSource+0x172>
 8007576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800757a:	d87f      	bhi.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
 800757c:	2b70      	cmp	r3, #112	@ 0x70
 800757e:	d01a      	beq.n	80075b6 <HAL_TIM_ConfigClockSource+0xa6>
 8007580:	2b70      	cmp	r3, #112	@ 0x70
 8007582:	d87b      	bhi.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
 8007584:	2b60      	cmp	r3, #96	@ 0x60
 8007586:	d050      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x11a>
 8007588:	2b60      	cmp	r3, #96	@ 0x60
 800758a:	d877      	bhi.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
 800758c:	2b50      	cmp	r3, #80	@ 0x50
 800758e:	d03c      	beq.n	800760a <HAL_TIM_ConfigClockSource+0xfa>
 8007590:	2b50      	cmp	r3, #80	@ 0x50
 8007592:	d873      	bhi.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b40      	cmp	r3, #64	@ 0x40
 8007596:	d058      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x13a>
 8007598:	2b40      	cmp	r3, #64	@ 0x40
 800759a:	d86f      	bhi.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b30      	cmp	r3, #48	@ 0x30
 800759e:	d064      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x15a>
 80075a0:	2b30      	cmp	r3, #48	@ 0x30
 80075a2:	d86b      	bhi.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d060      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x15a>
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d867      	bhi.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d05c      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x15a>
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	d05a      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x15a>
 80075b4:	e062      	b.n	800767c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075c6:	f000 f9b9 	bl	800793c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	609a      	str	r2, [r3, #8]
      break;
 80075e2:	e04f      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075f4:	f000 f9a2 	bl	800793c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007606:	609a      	str	r2, [r3, #8]
      break;
 8007608:	e03c      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007616:	461a      	mov	r2, r3
 8007618:	f000 f916 	bl	8007848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2150      	movs	r1, #80	@ 0x50
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f96f 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 8007628:	e02c      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007636:	461a      	mov	r2, r3
 8007638:	f000 f935 	bl	80078a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2160      	movs	r1, #96	@ 0x60
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f95f 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 8007648:	e01c      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007656:	461a      	mov	r2, r3
 8007658:	f000 f8f6 	bl	8007848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2140      	movs	r1, #64	@ 0x40
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f94f 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 8007668:	e00c      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f000 f946 	bl	8007906 <TIM_ITRx_SetConfig>
      break;
 800767a:	e003      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
      break;
 8007680:	e000      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a46      	ldr	r2, [pc, #280]	@ (800781c <TIM_Base_SetConfig+0x12c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d00f      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a43      	ldr	r2, [pc, #268]	@ (8007820 <TIM_Base_SetConfig+0x130>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a42      	ldr	r2, [pc, #264]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a41      	ldr	r2, [pc, #260]	@ (8007828 <TIM_Base_SetConfig+0x138>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a40      	ldr	r2, [pc, #256]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a35      	ldr	r2, [pc, #212]	@ (800781c <TIM_Base_SetConfig+0x12c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d02b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007750:	d027      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a32      	ldr	r2, [pc, #200]	@ (8007820 <TIM_Base_SetConfig+0x130>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d023      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a31      	ldr	r2, [pc, #196]	@ (8007824 <TIM_Base_SetConfig+0x134>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d01f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a30      	ldr	r2, [pc, #192]	@ (8007828 <TIM_Base_SetConfig+0x138>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2f      	ldr	r2, [pc, #188]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d017      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2e      	ldr	r2, [pc, #184]	@ (8007830 <TIM_Base_SetConfig+0x140>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a2d      	ldr	r2, [pc, #180]	@ (8007834 <TIM_Base_SetConfig+0x144>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2c      	ldr	r2, [pc, #176]	@ (8007838 <TIM_Base_SetConfig+0x148>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a2b      	ldr	r2, [pc, #172]	@ (800783c <TIM_Base_SetConfig+0x14c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2a      	ldr	r2, [pc, #168]	@ (8007840 <TIM_Base_SetConfig+0x150>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a29      	ldr	r2, [pc, #164]	@ (8007844 <TIM_Base_SetConfig+0x154>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	629a      	str	r2, [r3, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a10      	ldr	r2, [pc, #64]	@ (800781c <TIM_Base_SetConfig+0x12c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a12      	ldr	r2, [pc, #72]	@ (800782c <TIM_Base_SetConfig+0x13c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <TIM_Base_SetConfig+0x100>
    TIMx->RCR = Structure->RepetitionCounter;
  }

 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);

  /* Generate an update event to reload the Prescaler
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	615a      	str	r2, [r3, #20]
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;

 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d105      	bne.n	800780e <TIM_Base_SetConfig+0x11e>
  TIMx->CR1 = tmpcr1;
}

 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f023 0201 	bic.w	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	611a      	str	r2, [r3, #16]
/**
  * @brief  Timer Output Compare 1 configuration
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40010000 	.word	0x40010000
 8007820:	40000400 	.word	0x40000400
 8007824:	40000800 	.word	0x40000800
 8007828:	40000c00 	.word	0x40000c00
 800782c:	40010400 	.word	0x40010400
 8007830:	40014000 	.word	0x40014000
 8007834:	40014400 	.word	0x40014400
 8007838:	40014800 	.word	0x40014800
 800783c:	40001800 	.word	0x40001800
 8007840:	40001c00 	.word	0x40001c00
 8007844:	40002000 	.word	0x40002000

08007848 <TIM_TI1_ConfigInputStage>:
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	617b      	str	r3, [r7, #20]
  /* Set the filter */
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f023 0201 	bic.w	r2, r3, #1
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	621a      	str	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007872:	613b      	str	r3, [r7, #16]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f023 030a 	bic.w	r3, r3, #10
 8007884:	617b      	str	r3, [r7, #20]
  TIMx->CCMR1 = tmpccmr1;
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]
  TIMx->CCER = tmpccer;
}

 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	619a      	str	r2, [r3, #24]
/**
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	621a      	str	r2, [r3, #32]
  * @brief  Configure the TI2 as Input.
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <TIM_TI2_ConfigInputStage>:
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

 80078a6:	b480      	push	{r7}
 80078a8:	b087      	sub	sp, #28
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;

 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	617b      	str	r3, [r7, #20]
  /* Set the filter */
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f023 0210 	bic.w	r2, r3, #16
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078d0:	613b      	str	r3, [r7, #16]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	031b      	lsls	r3, r3, #12
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078e2:	617b      	str	r3, [r7, #20]
  TIMx->CCMR1 = tmpccmr1 ;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	011b      	lsls	r3, r3, #4
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER = tmpccer;
}

 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	619a      	str	r2, [r3, #24]
/**
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	621a      	str	r2, [r3, #32]
  * @brief  Configure the TI3 as Input.
 80078fa:	bf00      	nop
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <TIM_ITRx_SetConfig>:
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
 8007906:	b480      	push	{r7}
 8007908:	b085      	sub	sp, #20
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	6039      	str	r1, [r7, #0]
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	60fb      	str	r3, [r7, #12]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
  /* Write to TIMx SMCR */
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800791c:	60fb      	str	r3, [r7, #12]
  TIMx->SMCR = tmpsmcr;
}
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	f043 0307 	orr.w	r3, r3, #7
 8007928:	60fb      	str	r3, [r7, #12]
/**
  * @brief  Configures the TIMx External Trigger (ETR).
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	609a      	str	r2, [r3, #8]
  * @param  TIMx to select the TIM peripheral
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <TIM_ETR_SetConfig>:
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	021a      	lsls	r2, r3, #8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	431a      	orrs	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	4313      	orrs	r3, r2
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	4313      	orrs	r3, r2
 8007968:	617b      	str	r3, [r7, #20]
}

/**
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	609a      	str	r2, [r3, #8]
  * @brief  Enables or disables the TIM Capture Compare Channel x.
 8007970:	bf00      	nop
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007990:	2302      	movs	r3, #2
 8007992:	e05a      	b.n	8007a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a21      	ldr	r2, [pc, #132]	@ (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d022      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e0:	d01d      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d018      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d013      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00e      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a18      	ldr	r2, [pc, #96]	@ (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d009      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	@ (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d004      	beq.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a15      	ldr	r2, [pc, #84]	@ (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d10c      	bne.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40000400 	.word	0x40000400
 8007a60:	40000800 	.word	0x40000800
 8007a64:	40000c00 	.word	0x40000c00
 8007a68:	40010400 	.word	0x40010400
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40001800 	.word	0x40001800

08007a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e042      	b.n	8007b34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fc f8a0 	bl	8003c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2224      	movs	r2, #36	@ 0x24
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f973 	bl	8007dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695a      	ldr	r2, [r3, #20]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	@ 0x28
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d175      	bne.n	8007c48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_UART_Transmit+0x2c>
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e06e      	b.n	8007c4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2221      	movs	r2, #33	@ 0x21
 8007b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b7a:	f7fc fa21 	bl	8003fc0 <HAL_GetTick>
 8007b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	88fa      	ldrh	r2, [r7, #6]
 8007b84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	88fa      	ldrh	r2, [r7, #6]
 8007b8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b94:	d108      	bne.n	8007ba8 <HAL_UART_Transmit+0x6c>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d104      	bne.n	8007ba8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	61bb      	str	r3, [r7, #24]
 8007ba6:	e003      	b.n	8007bb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bb0:	e02e      	b.n	8007c10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2180      	movs	r1, #128	@ 0x80
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f848 	bl	8007c52 <UART_WaitOnFlagUntilTimeout>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e03a      	b.n	8007c4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	3302      	adds	r3, #2
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	e007      	b.n	8007c02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1cb      	bne.n	8007bb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2200      	movs	r2, #0
 8007c22:	2140      	movs	r1, #64	@ 0x40
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f814 	bl	8007c52 <UART_WaitOnFlagUntilTimeout>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e006      	b.n	8007c4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	e000      	b.n	8007c4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
  }
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <UART_WaitOnFlagUntilTimeout>:

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
  {
    huart->RxXferCount = 0x00U;
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	603b      	str	r3, [r7, #0]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]
    UART_EndRxTransfer(huart);
  }
 8007c62:	e03b      	b.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x8a>

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d037      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x8a>
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007c6c:	f7fc f9a8 	bl	8003fc0 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	6a3a      	ldr	r2, [r7, #32]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d302      	bcc.n	8007c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x34>
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c82:	2303      	movs	r3, #3
 8007c84:	e03a      	b.n	8007cfc <UART_WaitOnFlagUntilTimeout+0xaa>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}

 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d023      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b80      	cmp	r3, #128	@ 0x80
 8007c98:	d020      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b40      	cmp	r3, #64	@ 0x40
 8007c9e:	d01d      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x8a>
/**
  * @brief  This function handles UART Communication Timeout. It waits
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d116      	bne.n	8007cdc <UART_WaitOnFlagUntilTimeout+0x8a>
  *         until a flag is no longer in the specified status.
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 8007cae:	2300      	movs	r3, #0
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	617b      	str	r3, [r7, #20]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	697b      	ldr	r3, [r7, #20]
  * @param  Flag specifies the UART flag to check.
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f81d 	bl	8007d04 <UART_EndRxTransfer>
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2208      	movs	r2, #8
 8007cce:	645a      	str	r2, [r3, #68]	@ 0x44
                                                     uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e00f      	b.n	8007cfc <UART_WaitOnFlagUntilTimeout+0xaa>
  }
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d0b4      	beq.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x12>
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
 8007cfa:	2300      	movs	r3, #0

 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <UART_EndRxTransfer>:
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);

  if (huart->Init.Parity != UART_PARITY_NONE)
  {
 8007d04:	b480      	push	{r7}
 8007d06:	b095      	sub	sp, #84	@ 0x54
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	330c      	adds	r3, #12
 8007d2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e5      	bne.n	8007d0c <UART_EndRxTransfer+0x8>
  }
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3314      	adds	r3, #20
 8007d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	f023 0301 	bic.w	r3, r3, #1
 8007d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3314      	adds	r3, #20
 8007d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e5      	bne.n	8007d40 <UART_EndRxTransfer+0x3c>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d119      	bne.n	8007db0 <UART_EndRxTransfer+0xac>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f023 0310 	bic.w	r3, r3, #16
 8007d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d9c:	61ba      	str	r2, [r7, #24]
 8007d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6979      	ldr	r1, [r7, #20]
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	613b      	str	r3, [r7, #16]
   return(result);
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e5      	bne.n	8007d7c <UART_EndRxTransfer+0x78>
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);

  return HAL_OK;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
}
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	631a      	str	r2, [r3, #48]	@ 0x30

 8007dbe:	bf00      	nop
 8007dc0:	3754      	adds	r7, #84	@ 0x54
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <UART_SetConfig>:
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
 8007dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dd0:	b0c0      	sub	sp, #256	@ 0x100
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
 8007dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de8:	68d9      	ldr	r1, [r3, #12]
 8007dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	ea40 0301 	orr.w	r3, r0, r1
 8007df4:	6113      	str	r3, [r2, #16]
      }

      return HAL_OK;
    }
    return HAL_OK;
  }
 8007df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  else
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007e24:	f021 010c 	bic.w	r1, r1, #12
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e32:	430b      	orrs	r3, r1
 8007e34:	60d3      	str	r3, [r2, #12]
  {
    return HAL_BUSY;
  }
}

/**
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e46:	6999      	ldr	r1, [r3, #24]
 8007e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	ea40 0301 	orr.w	r3, r0, r1
 8007e52:	6153      	str	r3, [r2, #20]
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg;
  uint32_t pclk;
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b8f      	ldr	r3, [pc, #572]	@ (8008098 <UART_SetConfig+0x2cc>)
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d005      	beq.n	8007e6c <UART_SetConfig+0xa0>
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	4b8d      	ldr	r3, [pc, #564]	@ (800809c <UART_SetConfig+0x2d0>)
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d104      	bne.n	8007e76 <UART_SetConfig+0xaa>

  /* Check the parameters */
 8007e6c:	f7fe fd34 	bl	80068d8 <HAL_RCC_GetPCLK2Freq>
 8007e70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e74:	e003      	b.n	8007e7e <UART_SetConfig+0xb2>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);

 8007e76:	f7fe fd1b 	bl	80068b0 <HAL_RCC_GetPCLK1Freq>
 8007e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
 8007e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e82:	69db      	ldr	r3, [r3, #28]
 8007e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e88:	f040 810c 	bne.w	80080a4 <UART_SetConfig+0x2d8>
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
 8007e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	1891      	adds	r1, r2, r2
 8007ea4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ea6:	415b      	adcs	r3, r3
 8007ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007eae:	4621      	mov	r1, r4
 8007eb0:	eb12 0801 	adds.w	r8, r2, r1
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	eb43 0901 	adc.w	r9, r3, r1
 8007eba:	f04f 0200 	mov.w	r2, #0
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ece:	4690      	mov	r8, r2
 8007ed0:	4699      	mov	r9, r3
 8007ed2:	4623      	mov	r3, r4
 8007ed4:	eb18 0303 	adds.w	r3, r8, r3
 8007ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007edc:	462b      	mov	r3, r5
 8007ede:	eb49 0303 	adc.w	r3, r9, r3
 8007ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007efa:	460b      	mov	r3, r1
 8007efc:	18db      	adds	r3, r3, r3
 8007efe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f00:	4613      	mov	r3, r2
 8007f02:	eb42 0303 	adc.w	r3, r2, r3
 8007f06:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f10:	f7f8 fcbc 	bl	800088c <__aeabi_uldivmod>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4b61      	ldr	r3, [pc, #388]	@ (80080a0 <UART_SetConfig+0x2d4>)
 8007f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	011c      	lsls	r4, r3, #4
 8007f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	1891      	adds	r1, r2, r2
 8007f3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f3c:	415b      	adcs	r3, r3
 8007f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f44:	4641      	mov	r1, r8
 8007f46:	eb12 0a01 	adds.w	sl, r2, r1
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f64:	4692      	mov	sl, r2
 8007f66:	469b      	mov	fp, r3
 8007f68:	4643      	mov	r3, r8
 8007f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8007f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f72:	464b      	mov	r3, r9
 8007f74:	eb4b 0303 	adc.w	r3, fp, r3
 8007f78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f90:	460b      	mov	r3, r1
 8007f92:	18db      	adds	r3, r3, r3
 8007f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f96:	4613      	mov	r3, r2
 8007f98:	eb42 0303 	adc.w	r3, r2, r3
 8007f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007fa6:	f7f8 fc71 	bl	800088c <__aeabi_uldivmod>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	4b3b      	ldr	r3, [pc, #236]	@ (80080a0 <UART_SetConfig+0x2d4>)
 8007fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	2264      	movs	r2, #100	@ 0x64
 8007fba:	fb02 f303 	mul.w	r3, r2, r3
 8007fbe:	1acb      	subs	r3, r1, r3
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007fc6:	4b36      	ldr	r3, [pc, #216]	@ (80080a0 <UART_SetConfig+0x2d4>)
 8007fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007fd4:	441c      	add	r4, r3
 8007fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007fe8:	4642      	mov	r2, r8
 8007fea:	464b      	mov	r3, r9
 8007fec:	1891      	adds	r1, r2, r2
 8007fee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ff0:	415b      	adcs	r3, r3
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	1851      	adds	r1, r2, r1
 8007ffc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ffe:	4649      	mov	r1, r9
 8008000:	414b      	adcs	r3, r1
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
 8008004:	f04f 0200 	mov.w	r2, #0
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008010:	4659      	mov	r1, fp
 8008012:	00cb      	lsls	r3, r1, #3
 8008014:	4651      	mov	r1, sl
 8008016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800801a:	4651      	mov	r1, sl
 800801c:	00ca      	lsls	r2, r1, #3
 800801e:	4610      	mov	r0, r2
 8008020:	4619      	mov	r1, r3
 8008022:	4603      	mov	r3, r0
 8008024:	4642      	mov	r2, r8
 8008026:	189b      	adds	r3, r3, r2
 8008028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800802c:	464b      	mov	r3, r9
 800802e:	460a      	mov	r2, r1
 8008030:	eb42 0303 	adc.w	r3, r2, r3
 8008034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008044:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800804c:	460b      	mov	r3, r1
 800804e:	18db      	adds	r3, r3, r3
 8008050:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008052:	4613      	mov	r3, r2
 8008054:	eb42 0303 	adc.w	r3, r2, r3
 8008058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800805a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800805e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008062:	f7f8 fc13 	bl	800088c <__aeabi_uldivmod>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4b0d      	ldr	r3, [pc, #52]	@ (80080a0 <UART_SetConfig+0x2d4>)
 800806c:	fba3 1302 	umull	r1, r3, r3, r2
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	2164      	movs	r1, #100	@ 0x64
 8008074:	fb01 f303 	mul.w	r3, r1, r3
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	3332      	adds	r3, #50	@ 0x32
 800807e:	4a08      	ldr	r2, [pc, #32]	@ (80080a0 <UART_SetConfig+0x2d4>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	095b      	lsrs	r3, r3, #5
 8008086:	f003 0207 	and.w	r2, r3, #7
 800808a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4422      	add	r2, r4
 8008092:	609a      	str	r2, [r3, #8]
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
 8008094:	e106      	b.n	80082a4 <UART_SetConfig+0x4d8>
 8008096:	bf00      	nop
 8008098:	40011000 	.word	0x40011000
 800809c:	40011400 	.word	0x40011400
 80080a0:	51eb851f 	.word	0x51eb851f
  MODIFY_REG(huart->Instance->CR1,
 80080a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80080ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80080b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80080b6:	4642      	mov	r2, r8
 80080b8:	464b      	mov	r3, r9
 80080ba:	1891      	adds	r1, r2, r2
 80080bc:	6239      	str	r1, [r7, #32]
 80080be:	415b      	adcs	r3, r3
 80080c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80080c6:	4641      	mov	r1, r8
 80080c8:	1854      	adds	r4, r2, r1
 80080ca:	4649      	mov	r1, r9
 80080cc:	eb43 0501 	adc.w	r5, r3, r1
 80080d0:	f04f 0200 	mov.w	r2, #0
 80080d4:	f04f 0300 	mov.w	r3, #0
 80080d8:	00eb      	lsls	r3, r5, #3
 80080da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080de:	00e2      	lsls	r2, r4, #3
 80080e0:	4614      	mov	r4, r2
 80080e2:	461d      	mov	r5, r3
 80080e4:	4643      	mov	r3, r8
 80080e6:	18e3      	adds	r3, r4, r3
 80080e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080ec:	464b      	mov	r3, r9
 80080ee:	eb45 0303 	adc.w	r3, r5, r3
 80080f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008102:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	f04f 0300 	mov.w	r3, #0
 800810e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008112:	4629      	mov	r1, r5
 8008114:	008b      	lsls	r3, r1, #2
 8008116:	4621      	mov	r1, r4
 8008118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800811c:	4621      	mov	r1, r4
 800811e:	008a      	lsls	r2, r1, #2
 8008120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008124:	f7f8 fbb2 	bl	800088c <__aeabi_uldivmod>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4b60      	ldr	r3, [pc, #384]	@ (80082b0 <UART_SetConfig+0x4e4>)
 800812e:	fba3 2302 	umull	r2, r3, r3, r2
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	011c      	lsls	r4, r3, #4
 8008136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800813a:	2200      	movs	r2, #0
 800813c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008140:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008148:	4642      	mov	r2, r8
 800814a:	464b      	mov	r3, r9
 800814c:	1891      	adds	r1, r2, r2
 800814e:	61b9      	str	r1, [r7, #24]
 8008150:	415b      	adcs	r3, r3
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008158:	4641      	mov	r1, r8
 800815a:	1851      	adds	r1, r2, r1
 800815c:	6139      	str	r1, [r7, #16]
 800815e:	4649      	mov	r1, r9
 8008160:	414b      	adcs	r3, r1
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008170:	4659      	mov	r1, fp
 8008172:	00cb      	lsls	r3, r1, #3
 8008174:	4651      	mov	r1, sl
 8008176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800817a:	4651      	mov	r1, sl
 800817c:	00ca      	lsls	r2, r1, #3
 800817e:	4610      	mov	r0, r2
 8008180:	4619      	mov	r1, r3
 8008182:	4603      	mov	r3, r0
 8008184:	4642      	mov	r2, r8
 8008186:	189b      	adds	r3, r3, r2
 8008188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800818c:	464b      	mov	r3, r9
 800818e:	460a      	mov	r2, r1
 8008190:	eb42 0303 	adc.w	r3, r2, r3
 8008194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	f04f 0300 	mov.w	r3, #0
 80081ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80081b0:	4649      	mov	r1, r9
 80081b2:	008b      	lsls	r3, r1, #2
 80081b4:	4641      	mov	r1, r8
 80081b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081ba:	4641      	mov	r1, r8
 80081bc:	008a      	lsls	r2, r1, #2
 80081be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80081c2:	f7f8 fb63 	bl	800088c <__aeabi_uldivmod>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	4b38      	ldr	r3, [pc, #224]	@ (80082b0 <UART_SetConfig+0x4e4>)
 80081ce:	fba3 2301 	umull	r2, r3, r3, r1
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	2264      	movs	r2, #100	@ 0x64
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
 80081da:	1acb      	subs	r3, r1, r3
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	3332      	adds	r3, #50	@ 0x32
 80081e0:	4a33      	ldr	r2, [pc, #204]	@ (80082b0 <UART_SetConfig+0x4e4>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081ec:	441c      	add	r4, r3
 80081ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081f2:	2200      	movs	r2, #0
 80081f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80081f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80081f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081fc:	4642      	mov	r2, r8
 80081fe:	464b      	mov	r3, r9
 8008200:	1891      	adds	r1, r2, r2
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	415b      	adcs	r3, r3
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800820c:	4641      	mov	r1, r8
 800820e:	1851      	adds	r1, r2, r1
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	4649      	mov	r1, r9
 8008214:	414b      	adcs	r3, r1
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008224:	4659      	mov	r1, fp
 8008226:	00cb      	lsls	r3, r1, #3
 8008228:	4651      	mov	r1, sl
 800822a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800822e:	4651      	mov	r1, sl
 8008230:	00ca      	lsls	r2, r1, #3
 8008232:	4610      	mov	r0, r2
 8008234:	4619      	mov	r1, r3
 8008236:	4603      	mov	r3, r0
 8008238:	4642      	mov	r2, r8
 800823a:	189b      	adds	r3, r3, r2
 800823c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800823e:	464b      	mov	r3, r9
 8008240:	460a      	mov	r2, r1
 8008242:	eb42 0303 	adc.w	r3, r2, r3
 8008246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	663b      	str	r3, [r7, #96]	@ 0x60
 8008252:	667a      	str	r2, [r7, #100]	@ 0x64
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008260:	4649      	mov	r1, r9
 8008262:	008b      	lsls	r3, r1, #2
 8008264:	4641      	mov	r1, r8
 8008266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800826a:	4641      	mov	r1, r8
 800826c:	008a      	lsls	r2, r1, #2
 800826e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008272:	f7f8 fb0b 	bl	800088c <__aeabi_uldivmod>
 8008276:	4602      	mov	r2, r0
 8008278:	460b      	mov	r3, r1
 800827a:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <UART_SetConfig+0x4e4>)
 800827c:	fba3 1302 	umull	r1, r3, r3, r2
 8008280:	095b      	lsrs	r3, r3, #5
 8008282:	2164      	movs	r1, #100	@ 0x64
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	3332      	adds	r3, #50	@ 0x32
 800828e:	4a08      	ldr	r2, [pc, #32]	@ (80082b0 <UART_SetConfig+0x4e4>)
 8008290:	fba2 2303 	umull	r2, r3, r2, r3
 8008294:	095b      	lsrs	r3, r3, #5
 8008296:	f003 020f 	and.w	r2, r3, #15
 800829a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4422      	add	r2, r4
 80082a2:	609a      	str	r2, [r3, #8]
             tmpreg);
 80082a4:	bf00      	nop
 80082a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80082aa:	46bd      	mov	sp, r7
 80082ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082b0:	51eb851f 	.word	0x51eb851f

080082b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80082b8:	4904      	ldr	r1, [pc, #16]	@ (80082cc <MX_FATFS_Init+0x18>)
 80082ba:	4805      	ldr	r0, [pc, #20]	@ (80082d0 <MX_FATFS_Init+0x1c>)
 80082bc:	f003 f99e 	bl	800b5fc <FATFS_LinkDriver>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
 80082c4:	4b03      	ldr	r3, [pc, #12]	@ (80082d4 <MX_FATFS_Init+0x20>)
 80082c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80082c8:	bf00      	nop
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20002718 	.word	0x20002718
 80082d0:	2000007c 	.word	0x2000007c
 80082d4:	20002714 	.word	0x20002714

080082d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80082d8:	b480      	push	{r7}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80082dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80082de:	4618      	mov	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7f8 fe15 	bl	8000f24 <SD_disk_initialize>
 80082fa:	4603      	mov	r3, r0
 80082fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	4603      	mov	r3, r0
 800830e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	4618      	mov	r0, r3
 8008314:	f7f8 feec 	bl	80010f0 <SD_disk_status>
 8008318:	4603      	mov	r3, r0
 800831a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	603b      	str	r3, [r7, #0]
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8008334:	7bf8      	ldrb	r0, [r7, #15]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	f7f8 feee 	bl	800111c <SD_disk_read>
 8008340:	4603      	mov	r3, r0
 8008342:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800835c:	7bf8      	ldrb	r0, [r7, #15]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	68b9      	ldr	r1, [r7, #8]
 8008364:	f7f8 ff44 	bl	80011f0 <SD_disk_write>
 8008368:	4603      	mov	r3, r0
 800836a:	b2db      	uxtb	r3, r3

  /* USER CODE END WRITE */
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	4603      	mov	r3, r0
 800837c:	603a      	str	r2, [r7, #0]
 800837e:	71fb      	strb	r3, [r7, #7]
 8008380:	460b      	mov	r3, r1
 8008382:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	79b9      	ldrb	r1, [r7, #6]
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	f7f8 ffb4 	bl	80012f8 <SD_disk_ioctl>
 8008390:	4603      	mov	r3, r0
 8008392:	b2db      	uxtb	r3, r3

  /* USER CODE END IOCTL */
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	4a08      	ldr	r2, [pc, #32]	@ (80083cc <disk_status+0x30>)
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	79fa      	ldrb	r2, [r7, #7]
 80083b4:	4905      	ldr	r1, [pc, #20]	@ (80083cc <disk_status+0x30>)
 80083b6:	440a      	add	r2, r1
 80083b8:	7a12      	ldrb	r2, [r2, #8]
 80083ba:	4610      	mov	r0, r2
 80083bc:	4798      	blx	r3
 80083be:	4603      	mov	r3, r0
 80083c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20002944 	.word	0x20002944

080083d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	4a0e      	ldr	r2, [pc, #56]	@ (800841c <disk_initialize+0x4c>)
 80083e2:	5cd3      	ldrb	r3, [r2, r3]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d114      	bne.n	8008412 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	4a0c      	ldr	r2, [pc, #48]	@ (800841c <disk_initialize+0x4c>)
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	79fa      	ldrb	r2, [r7, #7]
 80083f6:	4909      	ldr	r1, [pc, #36]	@ (800841c <disk_initialize+0x4c>)
 80083f8:	440a      	add	r2, r1
 80083fa:	7a12      	ldrb	r2, [r2, #8]
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d103      	bne.n	8008412 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800840a:	79fb      	ldrb	r3, [r7, #7]
 800840c:	4a03      	ldr	r2, [pc, #12]	@ (800841c <disk_initialize+0x4c>)
 800840e:	2101      	movs	r1, #1
 8008410:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20002944 	.word	0x20002944

08008420 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008420:	b590      	push	{r4, r7, lr}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	607a      	str	r2, [r7, #4]
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4a0a      	ldr	r2, [pc, #40]	@ (800845c <disk_read+0x3c>)
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	689c      	ldr	r4, [r3, #8]
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	4a07      	ldr	r2, [pc, #28]	@ (800845c <disk_read+0x3c>)
 8008440:	4413      	add	r3, r2
 8008442:	7a18      	ldrb	r0, [r3, #8]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	47a0      	blx	r4
 800844c:	4603      	mov	r3, r0
 800844e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
}
 8008452:	4618      	mov	r0, r3
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd90      	pop	{r4, r7, pc}
 800845a:	bf00      	nop
 800845c:	20002944 	.word	0x20002944

08008460 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	4a0a      	ldr	r2, [pc, #40]	@ (800849c <disk_write+0x3c>)
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	68dc      	ldr	r4, [r3, #12]
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	4a07      	ldr	r2, [pc, #28]	@ (800849c <disk_write+0x3c>)
 8008480:	4413      	add	r3, r2
 8008482:	7a18      	ldrb	r0, [r3, #8]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	47a0      	blx	r4
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}
 800849a:	bf00      	nop
 800849c:	20002944 	.word	0x20002944

080084a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	603a      	str	r2, [r7, #0]
 80084aa:	71fb      	strb	r3, [r7, #7]
 80084ac:	460b      	mov	r3, r1
 80084ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80084b0:	79fb      	ldrb	r3, [r7, #7]
 80084b2:	4a09      	ldr	r2, [pc, #36]	@ (80084d8 <disk_ioctl+0x38>)
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	79fa      	ldrb	r2, [r7, #7]
 80084be:	4906      	ldr	r1, [pc, #24]	@ (80084d8 <disk_ioctl+0x38>)
 80084c0:	440a      	add	r2, r1
 80084c2:	7a10      	ldrb	r0, [r2, #8]
 80084c4:	79b9      	ldrb	r1, [r7, #6]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	4798      	blx	r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20002944 	.word	0x20002944

080084dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3301      	adds	r3, #1
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80084ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	b21a      	sxth	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	b21b      	sxth	r3, r3
 80084fa:	4313      	orrs	r3, r2
 80084fc:	b21b      	sxth	r3, r3
 80084fe:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008500:	89fb      	ldrh	r3, [r7, #14]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	3303      	adds	r3, #3
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	021b      	lsls	r3, r3, #8
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	3202      	adds	r2, #2
 8008526:	7812      	ldrb	r2, [r2, #0]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	3201      	adds	r2, #1
 8008534:	7812      	ldrb	r2, [r2, #0]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	7812      	ldrb	r2, [r2, #0]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]
	return rv;
 8008546:	68fb      	ldr	r3, [r7, #12]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	607a      	str	r2, [r7, #4]
 8008566:	887a      	ldrh	r2, [r7, #2]
 8008568:	b2d2      	uxtb	r2, r2
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	887b      	ldrh	r3, [r7, #2]
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	887a      	ldrh	r2, [r7, #2]
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	701a      	strb	r2, [r3, #0]
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	b2d2      	uxtb	r2, r2
 800859e:	701a      	strb	r2, [r3, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	0a1b      	lsrs	r3, r3, #8
 80085b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	b2d2      	uxtb	r2, r2
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	0a1b      	lsrs	r3, r3, #8
 80085c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	701a      	strb	r2, [r3, #0]
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80085e2:	b480      	push	{r7}
 80085e4:	b087      	sub	sp, #28
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	60b9      	str	r1, [r7, #8]
 80085ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00d      	beq.n	8008618 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	1c53      	adds	r3, r2, #1
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	1c59      	adds	r1, r3, #1
 8008606:	6179      	str	r1, [r7, #20]
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3b01      	subs	r3, #1
 8008610:	607b      	str	r3, [r7, #4]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1f1      	bne.n	80085fc <mem_cpy+0x1a>
	}
}
 8008618:	bf00      	nop
 800861a:	371c      	adds	r7, #28
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	617a      	str	r2, [r7, #20]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3b01      	subs	r3, #1
 8008644:	607b      	str	r3, [r7, #4]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1f3      	bne.n	8008634 <mem_set+0x10>
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800865a:	b480      	push	{r7}
 800865c:	b089      	sub	sp, #36	@ 0x24
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	61fa      	str	r2, [r7, #28]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4619      	mov	r1, r3
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	61ba      	str	r2, [r7, #24]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	1acb      	subs	r3, r1, r3
 8008686:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3b01      	subs	r3, #1
 800868c:	607b      	str	r3, [r7, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <mem_cmp+0x40>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0eb      	beq.n	8008672 <mem_cmp+0x18>

	return r;
 800869a:	697b      	ldr	r3, [r7, #20]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3724      	adds	r7, #36	@ 0x24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80086b2:	e002      	b.n	80086ba <chk_chr+0x12>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	3301      	adds	r3, #1
 80086b8:	607b      	str	r3, [r7, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <chk_chr+0x26>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d1f2      	bne.n	80086b4 <chk_chr+0xc>
	return *str;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	781b      	ldrb	r3, [r3, #0]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80086ea:	2300      	movs	r3, #0
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	e029      	b.n	8008748 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80086f4:	4a27      	ldr	r2, [pc, #156]	@ (8008794 <chk_lock+0xb4>)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	4413      	add	r3, r2
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01d      	beq.n	800873e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008702:	4a24      	ldr	r2, [pc, #144]	@ (8008794 <chk_lock+0xb4>)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	4413      	add	r3, r2
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d116      	bne.n	8008742 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008714:	4a1f      	ldr	r2, [pc, #124]	@ (8008794 <chk_lock+0xb4>)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	4413      	add	r3, r2
 800871c:	3304      	adds	r3, #4
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008724:	429a      	cmp	r2, r3
 8008726:	d10c      	bne.n	8008742 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008728:	4a1a      	ldr	r2, [pc, #104]	@ (8008794 <chk_lock+0xb4>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	4413      	add	r3, r2
 8008730:	3308      	adds	r3, #8
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008738:	429a      	cmp	r2, r3
 800873a:	d102      	bne.n	8008742 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800873c:	e007      	b.n	800874e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800873e:	2301      	movs	r3, #1
 8008740:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d9d2      	bls.n	80086f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d109      	bne.n	8008768 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <chk_lock+0x80>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b02      	cmp	r3, #2
 800875e:	d101      	bne.n	8008764 <chk_lock+0x84>
 8008760:	2300      	movs	r3, #0
 8008762:	e010      	b.n	8008786 <chk_lock+0xa6>
 8008764:	2312      	movs	r3, #18
 8008766:	e00e      	b.n	8008786 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d108      	bne.n	8008780 <chk_lock+0xa0>
 800876e:	4a09      	ldr	r2, [pc, #36]	@ (8008794 <chk_lock+0xb4>)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	4413      	add	r3, r2
 8008776:	330c      	adds	r3, #12
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800877e:	d101      	bne.n	8008784 <chk_lock+0xa4>
 8008780:	2310      	movs	r3, #16
 8008782:	e000      	b.n	8008786 <chk_lock+0xa6>
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	20002724 	.word	0x20002724

08008798 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800879e:	2300      	movs	r3, #0
 80087a0:	607b      	str	r3, [r7, #4]
 80087a2:	e002      	b.n	80087aa <enq_lock+0x12>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3301      	adds	r3, #1
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d806      	bhi.n	80087be <enq_lock+0x26>
 80087b0:	4a09      	ldr	r2, [pc, #36]	@ (80087d8 <enq_lock+0x40>)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	4413      	add	r3, r2
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f2      	bne.n	80087a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	bf14      	ite	ne
 80087c4:	2301      	movne	r3, #1
 80087c6:	2300      	moveq	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	20002724 	.word	0x20002724

080087dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	e01f      	b.n	800882c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80087ec:	4a41      	ldr	r2, [pc, #260]	@ (80088f4 <inc_lock+0x118>)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	4413      	add	r3, r2
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d113      	bne.n	8008826 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80087fe:	4a3d      	ldr	r2, [pc, #244]	@ (80088f4 <inc_lock+0x118>)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	4413      	add	r3, r2
 8008806:	3304      	adds	r3, #4
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800880e:	429a      	cmp	r2, r3
 8008810:	d109      	bne.n	8008826 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008812:	4a38      	ldr	r2, [pc, #224]	@ (80088f4 <inc_lock+0x118>)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	4413      	add	r3, r2
 800881a:	3308      	adds	r3, #8
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008822:	429a      	cmp	r2, r3
 8008824:	d006      	beq.n	8008834 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d9dc      	bls.n	80087ec <inc_lock+0x10>
 8008832:	e000      	b.n	8008836 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008834:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d132      	bne.n	80088a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800883c:	2300      	movs	r3, #0
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	e002      	b.n	8008848 <inc_lock+0x6c>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d806      	bhi.n	800885c <inc_lock+0x80>
 800884e:	4a29      	ldr	r2, [pc, #164]	@ (80088f4 <inc_lock+0x118>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	4413      	add	r3, r2
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1f2      	bne.n	8008842 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d101      	bne.n	8008866 <inc_lock+0x8a>
 8008862:	2300      	movs	r3, #0
 8008864:	e040      	b.n	80088e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	4922      	ldr	r1, [pc, #136]	@ (80088f4 <inc_lock+0x118>)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	440b      	add	r3, r1
 8008872:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	491e      	ldr	r1, [pc, #120]	@ (80088f4 <inc_lock+0x118>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	440b      	add	r3, r1
 8008880:	3304      	adds	r3, #4
 8008882:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	695a      	ldr	r2, [r3, #20]
 8008888:	491a      	ldr	r1, [pc, #104]	@ (80088f4 <inc_lock+0x118>)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	440b      	add	r3, r1
 8008890:	3308      	adds	r3, #8
 8008892:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008894:	4a17      	ldr	r2, [pc, #92]	@ (80088f4 <inc_lock+0x118>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	4413      	add	r3, r2
 800889c:	330c      	adds	r3, #12
 800889e:	2200      	movs	r2, #0
 80088a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d009      	beq.n	80088bc <inc_lock+0xe0>
 80088a8:	4a12      	ldr	r2, [pc, #72]	@ (80088f4 <inc_lock+0x118>)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	4413      	add	r3, r2
 80088b0:	330c      	adds	r3, #12
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <inc_lock+0xe0>
 80088b8:	2300      	movs	r3, #0
 80088ba:	e015      	b.n	80088e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d108      	bne.n	80088d4 <inc_lock+0xf8>
 80088c2:	4a0c      	ldr	r2, [pc, #48]	@ (80088f4 <inc_lock+0x118>)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	4413      	add	r3, r2
 80088ca:	330c      	adds	r3, #12
 80088cc:	881b      	ldrh	r3, [r3, #0]
 80088ce:	3301      	adds	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	e001      	b.n	80088d8 <inc_lock+0xfc>
 80088d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088d8:	4906      	ldr	r1, [pc, #24]	@ (80088f4 <inc_lock+0x118>)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	440b      	add	r3, r1
 80088e0:	330c      	adds	r3, #12
 80088e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	20002724 	.word	0x20002724

080088f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3b01      	subs	r3, #1
 8008904:	607b      	str	r3, [r7, #4]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d825      	bhi.n	8008958 <dec_lock+0x60>
		n = Files[i].ctr;
 800890c:	4a17      	ldr	r2, [pc, #92]	@ (800896c <dec_lock+0x74>)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	011b      	lsls	r3, r3, #4
 8008912:	4413      	add	r3, r2
 8008914:	330c      	adds	r3, #12
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800891a:	89fb      	ldrh	r3, [r7, #14]
 800891c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008920:	d101      	bne.n	8008926 <dec_lock+0x2e>
 8008922:	2300      	movs	r3, #0
 8008924:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008926:	89fb      	ldrh	r3, [r7, #14]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <dec_lock+0x3a>
 800892c:	89fb      	ldrh	r3, [r7, #14]
 800892e:	3b01      	subs	r3, #1
 8008930:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008932:	4a0e      	ldr	r2, [pc, #56]	@ (800896c <dec_lock+0x74>)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	4413      	add	r3, r2
 800893a:	330c      	adds	r3, #12
 800893c:	89fa      	ldrh	r2, [r7, #14]
 800893e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008940:	89fb      	ldrh	r3, [r7, #14]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <dec_lock+0x5a>
 8008946:	4a09      	ldr	r2, [pc, #36]	@ (800896c <dec_lock+0x74>)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	011b      	lsls	r3, r3, #4
 800894c:	4413      	add	r3, r2
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	737b      	strb	r3, [r7, #13]
 8008956:	e001      	b.n	800895c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008958:	2302      	movs	r3, #2
 800895a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800895c:	7b7b      	ldrb	r3, [r7, #13]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	20002724 	.word	0x20002724

08008970 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e010      	b.n	80089a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800897e:	4a0d      	ldr	r2, [pc, #52]	@ (80089b4 <clear_lock+0x44>)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	4413      	add	r3, r2
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d105      	bne.n	800899a <clear_lock+0x2a>
 800898e:	4a09      	ldr	r2, [pc, #36]	@ (80089b4 <clear_lock+0x44>)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	4413      	add	r3, r2
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3301      	adds	r3, #1
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d9eb      	bls.n	800897e <clear_lock+0xe>
	}
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	20002724 	.word	0x20002724

080089b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	78db      	ldrb	r3, [r3, #3]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d034      	beq.n	8008a36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7858      	ldrb	r0, [r3, #1]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80089dc:	2301      	movs	r3, #1
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	f7ff fd3e 	bl	8008460 <disk_write>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	73fb      	strb	r3, [r7, #15]
 80089ee:	e022      	b.n	8008a36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	1ad2      	subs	r2, r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d217      	bcs.n	8008a36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	789b      	ldrb	r3, [r3, #2]
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	e010      	b.n	8008a30 <sync_window+0x78>
					wsect += fs->fsize;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4413      	add	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	7858      	ldrb	r0, [r3, #1]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a22:	2301      	movs	r3, #1
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	f7ff fd1b 	bl	8008460 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d8eb      	bhi.n	8008a0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d01b      	beq.n	8008a90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff ffad 	bl	80089b8 <sync_window>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d113      	bne.n	8008a90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7858      	ldrb	r0, [r3, #1]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008a72:	2301      	movs	r3, #1
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	f7ff fcd3 	bl	8008420 <disk_read>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d004      	beq.n	8008a8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008a80:	f04f 33ff 	mov.w	r3, #4294967295
 8008a84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ff87 	bl	80089b8 <sync_window>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008aae:	7bfb      	ldrb	r3, [r7, #15]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d159      	bne.n	8008b68 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d149      	bne.n	8008b50 <sync_fs+0xb4>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d145      	bne.n	8008b50 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	899b      	ldrh	r3, [r3, #12]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	f7ff fda7 	bl	8008624 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3338      	adds	r3, #56	@ 0x38
 8008ada:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ade:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff fd36 	bl	8008554 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3338      	adds	r3, #56	@ 0x38
 8008aec:	4921      	ldr	r1, [pc, #132]	@ (8008b74 <sync_fs+0xd8>)
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fd4b 	bl	800858a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3338      	adds	r3, #56	@ 0x38
 8008af8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008afc:	491e      	ldr	r1, [pc, #120]	@ (8008b78 <sync_fs+0xdc>)
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fd43 	bl	800858a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3338      	adds	r3, #56	@ 0x38
 8008b08:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	4619      	mov	r1, r3
 8008b12:	4610      	mov	r0, r2
 8008b14:	f7ff fd39 	bl	800858a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3338      	adds	r3, #56	@ 0x38
 8008b1c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f7ff fd2f 	bl	800858a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	7858      	ldrb	r0, [r3, #1]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b44:	2301      	movs	r3, #1
 8008b46:	f7ff fc8b 	bl	8008460 <disk_write>
			fs->fsi_flag = 0;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	2200      	movs	r2, #0
 8008b56:	2100      	movs	r1, #0
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff fca1 	bl	80084a0 <disk_ioctl>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <sync_fs+0xcc>
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	41615252 	.word	0x41615252
 8008b78:	61417272 	.word	0x61417272

08008b7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	3b02      	subs	r3, #2
 8008b8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	3b02      	subs	r3, #2
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d301      	bcc.n	8008b9c <clust2sect+0x20>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e008      	b.n	8008bae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	895b      	ldrh	r3, [r3, #10]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	fb03 f202 	mul.w	r2, r3, r2
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bac:	4413      	add	r3, r2
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b086      	sub	sp, #24
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d904      	bls.n	8008bda <get_fat+0x20>
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d302      	bcc.n	8008be0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008bda:	2301      	movs	r3, #1
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	e0ba      	b.n	8008d56 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295
 8008be4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	f000 8082 	beq.w	8008cf4 <get_fat+0x13a>
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	f300 80a6 	bgt.w	8008d42 <get_fat+0x188>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d002      	beq.n	8008c00 <get_fat+0x46>
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d055      	beq.n	8008caa <get_fat+0xf0>
 8008bfe:	e0a0      	b.n	8008d42 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	085b      	lsrs	r3, r3, #1
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	899b      	ldrh	r3, [r3, #12]
 8008c16:	4619      	mov	r1, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c1e:	4413      	add	r3, r2
 8008c20:	4619      	mov	r1, r3
 8008c22:	6938      	ldr	r0, [r7, #16]
 8008c24:	f7ff ff0c 	bl	8008a40 <move_window>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f040 808c 	bne.w	8008d48 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	60fa      	str	r2, [r7, #12]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	8992      	ldrh	r2, [r2, #12]
 8008c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c3e:	fb01 f202 	mul.w	r2, r1, r2
 8008c42:	1a9b      	subs	r3, r3, r2
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4413      	add	r3, r2
 8008c48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	899b      	ldrh	r3, [r3, #12]
 8008c56:	4619      	mov	r1, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c5e:	4413      	add	r3, r2
 8008c60:	4619      	mov	r1, r3
 8008c62:	6938      	ldr	r0, [r7, #16]
 8008c64:	f7ff feec 	bl	8008a40 <move_window>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d16e      	bne.n	8008d4c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	899b      	ldrh	r3, [r3, #12]
 8008c72:	461a      	mov	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c7a:	fb01 f202 	mul.w	r2, r1, r2
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4413      	add	r3, r2
 8008c84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008c88:	021b      	lsls	r3, r3, #8
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <get_fat+0xe6>
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	091b      	lsrs	r3, r3, #4
 8008c9e:	e002      	b.n	8008ca6 <get_fat+0xec>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ca6:	617b      	str	r3, [r7, #20]
			break;
 8008ca8:	e055      	b.n	8008d56 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	899b      	ldrh	r3, [r3, #12]
 8008cb2:	085b      	lsrs	r3, r3, #1
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cbe:	4413      	add	r3, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6938      	ldr	r0, [r7, #16]
 8008cc4:	f7ff febc 	bl	8008a40 <move_window>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d140      	bne.n	8008d50 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	8992      	ldrh	r2, [r2, #12]
 8008cdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ce0:	fb00 f202 	mul.w	r2, r0, r2
 8008ce4:	1a9b      	subs	r3, r3, r2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff fbf7 	bl	80084dc <ld_word>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	617b      	str	r3, [r7, #20]
			break;
 8008cf2:	e030      	b.n	8008d56 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	899b      	ldrh	r3, [r3, #12]
 8008cfc:	089b      	lsrs	r3, r3, #2
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	4619      	mov	r1, r3
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d08:	4413      	add	r3, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6938      	ldr	r0, [r7, #16]
 8008d0e:	f7ff fe97 	bl	8008a40 <move_window>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11d      	bne.n	8008d54 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	8992      	ldrh	r2, [r2, #12]
 8008d26:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d2a:	fb00 f202 	mul.w	r2, r0, r2
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	440b      	add	r3, r1
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fbeb 	bl	800850e <ld_dword>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008d3e:	617b      	str	r3, [r7, #20]
			break;
 8008d40:	e009      	b.n	8008d56 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008d42:	2301      	movs	r3, #1
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e006      	b.n	8008d56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d48:	bf00      	nop
 8008d4a:	e004      	b.n	8008d56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d4c:	bf00      	nop
 8008d4e:	e002      	b.n	8008d56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d50:	bf00      	nop
 8008d52:	e000      	b.n	8008d56 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d54:	bf00      	nop
		}
	}

	return val;
 8008d56:	697b      	ldr	r3, [r7, #20]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b089      	sub	sp, #36	@ 0x24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	f240 8109 	bls.w	8008f8a <put_fat+0x22a>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	f080 8103 	bcs.w	8008f8a <put_fat+0x22a>
		switch (fs->fs_type) {
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	f000 80b6 	beq.w	8008efa <put_fat+0x19a>
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	f300 80fb 	bgt.w	8008f8a <put_fat+0x22a>
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d003      	beq.n	8008da0 <put_fat+0x40>
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	f000 8083 	beq.w	8008ea4 <put_fat+0x144>
 8008d9e:	e0f4      	b.n	8008f8a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	61bb      	str	r3, [r7, #24]
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	4413      	add	r3, r2
 8008dac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	899b      	ldrh	r3, [r3, #12]
 8008db6:	4619      	mov	r1, r3
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dbe:	4413      	add	r3, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7ff fe3c 	bl	8008a40 <move_window>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dcc:	7ffb      	ldrb	r3, [r7, #31]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f040 80d4 	bne.w	8008f7c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	61ba      	str	r2, [r7, #24]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	8992      	ldrh	r2, [r2, #12]
 8008de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008de8:	fb00 f202 	mul.w	r2, r0, r2
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	440b      	add	r3, r1
 8008df0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00d      	beq.n	8008e18 <put_fat+0xb8>
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	b25b      	sxtb	r3, r3
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	b25a      	sxtb	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	b25b      	sxtb	r3, r3
 8008e10:	4313      	orrs	r3, r2
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	e001      	b.n	8008e1c <put_fat+0xbc>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	899b      	ldrh	r3, [r3, #12]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e36:	4413      	add	r3, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff fe00 	bl	8008a40 <move_window>
 8008e40:	4603      	mov	r3, r0
 8008e42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e44:	7ffb      	ldrb	r3, [r7, #31]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 809a 	bne.w	8008f80 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	899b      	ldrh	r3, [r3, #12]
 8008e56:	461a      	mov	r2, r3
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e5e:	fb00 f202 	mul.w	r2, r0, r2
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	440b      	add	r3, r1
 8008e66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <put_fat+0x11a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	091b      	lsrs	r3, r3, #4
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	e00e      	b.n	8008e98 <put_fat+0x138>
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	b25b      	sxtb	r3, r3
 8008e80:	f023 030f 	bic.w	r3, r3, #15
 8008e84:	b25a      	sxtb	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	b25b      	sxtb	r3, r3
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	b25b      	sxtb	r3, r3
 8008e92:	4313      	orrs	r3, r2
 8008e94:	b25b      	sxtb	r3, r3
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	70da      	strb	r2, [r3, #3]
			break;
 8008ea2:	e072      	b.n	8008f8a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	899b      	ldrh	r3, [r3, #12]
 8008eac:	085b      	lsrs	r3, r3, #1
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eb8:	4413      	add	r3, r2
 8008eba:	4619      	mov	r1, r3
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fdbf 	bl	8008a40 <move_window>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ec6:	7ffb      	ldrb	r3, [r7, #31]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d15b      	bne.n	8008f84 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	8992      	ldrh	r2, [r2, #12]
 8008eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ede:	fb00 f202 	mul.w	r2, r0, r2
 8008ee2:	1a9b      	subs	r3, r3, r2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	b292      	uxth	r2, r2
 8008eea:	4611      	mov	r1, r2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff fb31 	bl	8008554 <st_word>
			fs->wflag = 1;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	70da      	strb	r2, [r3, #3]
			break;
 8008ef8:	e047      	b.n	8008f8a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	899b      	ldrh	r3, [r3, #12]
 8008f02:	089b      	lsrs	r3, r3, #2
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	4619      	mov	r1, r3
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f0e:	4413      	add	r3, r2
 8008f10:	4619      	mov	r1, r3
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff fd94 	bl	8008a40 <move_window>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f1c:	7ffb      	ldrb	r3, [r7, #31]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d132      	bne.n	8008f88 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	8992      	ldrh	r2, [r2, #12]
 8008f36:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f3a:	fb00 f202 	mul.w	r2, r0, r2
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	440b      	add	r3, r1
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fae3 	bl	800850e <ld_dword>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008f4e:	4323      	orrs	r3, r4
 8008f50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	8992      	ldrh	r2, [r2, #12]
 8008f60:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f64:	fb00 f202 	mul.w	r2, r0, r2
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff fb0b 	bl	800858a <st_dword>
			fs->wflag = 1;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	70da      	strb	r2, [r3, #3]
			break;
 8008f7a:	e006      	b.n	8008f8a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f7c:	bf00      	nop
 8008f7e:	e004      	b.n	8008f8a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f80:	bf00      	nop
 8008f82:	e002      	b.n	8008f8a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f84:	bf00      	nop
 8008f86:	e000      	b.n	8008f8a <put_fat+0x22a>
			if (res != FR_OK) break;
 8008f88:	bf00      	nop
		}
	}
	return res;
 8008f8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3724      	adds	r7, #36	@ 0x24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd90      	pop	{r4, r7, pc}

08008f94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d904      	bls.n	8008fba <remove_chain+0x26>
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d301      	bcc.n	8008fbe <remove_chain+0x2a>
 8008fba:	2302      	movs	r3, #2
 8008fbc:	e04b      	b.n	8009056 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00c      	beq.n	8008fde <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	69b8      	ldr	r0, [r7, #24]
 8008fcc:	f7ff fec8 	bl	8008d60 <put_fat>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008fd4:	7ffb      	ldrb	r3, [r7, #31]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <remove_chain+0x4a>
 8008fda:	7ffb      	ldrb	r3, [r7, #31]
 8008fdc:	e03b      	b.n	8009056 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f7ff fdea 	bl	8008bba <get_fat>
 8008fe6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d031      	beq.n	8009052 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <remove_chain+0x64>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e02e      	b.n	8009056 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d101      	bne.n	8009004 <remove_chain+0x70>
 8009000:	2301      	movs	r3, #1
 8009002:	e028      	b.n	8009056 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009004:	2200      	movs	r2, #0
 8009006:	68b9      	ldr	r1, [r7, #8]
 8009008:	69b8      	ldr	r0, [r7, #24]
 800900a:	f7ff fea9 	bl	8008d60 <put_fat>
 800900e:	4603      	mov	r3, r0
 8009010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009012:	7ffb      	ldrb	r3, [r7, #31]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <remove_chain+0x88>
 8009018:	7ffb      	ldrb	r3, [r7, #31]
 800901a:	e01c      	b.n	8009056 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	699a      	ldr	r2, [r3, #24]
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	69db      	ldr	r3, [r3, #28]
 8009024:	3b02      	subs	r3, #2
 8009026:	429a      	cmp	r2, r3
 8009028:	d20b      	bcs.n	8009042 <remove_chain+0xae>
			fs->free_clst++;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	791b      	ldrb	r3, [r3, #4]
 8009038:	f043 0301 	orr.w	r3, r3, #1
 800903c:	b2da      	uxtb	r2, r3
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	429a      	cmp	r2, r3
 800904e:	d3c6      	bcc.n	8008fde <remove_chain+0x4a>
 8009050:	e000      	b.n	8009054 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009052:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3720      	adds	r7, #32
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b088      	sub	sp, #32
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10d      	bne.n	8009090 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <create_chain+0x2c>
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	429a      	cmp	r2, r3
 8009088:	d31b      	bcc.n	80090c2 <create_chain+0x64>
 800908a:	2301      	movs	r3, #1
 800908c:	61bb      	str	r3, [r7, #24]
 800908e:	e018      	b.n	80090c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff fd91 	bl	8008bba <get_fat>
 8009098:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d801      	bhi.n	80090a4 <create_chain+0x46>
 80090a0:	2301      	movs	r3, #1
 80090a2:	e070      	b.n	8009186 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090aa:	d101      	bne.n	80090b0 <create_chain+0x52>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	e06a      	b.n	8009186 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d201      	bcs.n	80090be <create_chain+0x60>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	e063      	b.n	8009186 <create_chain+0x128>
		scl = clst;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	3301      	adds	r3, #1
 80090ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d307      	bcc.n	80090e6 <create_chain+0x88>
				ncl = 2;
 80090d6:	2302      	movs	r3, #2
 80090d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d901      	bls.n	80090e6 <create_chain+0x88>
 80090e2:	2300      	movs	r3, #0
 80090e4:	e04f      	b.n	8009186 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80090e6:	69f9      	ldr	r1, [r7, #28]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff fd66 	bl	8008bba <get_fat>
 80090ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00e      	beq.n	8009114 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d003      	beq.n	8009104 <create_chain+0xa6>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009102:	d101      	bne.n	8009108 <create_chain+0xaa>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	e03e      	b.n	8009186 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	429a      	cmp	r2, r3
 800910e:	d1da      	bne.n	80090c6 <create_chain+0x68>
 8009110:	2300      	movs	r3, #0
 8009112:	e038      	b.n	8009186 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009114:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009116:	f04f 32ff 	mov.w	r2, #4294967295
 800911a:	69f9      	ldr	r1, [r7, #28]
 800911c:	6938      	ldr	r0, [r7, #16]
 800911e:	f7ff fe1f 	bl	8008d60 <put_fat>
 8009122:	4603      	mov	r3, r0
 8009124:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d109      	bne.n	8009140 <create_chain+0xe2>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6938      	ldr	r0, [r7, #16]
 8009138:	f7ff fe12 	bl	8008d60 <put_fat>
 800913c:	4603      	mov	r3, r0
 800913e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d116      	bne.n	8009174 <create_chain+0x116>
		fs->last_clst = ncl;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	3b02      	subs	r3, #2
 8009156:	429a      	cmp	r2, r3
 8009158:	d804      	bhi.n	8009164 <create_chain+0x106>
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	1e5a      	subs	r2, r3, #1
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	791b      	ldrb	r3, [r3, #4]
 8009168:	f043 0301 	orr.w	r3, r3, #1
 800916c:	b2da      	uxtb	r2, r3
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	711a      	strb	r2, [r3, #4]
 8009172:	e007      	b.n	8009184 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d102      	bne.n	8009180 <create_chain+0x122>
 800917a:	f04f 33ff 	mov.w	r3, #4294967295
 800917e:	e000      	b.n	8009182 <create_chain+0x124>
 8009180:	2301      	movs	r3, #1
 8009182:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009184:	69fb      	ldr	r3, [r7, #28]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800918e:	b480      	push	{r7}
 8009190:	b087      	sub	sp, #28
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a2:	3304      	adds	r3, #4
 80091a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	899b      	ldrh	r3, [r3, #12]
 80091aa:	461a      	mov	r2, r3
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	8952      	ldrh	r2, [r2, #10]
 80091b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80091ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	1d1a      	adds	r2, r3, #4
 80091c0:	613a      	str	r2, [r7, #16]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <clmt_clust+0x42>
 80091cc:	2300      	movs	r3, #0
 80091ce:	e010      	b.n	80091f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d307      	bcc.n	80091e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	617b      	str	r3, [r7, #20]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	3304      	adds	r3, #4
 80091e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80091e6:	e7e9      	b.n	80091bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80091e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	4413      	add	r3, r2
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009214:	d204      	bcs.n	8009220 <dir_sdi+0x22>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	f003 031f 	and.w	r3, r3, #31
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009220:	2302      	movs	r3, #2
 8009222:	e071      	b.n	8009308 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <dir_sdi+0x46>
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d902      	bls.n	8009244 <dir_sdi+0x46>
		clst = fs->dirbase;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009242:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10c      	bne.n	8009264 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	8912      	ldrh	r2, [r2, #8]
 8009252:	4293      	cmp	r3, r2
 8009254:	d301      	bcc.n	800925a <dir_sdi+0x5c>
 8009256:	2302      	movs	r3, #2
 8009258:	e056      	b.n	8009308 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	61da      	str	r2, [r3, #28]
 8009262:	e02d      	b.n	80092c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	895b      	ldrh	r3, [r3, #10]
 8009268:	461a      	mov	r2, r3
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	899b      	ldrh	r3, [r3, #12]
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009274:	e019      	b.n	80092aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6979      	ldr	r1, [r7, #20]
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff fc9d 	bl	8008bba <get_fat>
 8009280:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009288:	d101      	bne.n	800928e <dir_sdi+0x90>
 800928a:	2301      	movs	r3, #1
 800928c:	e03c      	b.n	8009308 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d904      	bls.n	800929e <dir_sdi+0xa0>
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	429a      	cmp	r2, r3
 800929c:	d301      	bcc.n	80092a2 <dir_sdi+0xa4>
 800929e:	2302      	movs	r3, #2
 80092a0:	e032      	b.n	8009308 <dir_sdi+0x10a>
			ofs -= csz;
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d2e1      	bcs.n	8009276 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80092b2:	6979      	ldr	r1, [r7, #20]
 80092b4:	6938      	ldr	r0, [r7, #16]
 80092b6:	f7ff fc61 	bl	8008b7c <clust2sect>
 80092ba:	4602      	mov	r2, r0
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <dir_sdi+0xd4>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e01a      	b.n	8009308 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	69da      	ldr	r2, [r3, #28]
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	899b      	ldrh	r3, [r3, #12]
 80092da:	4619      	mov	r1, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	fbb3 f3f1 	udiv	r3, r3, r1
 80092e2:	441a      	add	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	899b      	ldrh	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80092fa:	fb00 f202 	mul.w	r2, r0, r2
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	18ca      	adds	r2, r1, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	3320      	adds	r3, #32
 8009326:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <dir_next+0x28>
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009336:	d301      	bcc.n	800933c <dir_next+0x2c>
 8009338:	2304      	movs	r3, #4
 800933a:	e0bb      	b.n	80094b4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	899b      	ldrh	r3, [r3, #12]
 8009340:	461a      	mov	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	fbb3 f1f2 	udiv	r1, r3, r2
 8009348:	fb01 f202 	mul.w	r2, r1, r2
 800934c:	1a9b      	subs	r3, r3, r2
 800934e:	2b00      	cmp	r3, #0
 8009350:	f040 809d 	bne.w	800948e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10b      	bne.n	800937e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	095b      	lsrs	r3, r3, #5
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	8912      	ldrh	r2, [r2, #8]
 800936e:	4293      	cmp	r3, r2
 8009370:	f0c0 808d 	bcc.w	800948e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	61da      	str	r2, [r3, #28]
 800937a:	2304      	movs	r3, #4
 800937c:	e09a      	b.n	80094b4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	899b      	ldrh	r3, [r3, #12]
 8009382:	461a      	mov	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	fbb3 f3f2 	udiv	r3, r3, r2
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	8952      	ldrh	r2, [r2, #10]
 800938e:	3a01      	subs	r2, #1
 8009390:	4013      	ands	r3, r2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d17b      	bne.n	800948e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7ff fc0b 	bl	8008bba <get_fat>
 80093a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d801      	bhi.n	80093b0 <dir_next+0xa0>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e081      	b.n	80094b4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b6:	d101      	bne.n	80093bc <dir_next+0xac>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e07b      	b.n	80094b4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d359      	bcc.n	800947a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	61da      	str	r2, [r3, #28]
 80093d2:	2304      	movs	r3, #4
 80093d4:	e06e      	b.n	80094b4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f7ff fe3d 	bl	800905e <create_chain>
 80093e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <dir_next+0xe0>
 80093ec:	2307      	movs	r3, #7
 80093ee:	e061      	b.n	80094b4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <dir_next+0xea>
 80093f6:	2302      	movs	r3, #2
 80093f8:	e05c      	b.n	80094b4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009400:	d101      	bne.n	8009406 <dir_next+0xf6>
 8009402:	2301      	movs	r3, #1
 8009404:	e056      	b.n	80094b4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7ff fad6 	bl	80089b8 <sync_window>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <dir_next+0x106>
 8009412:	2301      	movs	r3, #1
 8009414:	e04e      	b.n	80094b4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	899b      	ldrh	r3, [r3, #12]
 8009420:	461a      	mov	r2, r3
 8009422:	2100      	movs	r1, #0
 8009424:	f7ff f8fe 	bl	8008624 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]
 800942c:	6979      	ldr	r1, [r7, #20]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff fba4 	bl	8008b7c <clust2sect>
 8009434:	4602      	mov	r2, r0
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	635a      	str	r2, [r3, #52]	@ 0x34
 800943a:	e012      	b.n	8009462 <dir_next+0x152>
						fs->wflag = 1;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2201      	movs	r2, #1
 8009440:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f7ff fab8 	bl	80089b8 <sync_window>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <dir_next+0x142>
 800944e:	2301      	movs	r3, #1
 8009450:	e030      	b.n	80094b4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	3301      	adds	r3, #1
 8009456:	613b      	str	r3, [r7, #16]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	635a      	str	r2, [r3, #52]	@ 0x34
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	895b      	ldrh	r3, [r3, #10]
 8009466:	461a      	mov	r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4293      	cmp	r3, r2
 800946c:	d3e6      	bcc.n	800943c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	1ad2      	subs	r2, r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009480:	6979      	ldr	r1, [r7, #20]
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f7ff fb7a 	bl	8008b7c <clust2sect>
 8009488:	4602      	mov	r2, r0
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	899b      	ldrh	r3, [r3, #12]
 800949e:	461a      	mov	r2, r3
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80094a6:	fb00 f202 	mul.w	r2, r0, r2
 80094aa:	1a9b      	subs	r3, r3, r2
 80094ac:	18ca      	adds	r2, r1, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80094cc:	2100      	movs	r1, #0
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7ff fe95 	bl	80091fe <dir_sdi>
 80094d4:	4603      	mov	r3, r0
 80094d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d12b      	bne.n	8009536 <dir_alloc+0x7a>
		n = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	4619      	mov	r1, r3
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7ff faa9 	bl	8008a40 <move_window>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d11d      	bne.n	8009534 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2be5      	cmp	r3, #229	@ 0xe5
 8009500:	d004      	beq.n	800950c <dir_alloc+0x50>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d107      	bne.n	800951c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3301      	adds	r3, #1
 8009510:	613b      	str	r3, [r7, #16]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d102      	bne.n	8009520 <dir_alloc+0x64>
 800951a:	e00c      	b.n	8009536 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800951c:	2300      	movs	r3, #0
 800951e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009520:	2101      	movs	r1, #1
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fef4 	bl	8009310 <dir_next>
 8009528:	4603      	mov	r3, r0
 800952a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0d7      	beq.n	80094e2 <dir_alloc+0x26>
 8009532:	e000      	b.n	8009536 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009534:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009536:	7dfb      	ldrb	r3, [r7, #23]
 8009538:	2b04      	cmp	r3, #4
 800953a:	d101      	bne.n	8009540 <dir_alloc+0x84>
 800953c:	2307      	movs	r3, #7
 800953e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009540:	7dfb      	ldrb	r3, [r7, #23]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	331a      	adds	r3, #26
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe ffbf 	bl	80084dc <ld_word>
 800955e:	4603      	mov	r3, r0
 8009560:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b03      	cmp	r3, #3
 8009568:	d109      	bne.n	800957e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	3314      	adds	r3, #20
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe ffb4 	bl	80084dc <ld_word>
 8009574:	4603      	mov	r3, r0
 8009576:	041b      	lsls	r3, r3, #16
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800957e:	68fb      	ldr	r3, [r7, #12]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	331a      	adds	r3, #26
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	b292      	uxth	r2, r2
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe ffd8 	bl	8008554 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d109      	bne.n	80095c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f103 0214 	add.w	r2, r3, #20
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	0c1b      	lsrs	r3, r3, #16
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7fe ffca 	bl	8008554 <st_word>
	}
}
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80095c8:	b590      	push	{r4, r7, lr}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	331a      	adds	r3, #26
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe ff80 	bl	80084dc <ld_word>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <cmp_lfn+0x1e>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e059      	b.n	800969a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095ee:	1e5a      	subs	r2, r3, #1
 80095f0:	4613      	mov	r3, r2
 80095f2:	005b      	lsls	r3, r3, #1
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80095fc:	2301      	movs	r3, #1
 80095fe:	81fb      	strh	r3, [r7, #14]
 8009600:	2300      	movs	r3, #0
 8009602:	613b      	str	r3, [r7, #16]
 8009604:	e033      	b.n	800966e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009606:	4a27      	ldr	r2, [pc, #156]	@ (80096a4 <cmp_lfn+0xdc>)
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	4413      	add	r3, r2
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	4413      	add	r3, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe ff61 	bl	80084dc <ld_word>
 800961a:	4603      	mov	r3, r0
 800961c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800961e:	89fb      	ldrh	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d01a      	beq.n	800965a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2bfe      	cmp	r3, #254	@ 0xfe
 8009628:	d812      	bhi.n	8009650 <cmp_lfn+0x88>
 800962a:	89bb      	ldrh	r3, [r7, #12]
 800962c:	4618      	mov	r0, r3
 800962e:	f002 f831 	bl	800b694 <ff_wtoupper>
 8009632:	4603      	mov	r3, r0
 8009634:	461c      	mov	r4, r3
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	617a      	str	r2, [r7, #20]
 800963c:	005b      	lsls	r3, r3, #1
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	4618      	mov	r0, r3
 8009646:	f002 f825 	bl	800b694 <ff_wtoupper>
 800964a:	4603      	mov	r3, r0
 800964c:	429c      	cmp	r4, r3
 800964e:	d001      	beq.n	8009654 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009650:	2300      	movs	r3, #0
 8009652:	e022      	b.n	800969a <cmp_lfn+0xd2>
			}
			wc = uc;
 8009654:	89bb      	ldrh	r3, [r7, #12]
 8009656:	81fb      	strh	r3, [r7, #14]
 8009658:	e006      	b.n	8009668 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800965a:	89bb      	ldrh	r3, [r7, #12]
 800965c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009660:	4293      	cmp	r3, r2
 8009662:	d001      	beq.n	8009668 <cmp_lfn+0xa0>
 8009664:	2300      	movs	r3, #0
 8009666:	e018      	b.n	800969a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	3301      	adds	r3, #1
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b0c      	cmp	r3, #12
 8009672:	d9c8      	bls.n	8009606 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <cmp_lfn+0xd0>
 8009680:	89fb      	ldrh	r3, [r7, #14]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d008      	beq.n	8009698 <cmp_lfn+0xd0>
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4413      	add	r3, r2
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <cmp_lfn+0xd0>
 8009694:	2300      	movs	r3, #0
 8009696:	e000      	b.n	800969a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009698:	2301      	movs	r3, #1
}
 800969a:	4618      	mov	r0, r3
 800969c:	371c      	adds	r7, #28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd90      	pop	{r4, r7, pc}
 80096a2:	bf00      	nop
 80096a4:	0800c3bc 	.word	0x0800c3bc

080096a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	460b      	mov	r3, r1
 80096b8:	71fb      	strb	r3, [r7, #7]
 80096ba:	4613      	mov	r3, r2
 80096bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	330d      	adds	r3, #13
 80096c2:	79ba      	ldrb	r2, [r7, #6]
 80096c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	330b      	adds	r3, #11
 80096ca:	220f      	movs	r2, #15
 80096cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	330c      	adds	r3, #12
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	331a      	adds	r3, #26
 80096da:	2100      	movs	r1, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fe ff39 	bl	8008554 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	1e5a      	subs	r2, r3, #1
 80096e6:	4613      	mov	r3, r2
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	82fb      	strh	r3, [r7, #22]
 80096f6:	2300      	movs	r3, #0
 80096f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80096fa:	8afb      	ldrh	r3, [r7, #22]
 80096fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009700:	4293      	cmp	r3, r2
 8009702:	d007      	beq.n	8009714 <put_lfn+0x6c>
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	61fa      	str	r2, [r7, #28]
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009714:	4a17      	ldr	r2, [pc, #92]	@ (8009774 <put_lfn+0xcc>)
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	4413      	add	r3, r2
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	4413      	add	r3, r2
 8009722:	8afa      	ldrh	r2, [r7, #22]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe ff14 	bl	8008554 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800972c:	8afb      	ldrh	r3, [r7, #22]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d102      	bne.n	8009738 <put_lfn+0x90>
 8009732:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009736:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	3301      	adds	r3, #1
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	2b0c      	cmp	r3, #12
 8009742:	d9da      	bls.n	80096fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009744:	8afb      	ldrh	r3, [r7, #22]
 8009746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800974a:	4293      	cmp	r3, r2
 800974c:	d006      	beq.n	800975c <put_lfn+0xb4>
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d103      	bne.n	8009764 <put_lfn+0xbc>
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009762:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	79fa      	ldrb	r2, [r7, #7]
 8009768:	701a      	strb	r2, [r3, #0]
}
 800976a:	bf00      	nop
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	0800c3bc 	.word	0x0800c3bc

08009778 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08c      	sub	sp, #48	@ 0x30
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009786:	220b      	movs	r2, #11
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7fe ff29 	bl	80085e2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b05      	cmp	r3, #5
 8009794:	d92b      	bls.n	80097ee <gen_numname+0x76>
		sr = seq;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800979a:	e022      	b.n	80097e2 <gen_numname+0x6a>
			wc = *lfn++;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	1c9a      	adds	r2, r3, #2
 80097a0:	607a      	str	r2, [r7, #4]
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80097a6:	2300      	movs	r3, #0
 80097a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097aa:	e017      	b.n	80097dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	005a      	lsls	r2, r3, #1
 80097b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	4413      	add	r3, r2
 80097b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80097ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097bc:	085b      	lsrs	r3, r3, #1
 80097be:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <gen_numname+0x5e>
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80097d0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80097d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80097d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d8:	3301      	adds	r3, #1
 80097da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	2b0f      	cmp	r3, #15
 80097e0:	d9e4      	bls.n	80097ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1d8      	bne.n	800979c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80097ee:	2307      	movs	r3, #7
 80097f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	3330      	adds	r3, #48	@ 0x30
 80097fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8009802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009806:	2b39      	cmp	r3, #57	@ 0x39
 8009808:	d904      	bls.n	8009814 <gen_numname+0x9c>
 800980a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800980e:	3307      	adds	r3, #7
 8009810:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8009814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009816:	1e5a      	subs	r2, r3, #1
 8009818:	62ba      	str	r2, [r7, #40]	@ 0x28
 800981a:	3330      	adds	r3, #48	@ 0x30
 800981c:	443b      	add	r3, r7
 800981e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009822:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	091b      	lsrs	r3, r3, #4
 800982a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1df      	bne.n	80097f2 <gen_numname+0x7a>
	ns[i] = '~';
 8009832:	f107 0214 	add.w	r2, r7, #20
 8009836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009838:	4413      	add	r3, r2
 800983a:	227e      	movs	r2, #126	@ 0x7e
 800983c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800983e:	2300      	movs	r3, #0
 8009840:	627b      	str	r3, [r7, #36]	@ 0x24
 8009842:	e002      	b.n	800984a <gen_numname+0xd2>
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	3301      	adds	r3, #1
 8009848:	627b      	str	r3, [r7, #36]	@ 0x24
 800984a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	429a      	cmp	r2, r3
 8009850:	d205      	bcs.n	800985e <gen_numname+0xe6>
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	4413      	add	r3, r2
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b20      	cmp	r3, #32
 800985c:	d1f2      	bne.n	8009844 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800985e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009860:	2b07      	cmp	r3, #7
 8009862:	d807      	bhi.n	8009874 <gen_numname+0xfc>
 8009864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	62ba      	str	r2, [r7, #40]	@ 0x28
 800986a:	3330      	adds	r3, #48	@ 0x30
 800986c:	443b      	add	r3, r7
 800986e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009872:	e000      	b.n	8009876 <gen_numname+0xfe>
 8009874:	2120      	movs	r1, #32
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	627a      	str	r2, [r7, #36]	@ 0x24
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	460a      	mov	r2, r1
 8009882:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	2b07      	cmp	r3, #7
 8009888:	d9e9      	bls.n	800985e <gen_numname+0xe6>
}
 800988a:	bf00      	nop
 800988c:	bf00      	nop
 800988e:	3730      	adds	r7, #48	@ 0x30
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80098a0:	230b      	movs	r3, #11
 80098a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	0852      	lsrs	r2, r2, #1
 80098aa:	01db      	lsls	r3, r3, #7
 80098ac:	4313      	orrs	r3, r2
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	1c59      	adds	r1, r3, #1
 80098b4:	6079      	str	r1, [r7, #4]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	4413      	add	r3, r2
 80098ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3b01      	subs	r3, #1
 80098c0:	60bb      	str	r3, [r7, #8]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1ed      	bne.n	80098a4 <sum_sfn+0x10>
	return sum;
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b086      	sub	sp, #24
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80098e4:	2100      	movs	r1, #0
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff fc89 	bl	80091fe <dir_sdi>
 80098ec:	4603      	mov	r3, r0
 80098ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <dir_find+0x24>
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	e0a9      	b.n	8009a4e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80098fa:	23ff      	movs	r3, #255	@ 0xff
 80098fc:	753b      	strb	r3, [r7, #20]
 80098fe:	7d3b      	ldrb	r3, [r7, #20]
 8009900:	757b      	strb	r3, [r7, #21]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f04f 32ff 	mov.w	r2, #4294967295
 8009908:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	4619      	mov	r1, r3
 8009910:	6938      	ldr	r0, [r7, #16]
 8009912:	f7ff f895 	bl	8008a40 <move_window>
 8009916:	4603      	mov	r3, r0
 8009918:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	2b00      	cmp	r3, #0
 800991e:	f040 8090 	bne.w	8009a42 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800992a:	7dbb      	ldrb	r3, [r7, #22]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <dir_find+0x60>
 8009930:	2304      	movs	r3, #4
 8009932:	75fb      	strb	r3, [r7, #23]
 8009934:	e08a      	b.n	8009a4c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	330b      	adds	r3, #11
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009942:	73fb      	strb	r3, [r7, #15]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	7bfa      	ldrb	r2, [r7, #15]
 8009948:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800994a:	7dbb      	ldrb	r3, [r7, #22]
 800994c:	2be5      	cmp	r3, #229	@ 0xe5
 800994e:	d007      	beq.n	8009960 <dir_find+0x8a>
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <dir_find+0x98>
 800995a:	7bfb      	ldrb	r3, [r7, #15]
 800995c:	2b0f      	cmp	r3, #15
 800995e:	d006      	beq.n	800996e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009960:	23ff      	movs	r3, #255	@ 0xff
 8009962:	757b      	strb	r3, [r7, #21]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f04f 32ff 	mov.w	r2, #4294967295
 800996a:	631a      	str	r2, [r3, #48]	@ 0x30
 800996c:	e05e      	b.n	8009a2c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	2b0f      	cmp	r3, #15
 8009972:	d136      	bne.n	80099e2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800997a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800997e:	2b00      	cmp	r3, #0
 8009980:	d154      	bne.n	8009a2c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009982:	7dbb      	ldrb	r3, [r7, #22]
 8009984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00d      	beq.n	80099a8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	7b5b      	ldrb	r3, [r3, #13]
 8009992:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009994:	7dbb      	ldrb	r3, [r7, #22]
 8009996:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800999a:	75bb      	strb	r3, [r7, #22]
 800999c:	7dbb      	ldrb	r3, [r7, #22]
 800999e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	695a      	ldr	r2, [r3, #20]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80099a8:	7dba      	ldrb	r2, [r7, #22]
 80099aa:	7d7b      	ldrb	r3, [r7, #21]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d115      	bne.n	80099dc <dir_find+0x106>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	330d      	adds	r3, #13
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	7d3a      	ldrb	r2, [r7, #20]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d10e      	bne.n	80099dc <dir_find+0x106>
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	691a      	ldr	r2, [r3, #16]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f7ff fdfd 	bl	80095c8 <cmp_lfn>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <dir_find+0x106>
 80099d4:	7d7b      	ldrb	r3, [r7, #21]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	e000      	b.n	80099de <dir_find+0x108>
 80099dc:	23ff      	movs	r3, #255	@ 0xff
 80099de:	757b      	strb	r3, [r7, #21]
 80099e0:	e024      	b.n	8009a2c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80099e2:	7d7b      	ldrb	r3, [r7, #21]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d109      	bne.n	80099fc <dir_find+0x126>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff ff51 	bl	8009894 <sum_sfn>
 80099f2:	4603      	mov	r3, r0
 80099f4:	461a      	mov	r2, r3
 80099f6:	7d3b      	ldrb	r3, [r7, #20]
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d024      	beq.n	8009a46 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <dir_find+0x14a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a18      	ldr	r0, [r3, #32]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3324      	adds	r3, #36	@ 0x24
 8009a12:	220b      	movs	r2, #11
 8009a14:	4619      	mov	r1, r3
 8009a16:	f7fe fe20 	bl	800865a <mem_cmp>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d014      	beq.n	8009a4a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009a20:	23ff      	movs	r3, #255	@ 0xff
 8009a22:	757b      	strb	r3, [r7, #21]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fc6e 	bl	8009310 <dir_next>
 8009a34:	4603      	mov	r3, r0
 8009a36:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f43f af65 	beq.w	800990a <dir_find+0x34>
 8009a40:	e004      	b.n	8009a4c <dir_find+0x176>
		if (res != FR_OK) break;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009a4a:	bf00      	nop

	return res;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3718      	adds	r7, #24
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08c      	sub	sp, #48	@ 0x30
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009a6c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <dir_register+0x20>
 8009a74:	2306      	movs	r3, #6
 8009a76:	e0e0      	b.n	8009c3a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009a78:	2300      	movs	r3, #0
 8009a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a7c:	e002      	b.n	8009a84 <dir_register+0x2c>
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a80:	3301      	adds	r3, #1
 8009a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	691a      	ldr	r2, [r3, #16]
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	4413      	add	r3, r2
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f4      	bne.n	8009a7e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009a9a:	f107 030c 	add.w	r3, r7, #12
 8009a9e:	220c      	movs	r2, #12
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fd9e 	bl	80085e2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d032      	beq.n	8009b16 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2240      	movs	r2, #64	@ 0x40
 8009ab4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009ab8:	2301      	movs	r3, #1
 8009aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009abc:	e016      	b.n	8009aec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	691a      	ldr	r2, [r3, #16]
 8009ac8:	f107 010c 	add.w	r1, r7, #12
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	f7ff fe53 	bl	8009778 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff feff 	bl	80098d6 <dir_find>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8009ade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	3301      	adds	r3, #1
 8009aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aee:	2b63      	cmp	r3, #99	@ 0x63
 8009af0:	d9e5      	bls.n	8009abe <dir_register+0x66>
 8009af2:	e000      	b.n	8009af6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009af4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	2b64      	cmp	r3, #100	@ 0x64
 8009afa:	d101      	bne.n	8009b00 <dir_register+0xa8>
 8009afc:	2307      	movs	r3, #7
 8009afe:	e09c      	b.n	8009c3a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009b00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d002      	beq.n	8009b0e <dir_register+0xb6>
 8009b08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b0c:	e095      	b.n	8009c3a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009b0e:	7dfa      	ldrb	r2, [r7, #23]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <dir_register+0xd8>
 8009b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b22:	330c      	adds	r3, #12
 8009b24:	4a47      	ldr	r2, [pc, #284]	@ (8009c44 <dir_register+0x1ec>)
 8009b26:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	e000      	b.n	8009b32 <dir_register+0xda>
 8009b30:	2301      	movs	r3, #1
 8009b32:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009b34:	6a39      	ldr	r1, [r7, #32]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fcc0 	bl	80094bc <dir_alloc>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009b42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d148      	bne.n	8009bdc <dir_register+0x184>
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	623b      	str	r3, [r7, #32]
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d042      	beq.n	8009bdc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695a      	ldr	r2, [r3, #20]
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	015b      	lsls	r3, r3, #5
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff fb4b 	bl	80091fe <dir_sdi>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d132      	bne.n	8009bdc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3324      	adds	r3, #36	@ 0x24
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fe8a 	bl	8009894 <sum_sfn>
 8009b80:	4603      	mov	r3, r0
 8009b82:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	69f8      	ldr	r0, [r7, #28]
 8009b8c:	f7fe ff58 	bl	8008a40 <move_window>
 8009b90:	4603      	mov	r3, r0
 8009b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8009b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d11d      	bne.n	8009bda <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	6918      	ldr	r0, [r3, #16]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a19      	ldr	r1, [r3, #32]
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	7efb      	ldrb	r3, [r7, #27]
 8009bac:	f7ff fd7c 	bl	80096a8 <put_lfn>
				fs->wflag = 1;
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff fba9 	bl	8009310 <dir_next>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8009bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d107      	bne.n	8009bdc <dir_register+0x184>
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	623b      	str	r3, [r7, #32]
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1d5      	bne.n	8009b84 <dir_register+0x12c>
 8009bd8:	e000      	b.n	8009bdc <dir_register+0x184>
				if (res != FR_OK) break;
 8009bda:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d128      	bne.n	8009c36 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	4619      	mov	r1, r3
 8009bea:	69f8      	ldr	r0, [r7, #28]
 8009bec:	f7fe ff28 	bl	8008a40 <move_window>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d11b      	bne.n	8009c36 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	2220      	movs	r2, #32
 8009c04:	2100      	movs	r1, #0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fd0c 	bl	8008624 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a18      	ldr	r0, [r3, #32]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3324      	adds	r3, #36	@ 0x24
 8009c14:	220b      	movs	r2, #11
 8009c16:	4619      	mov	r1, r3
 8009c18:	f7fe fce3 	bl	80085e2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	330c      	adds	r3, #12
 8009c28:	f002 0218 	and.w	r2, r2, #24
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	2201      	movs	r2, #1
 8009c34:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3730      	adds	r7, #48	@ 0x30
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	4ec4ec4f 	.word	0x4ec4ec4f

08009c48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	@ 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	61ba      	str	r2, [r7, #24]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	4413      	add	r3, r2
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c78:	2b1f      	cmp	r3, #31
 8009c7a:	d940      	bls.n	8009cfe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009c80:	d006      	beq.n	8009c90 <create_name+0x48>
 8009c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c84:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c86:	d110      	bne.n	8009caa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009c88:	e002      	b.n	8009c90 <create_name+0x48>
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	4413      	add	r3, r2
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	2b2f      	cmp	r3, #47	@ 0x2f
 8009c9a:	d0f6      	beq.n	8009c8a <create_name+0x42>
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ca6:	d0f0      	beq.n	8009c8a <create_name+0x42>
			break;
 8009ca8:	e02a      	b.n	8009d00 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2bfe      	cmp	r3, #254	@ 0xfe
 8009cae:	d901      	bls.n	8009cb4 <create_name+0x6c>
 8009cb0:	2306      	movs	r3, #6
 8009cb2:	e17d      	b.n	8009fb0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009cb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009cba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 fcac 	bl	800b61c <ff_convert>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009cc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <create_name+0x8a>
 8009cce:	2306      	movs	r3, #6
 8009cd0:	e16e      	b.n	8009fb0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009cd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cd6:	d809      	bhi.n	8009cec <create_name+0xa4>
 8009cd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009cda:	4619      	mov	r1, r3
 8009cdc:	488d      	ldr	r0, [pc, #564]	@ (8009f14 <create_name+0x2cc>)
 8009cde:	f7fe fce3 	bl	80086a8 <chk_chr>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <create_name+0xa4>
 8009ce8:	2306      	movs	r3, #6
 8009cea:	e161      	b.n	8009fb0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	617a      	str	r2, [r7, #20]
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009cfa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009cfc:	e7b4      	b.n	8009c68 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009cfe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	441a      	add	r2, r3
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d0c:	2b1f      	cmp	r3, #31
 8009d0e:	d801      	bhi.n	8009d14 <create_name+0xcc>
 8009d10:	2304      	movs	r3, #4
 8009d12:	e000      	b.n	8009d16 <create_name+0xce>
 8009d14:	2300      	movs	r3, #0
 8009d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d1a:	e011      	b.n	8009d40 <create_name+0xf8>
		w = lfn[di - 1];
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009d22:	3b01      	subs	r3, #1
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8009d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	d002      	beq.n	8009d3a <create_name+0xf2>
 8009d34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d36:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d38:	d106      	bne.n	8009d48 <create_name+0x100>
		di--;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1ea      	bne.n	8009d1c <create_name+0xd4>
 8009d46:	e000      	b.n	8009d4a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009d48:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	4413      	add	r3, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <create_name+0x118>
 8009d5c:	2306      	movs	r3, #6
 8009d5e:	e127      	b.n	8009fb0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3324      	adds	r3, #36	@ 0x24
 8009d64:	220b      	movs	r2, #11
 8009d66:	2120      	movs	r1, #32
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe fc5b 	bl	8008624 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61bb      	str	r3, [r7, #24]
 8009d72:	e002      	b.n	8009d7a <create_name+0x132>
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	3301      	adds	r3, #1
 8009d78:	61bb      	str	r3, [r7, #24]
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d0f5      	beq.n	8009d74 <create_name+0x12c>
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d94:	d0ee      	beq.n	8009d74 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <create_name+0x168>
 8009d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009da0:	f043 0303 	orr.w	r3, r3, #3
 8009da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009da8:	e002      	b.n	8009db0 <create_name+0x168>
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <create_name+0x182>
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dc8:	d1ef      	bne.n	8009daa <create_name+0x162>

	i = b = 0; ni = 8;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	623b      	str	r3, [r7, #32]
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	61ba      	str	r2, [r7, #24]
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009de8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8090 	beq.w	8009f10 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009df0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009df2:	2b20      	cmp	r3, #32
 8009df4:	d006      	beq.n	8009e04 <create_name+0x1bc>
 8009df6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dfa:	d10a      	bne.n	8009e12 <create_name+0x1ca>
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d006      	beq.n	8009e12 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e08:	f043 0303 	orr.w	r3, r3, #3
 8009e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e10:	e07d      	b.n	8009f0e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009e12:	6a3a      	ldr	r2, [r7, #32]
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d203      	bcs.n	8009e22 <create_name+0x1da>
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d123      	bne.n	8009e6a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	2b0b      	cmp	r3, #11
 8009e26:	d106      	bne.n	8009e36 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009e28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e2c:	f043 0303 	orr.w	r3, r3, #3
 8009e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e34:	e075      	b.n	8009f22 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d005      	beq.n	8009e4a <create_name+0x202>
 8009e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e42:	f043 0303 	orr.w	r3, r3, #3
 8009e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d866      	bhi.n	8009f20 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	61bb      	str	r3, [r7, #24]
 8009e56:	2308      	movs	r3, #8
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	230b      	movs	r3, #11
 8009e5c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009e68:	e051      	b.n	8009f0e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009e6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e6e:	d914      	bls.n	8009e9a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009e70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e72:	2100      	movs	r1, #0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f001 fbd1 	bl	800b61c <ff_convert>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009e7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d004      	beq.n	8009e8e <create_name+0x246>
 8009e84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e86:	3b80      	subs	r3, #128	@ 0x80
 8009e88:	4a23      	ldr	r2, [pc, #140]	@ (8009f18 <create_name+0x2d0>)
 8009e8a:	5cd3      	ldrb	r3, [r2, r3]
 8009e8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e92:	f043 0302 	orr.w	r3, r3, #2
 8009e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009e9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d007      	beq.n	8009eb0 <create_name+0x268>
 8009ea0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	481d      	ldr	r0, [pc, #116]	@ (8009f1c <create_name+0x2d4>)
 8009ea6:	f7fe fbff 	bl	80086a8 <chk_chr>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009eb0:	235f      	movs	r3, #95	@ 0x5f
 8009eb2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eb8:	f043 0303 	orr.w	r3, r3, #3
 8009ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ec0:	e01b      	b.n	8009efa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009ec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ec4:	2b40      	cmp	r3, #64	@ 0x40
 8009ec6:	d909      	bls.n	8009edc <create_name+0x294>
 8009ec8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009eca:	2b5a      	cmp	r3, #90	@ 0x5a
 8009ecc:	d806      	bhi.n	8009edc <create_name+0x294>
					b |= 2;
 8009ece:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ed2:	f043 0302 	orr.w	r3, r3, #2
 8009ed6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009eda:	e00e      	b.n	8009efa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009edc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ede:	2b60      	cmp	r3, #96	@ 0x60
 8009ee0:	d90b      	bls.n	8009efa <create_name+0x2b2>
 8009ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ee4:	2b7a      	cmp	r3, #122	@ 0x7a
 8009ee6:	d808      	bhi.n	8009efa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009ef4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009ef6:	3b20      	subs	r3, #32
 8009ef8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	623a      	str	r2, [r7, #32]
 8009f00:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009f02:	b2d1      	uxtb	r1, r2
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	4413      	add	r3, r2
 8009f08:	460a      	mov	r2, r1
 8009f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009f0e:	e763      	b.n	8009dd8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009f10:	bf00      	nop
 8009f12:	e006      	b.n	8009f22 <create_name+0x2da>
 8009f14:	0800c2d4 	.word	0x0800c2d4
 8009f18:	0800c33c 	.word	0x0800c33c
 8009f1c:	0800c2e0 	.word	0x0800c2e0
			if (si > di) break;			/* No extension */
 8009f20:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009f28:	2be5      	cmp	r3, #229	@ 0xe5
 8009f2a:	d103      	bne.n	8009f34 <create_name+0x2ec>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2205      	movs	r2, #5
 8009f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	2b08      	cmp	r3, #8
 8009f38:	d104      	bne.n	8009f44 <create_name+0x2fc>
 8009f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009f44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f48:	f003 030c 	and.w	r3, r3, #12
 8009f4c:	2b0c      	cmp	r3, #12
 8009f4e:	d005      	beq.n	8009f5c <create_name+0x314>
 8009f50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f54:	f003 0303 	and.w	r3, r3, #3
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d105      	bne.n	8009f68 <create_name+0x320>
 8009f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f60:	f043 0302 	orr.w	r3, r3, #2
 8009f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d117      	bne.n	8009fa4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009f74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f78:	f003 0303 	and.w	r3, r3, #3
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d105      	bne.n	8009f8c <create_name+0x344>
 8009f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f84:	f043 0310 	orr.w	r3, r3, #16
 8009f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f90:	f003 030c 	and.w	r3, r3, #12
 8009f94:	2b04      	cmp	r3, #4
 8009f96:	d105      	bne.n	8009fa4 <create_name+0x35c>
 8009f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f9c:	f043 0308 	orr.w	r3, r3, #8
 8009fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009faa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8009fae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3728      	adds	r7, #40	@ 0x28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009fcc:	e002      	b.n	8009fd4 <follow_path+0x1c>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8009fda:	d0f8      	beq.n	8009fce <follow_path+0x16>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	2b5c      	cmp	r3, #92	@ 0x5c
 8009fe2:	d0f4      	beq.n	8009fce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2b1f      	cmp	r3, #31
 8009ff0:	d80a      	bhi.n	800a008 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2280      	movs	r2, #128	@ 0x80
 8009ff6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff f8fe 	bl	80091fe <dir_sdi>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]
 800a006:	e048      	b.n	800a09a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a008:	463b      	mov	r3, r7
 800a00a:	4619      	mov	r1, r3
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff fe1b 	bl	8009c48 <create_name>
 800a012:	4603      	mov	r3, r0
 800a014:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d139      	bne.n	800a090 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff fc5a 	bl	80098d6 <dir_find>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a02c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a034:	7dfb      	ldrb	r3, [r7, #23]
 800a036:	2b04      	cmp	r3, #4
 800a038:	d12c      	bne.n	800a094 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d127      	bne.n	800a094 <follow_path+0xdc>
 800a044:	2305      	movs	r3, #5
 800a046:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a048:	e024      	b.n	800a094 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b00      	cmp	r3, #0
 800a052:	d121      	bne.n	800a098 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	799b      	ldrb	r3, [r3, #6]
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a060:	2305      	movs	r3, #5
 800a062:	75fb      	strb	r3, [r7, #23]
 800a064:	e019      	b.n	800a09a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	8992      	ldrh	r2, [r2, #12]
 800a074:	fbb3 f0f2 	udiv	r0, r3, r2
 800a078:	fb00 f202 	mul.w	r2, r0, r2
 800a07c:	1a9b      	subs	r3, r3, r2
 800a07e:	440b      	add	r3, r1
 800a080:	4619      	mov	r1, r3
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff fa61 	bl	800954a <ld_clust>
 800a088:	4602      	mov	r2, r0
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a08e:	e7bb      	b.n	800a008 <follow_path+0x50>
			if (res != FR_OK) break;
 800a090:	bf00      	nop
 800a092:	e002      	b.n	800a09a <follow_path+0xe2>
				break;
 800a094:	bf00      	nop
 800a096:	e000      	b.n	800a09a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a098:	bf00      	nop
			}
		}
	}

	return res;
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d031      	beq.n	800a11e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	617b      	str	r3, [r7, #20]
 800a0c0:	e002      	b.n	800a0c8 <get_ldnumber+0x24>
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	617b      	str	r3, [r7, #20]
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b1f      	cmp	r3, #31
 800a0ce:	d903      	bls.n	800a0d8 <get_ldnumber+0x34>
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b3a      	cmp	r3, #58	@ 0x3a
 800a0d6:	d1f4      	bne.n	800a0c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b3a      	cmp	r3, #58	@ 0x3a
 800a0de:	d11c      	bne.n	800a11a <get_ldnumber+0x76>
			tp = *path;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	60fa      	str	r2, [r7, #12]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	3b30      	subs	r3, #48	@ 0x30
 800a0f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b09      	cmp	r3, #9
 800a0f6:	d80e      	bhi.n	800a116 <get_ldnumber+0x72>
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d10a      	bne.n	800a116 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d107      	bne.n	800a116 <get_ldnumber+0x72>
					vol = (int)i;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	3301      	adds	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	e002      	b.n	800a120 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a11a:	2300      	movs	r3, #0
 800a11c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a11e:	693b      	ldr	r3, [r7, #16]
}
 800a120:	4618      	mov	r0, r3
 800a122:	371c      	adds	r7, #28
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	70da      	strb	r2, [r3, #3]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7fe fc7a 	bl	8008a40 <move_window>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <check_fs+0x2a>
 800a152:	2304      	movs	r3, #4
 800a154:	e038      	b.n	800a1c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3338      	adds	r3, #56	@ 0x38
 800a15a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe f9bc 	bl	80084dc <ld_word>
 800a164:	4603      	mov	r3, r0
 800a166:	461a      	mov	r2, r3
 800a168:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d001      	beq.n	800a174 <check_fs+0x48>
 800a170:	2303      	movs	r3, #3
 800a172:	e029      	b.n	800a1c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a17a:	2be9      	cmp	r3, #233	@ 0xe9
 800a17c:	d009      	beq.n	800a192 <check_fs+0x66>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a184:	2beb      	cmp	r3, #235	@ 0xeb
 800a186:	d11e      	bne.n	800a1c6 <check_fs+0x9a>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a18e:	2b90      	cmp	r3, #144	@ 0x90
 800a190:	d119      	bne.n	800a1c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	3338      	adds	r3, #56	@ 0x38
 800a196:	3336      	adds	r3, #54	@ 0x36
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe f9b8 	bl	800850e <ld_dword>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a1a4:	4a0a      	ldr	r2, [pc, #40]	@ (800a1d0 <check_fs+0xa4>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d101      	bne.n	800a1ae <check_fs+0x82>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e00c      	b.n	800a1c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	3338      	adds	r3, #56	@ 0x38
 800a1b2:	3352      	adds	r3, #82	@ 0x52
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fe f9aa 	bl	800850e <ld_dword>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4a05      	ldr	r2, [pc, #20]	@ (800a1d4 <check_fs+0xa8>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d101      	bne.n	800a1c6 <check_fs+0x9a>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e000      	b.n	800a1c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a1c6:	2302      	movs	r3, #2
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	00544146 	.word	0x00544146
 800a1d4:	33544146 	.word	0x33544146

0800a1d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b096      	sub	sp, #88	@ 0x58
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff ff59 	bl	800a0a4 <get_ldnumber>
 800a1f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	da01      	bge.n	800a1fe <find_volume+0x26>
 800a1fa:	230b      	movs	r3, #11
 800a1fc:	e265      	b.n	800a6ca <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a1fe:	4a9f      	ldr	r2, [pc, #636]	@ (800a47c <find_volume+0x2a4>)
 800a200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a206:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <find_volume+0x3a>
 800a20e:	230c      	movs	r3, #12
 800a210:	e25b      	b.n	800a6ca <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a216:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01a      	beq.n	800a25e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22a:	785b      	ldrb	r3, [r3, #1]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fe f8b5 	bl	800839c <disk_status>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a238:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10c      	bne.n	800a25e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d007      	beq.n	800a25a <find_volume+0x82>
 800a24a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a256:	230a      	movs	r3, #10
 800a258:	e237      	b.n	800a6ca <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a25a:	2300      	movs	r3, #0
 800a25c:	e235      	b.n	800a6ca <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a266:	b2da      	uxtb	r2, r3
 800a268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	4618      	mov	r0, r3
 800a272:	f7fe f8ad 	bl	80083d0 <disk_initialize>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a27c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a288:	2303      	movs	r3, #3
 800a28a:	e21e      	b.n	800a6ca <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <find_volume+0xca>
 800a292:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a296:	f003 0304 	and.w	r3, r3, #4
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a29e:	230a      	movs	r3, #10
 800a2a0:	e213      	b.n	800a6ca <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a4:	7858      	ldrb	r0, [r3, #1]
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	2102      	movs	r1, #2
 800a2ae:	f7fe f8f7 	bl	80084a0 <disk_ioctl>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <find_volume+0xe4>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e206      	b.n	800a6ca <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2be:	899b      	ldrh	r3, [r3, #12]
 800a2c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c4:	d80d      	bhi.n	800a2e2 <find_volume+0x10a>
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c8:	899b      	ldrh	r3, [r3, #12]
 800a2ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2ce:	d308      	bcc.n	800a2e2 <find_volume+0x10a>
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	899b      	ldrh	r3, [r3, #12]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d8:	899b      	ldrh	r3, [r3, #12]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	4013      	ands	r3, r2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <find_volume+0x10e>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e1f1      	b.n	800a6ca <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a2ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a2ee:	f7ff ff1d 	bl	800a12c <check_fs>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a2f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d149      	bne.n	800a394 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a300:	2300      	movs	r3, #0
 800a302:	643b      	str	r3, [r7, #64]	@ 0x40
 800a304:	e01e      	b.n	800a344 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a308:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a30c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a30e:	011b      	lsls	r3, r3, #4
 800a310:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a314:	4413      	add	r3, r2
 800a316:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	3304      	adds	r3, #4
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d006      	beq.n	800a330 <find_volume+0x158>
 800a322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a324:	3308      	adds	r3, #8
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe f8f1 	bl	800850e <ld_dword>
 800a32c:	4602      	mov	r2, r0
 800a32e:	e000      	b.n	800a332 <find_volume+0x15a>
 800a330:	2200      	movs	r2, #0
 800a332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	3358      	adds	r3, #88	@ 0x58
 800a338:	443b      	add	r3, r7
 800a33a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a33e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a340:	3301      	adds	r3, #1
 800a342:	643b      	str	r3, [r7, #64]	@ 0x40
 800a344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a346:	2b03      	cmp	r3, #3
 800a348:	d9dd      	bls.n	800a306 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a34a:	2300      	movs	r3, #0
 800a34c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a34e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <find_volume+0x182>
 800a354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a356:	3b01      	subs	r3, #1
 800a358:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a35a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	3358      	adds	r3, #88	@ 0x58
 800a360:	443b      	add	r3, r7
 800a362:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a366:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d005      	beq.n	800a37a <find_volume+0x1a2>
 800a36e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a370:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a372:	f7ff fedb 	bl	800a12c <check_fs>
 800a376:	4603      	mov	r3, r0
 800a378:	e000      	b.n	800a37c <find_volume+0x1a4>
 800a37a:	2303      	movs	r3, #3
 800a37c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a380:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a384:	2b01      	cmp	r3, #1
 800a386:	d905      	bls.n	800a394 <find_volume+0x1bc>
 800a388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a38a:	3301      	adds	r3, #1
 800a38c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a390:	2b03      	cmp	r3, #3
 800a392:	d9e2      	bls.n	800a35a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a394:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d101      	bne.n	800a3a0 <find_volume+0x1c8>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e194      	b.n	800a6ca <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a3a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d901      	bls.n	800a3ac <find_volume+0x1d4>
 800a3a8:	230d      	movs	r3, #13
 800a3aa:	e18e      	b.n	800a6ca <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ae:	3338      	adds	r3, #56	@ 0x38
 800a3b0:	330b      	adds	r3, #11
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe f892 	bl	80084dc <ld_word>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3be:	899b      	ldrh	r3, [r3, #12]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d001      	beq.n	800a3c8 <find_volume+0x1f0>
 800a3c4:	230d      	movs	r3, #13
 800a3c6:	e180      	b.n	800a6ca <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	3338      	adds	r3, #56	@ 0x38
 800a3cc:	3316      	adds	r3, #22
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe f884 	bl	80084dc <ld_word>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a3d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d106      	bne.n	800a3ec <find_volume+0x214>
 800a3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e0:	3338      	adds	r3, #56	@ 0x38
 800a3e2:	3324      	adds	r3, #36	@ 0x24
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe f892 	bl	800850e <ld_dword>
 800a3ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3f0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fe:	789b      	ldrb	r3, [r3, #2]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d005      	beq.n	800a410 <find_volume+0x238>
 800a404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a406:	789b      	ldrb	r3, [r3, #2]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d001      	beq.n	800a410 <find_volume+0x238>
 800a40c:	230d      	movs	r3, #13
 800a40e:	e15c      	b.n	800a6ca <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	789b      	ldrb	r3, [r3, #2]
 800a414:	461a      	mov	r2, r3
 800a416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a418:	fb02 f303 	mul.w	r3, r2, r3
 800a41c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a424:	461a      	mov	r2, r3
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42c:	895b      	ldrh	r3, [r3, #10]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d008      	beq.n	800a444 <find_volume+0x26c>
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	895b      	ldrh	r3, [r3, #10]
 800a436:	461a      	mov	r2, r3
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	895b      	ldrh	r3, [r3, #10]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	4013      	ands	r3, r2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <find_volume+0x270>
 800a444:	230d      	movs	r3, #13
 800a446:	e140      	b.n	800a6ca <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44a:	3338      	adds	r3, #56	@ 0x38
 800a44c:	3311      	adds	r3, #17
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe f844 	bl	80084dc <ld_word>
 800a454:	4603      	mov	r3, r0
 800a456:	461a      	mov	r2, r3
 800a458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45e:	891b      	ldrh	r3, [r3, #8]
 800a460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a462:	8992      	ldrh	r2, [r2, #12]
 800a464:	0952      	lsrs	r2, r2, #5
 800a466:	b292      	uxth	r2, r2
 800a468:	fbb3 f1f2 	udiv	r1, r3, r2
 800a46c:	fb01 f202 	mul.w	r2, r1, r2
 800a470:	1a9b      	subs	r3, r3, r2
 800a472:	b29b      	uxth	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d003      	beq.n	800a480 <find_volume+0x2a8>
 800a478:	230d      	movs	r3, #13
 800a47a:	e126      	b.n	800a6ca <find_volume+0x4f2>
 800a47c:	2000271c 	.word	0x2000271c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	3338      	adds	r3, #56	@ 0x38
 800a484:	3313      	adds	r3, #19
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe f828 	bl	80084dc <ld_word>
 800a48c:	4603      	mov	r3, r0
 800a48e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <find_volume+0x2cc>
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	3338      	adds	r3, #56	@ 0x38
 800a49a:	3320      	adds	r3, #32
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe f836 	bl	800850e <ld_dword>
 800a4a2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	3338      	adds	r3, #56	@ 0x38
 800a4a8:	330e      	adds	r3, #14
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe f816 	bl	80084dc <ld_word>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a4b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d101      	bne.n	800a4be <find_volume+0x2e6>
 800a4ba:	230d      	movs	r3, #13
 800a4bc:	e105      	b.n	800a6ca <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a4be:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4c2:	4413      	add	r3, r2
 800a4c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4c6:	8911      	ldrh	r1, [r2, #8]
 800a4c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4ca:	8992      	ldrh	r2, [r2, #12]
 800a4cc:	0952      	lsrs	r2, r2, #5
 800a4ce:	b292      	uxth	r2, r2
 800a4d0:	fbb1 f2f2 	udiv	r2, r1, r2
 800a4d4:	b292      	uxth	r2, r2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a4da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d201      	bcs.n	800a4e6 <find_volume+0x30e>
 800a4e2:	230d      	movs	r3, #13
 800a4e4:	e0f1      	b.n	800a6ca <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a4e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4ee:	8952      	ldrh	r2, [r2, #10]
 800a4f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4f4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <find_volume+0x328>
 800a4fc:	230d      	movs	r3, #13
 800a4fe:	e0e4      	b.n	800a6ca <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a500:	2303      	movs	r3, #3
 800a502:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d802      	bhi.n	800a516 <find_volume+0x33e>
 800a510:	2302      	movs	r3, #2
 800a512:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d802      	bhi.n	800a526 <find_volume+0x34e>
 800a520:	2301      	movs	r3, #1
 800a522:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a528:	1c9a      	adds	r2, r3, #2
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a532:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a534:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a538:	441a      	add	r2, r3
 800a53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a53c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a53e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a542:	441a      	add	r2, r3
 800a544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a546:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d11e      	bne.n	800a58e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	3338      	adds	r3, #56	@ 0x38
 800a554:	332a      	adds	r3, #42	@ 0x2a
 800a556:	4618      	mov	r0, r3
 800a558:	f7fd ffc0 	bl	80084dc <ld_word>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <find_volume+0x38e>
 800a562:	230d      	movs	r3, #13
 800a564:	e0b1      	b.n	800a6ca <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	891b      	ldrh	r3, [r3, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <find_volume+0x39a>
 800a56e:	230d      	movs	r3, #13
 800a570:	e0ab      	b.n	800a6ca <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a574:	3338      	adds	r3, #56	@ 0x38
 800a576:	332c      	adds	r3, #44	@ 0x2c
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fd ffc8 	bl	800850e <ld_dword>
 800a57e:	4602      	mov	r2, r0
 800a580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a582:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a58c:	e01f      	b.n	800a5ce <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	891b      	ldrh	r3, [r3, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <find_volume+0x3c2>
 800a596:	230d      	movs	r3, #13
 800a598:	e097      	b.n	800a6ca <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5a0:	441a      	add	r2, r3
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a5a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d103      	bne.n	800a5b6 <find_volume+0x3de>
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	e00a      	b.n	800a5cc <find_volume+0x3f4>
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b8:	69da      	ldr	r2, [r3, #28]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4413      	add	r3, r2
 800a5c0:	085a      	lsrs	r2, r3, #1
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a5cc:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d0:	6a1a      	ldr	r2, [r3, #32]
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d4:	899b      	ldrh	r3, [r3, #12]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5da:	440b      	add	r3, r1
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a5e0:	8989      	ldrh	r1, [r1, #12]
 800a5e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d201      	bcs.n	800a5ee <find_volume+0x416>
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	e06d      	b.n	800a6ca <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f4:	619a      	str	r2, [r3, #24]
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f8:	699a      	ldr	r2, [r3, #24]
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	2280      	movs	r2, #128	@ 0x80
 800a602:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a604:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d149      	bne.n	800a6a0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	3338      	adds	r3, #56	@ 0x38
 800a610:	3330      	adds	r3, #48	@ 0x30
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd ff62 	bl	80084dc <ld_word>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d140      	bne.n	800a6a0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a61e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a620:	3301      	adds	r3, #1
 800a622:	4619      	mov	r1, r3
 800a624:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a626:	f7fe fa0b 	bl	8008a40 <move_window>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d137      	bne.n	800a6a0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a632:	2200      	movs	r2, #0
 800a634:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a638:	3338      	adds	r3, #56	@ 0x38
 800a63a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fd ff4c 	bl	80084dc <ld_word>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d127      	bne.n	800a6a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a652:	3338      	adds	r3, #56	@ 0x38
 800a654:	4618      	mov	r0, r3
 800a656:	f7fd ff5a 	bl	800850e <ld_dword>
 800a65a:	4603      	mov	r3, r0
 800a65c:	4a1d      	ldr	r2, [pc, #116]	@ (800a6d4 <find_volume+0x4fc>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d11e      	bne.n	800a6a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a664:	3338      	adds	r3, #56	@ 0x38
 800a666:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fd ff4f 	bl	800850e <ld_dword>
 800a670:	4603      	mov	r3, r0
 800a672:	4a19      	ldr	r2, [pc, #100]	@ (800a6d8 <find_volume+0x500>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d113      	bne.n	800a6a0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	3338      	adds	r3, #56	@ 0x38
 800a67c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a680:	4618      	mov	r0, r3
 800a682:	f7fd ff44 	bl	800850e <ld_dword>
 800a686:	4602      	mov	r2, r0
 800a688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68e:	3338      	adds	r3, #56	@ 0x38
 800a690:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a694:	4618      	mov	r0, r3
 800a696:	f7fd ff3a 	bl	800850e <ld_dword>
 800a69a:	4602      	mov	r2, r0
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a6a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a6dc <find_volume+0x504>)
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <find_volume+0x504>)
 800a6b2:	801a      	strh	r2, [r3, #0]
 800a6b4:	4b09      	ldr	r3, [pc, #36]	@ (800a6dc <find_volume+0x504>)
 800a6b6:	881a      	ldrh	r2, [r3, #0]
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6be:	4a08      	ldr	r2, [pc, #32]	@ (800a6e0 <find_volume+0x508>)
 800a6c0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a6c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a6c4:	f7fe f954 	bl	8008970 <clear_lock>
#endif
	return FR_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3758      	adds	r7, #88	@ 0x58
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	41615252 	.word	0x41615252
 800a6d8:	61417272 	.word	0x61417272
 800a6dc:	20002720 	.word	0x20002720
 800a6e0:	20002744 	.word	0x20002744

0800a6e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a6ee:	2309      	movs	r3, #9
 800a6f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d01c      	beq.n	800a732 <validate+0x4e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d018      	beq.n	800a732 <validate+0x4e>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d013      	beq.n	800a732 <validate+0x4e>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	889a      	ldrh	r2, [r3, #4]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	88db      	ldrh	r3, [r3, #6]
 800a714:	429a      	cmp	r2, r3
 800a716:	d10c      	bne.n	800a732 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fd fe3c 	bl	800839c <disk_status>
 800a724:	4603      	mov	r3, r0
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <validate+0x4e>
			res = FR_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <validate+0x5a>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	e000      	b.n	800a740 <validate+0x5c>
 800a73e:	2300      	movs	r3, #0
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	6013      	str	r3, [r2, #0]
	return res;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a762:	f107 0310 	add.w	r3, r7, #16
 800a766:	4618      	mov	r0, r3
 800a768:	f7ff fc9c 	bl	800a0a4 <get_ldnumber>
 800a76c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	2b00      	cmp	r3, #0
 800a772:	da01      	bge.n	800a778 <f_mount+0x28>
 800a774:	230b      	movs	r3, #11
 800a776:	e02b      	b.n	800a7d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a778:	4a17      	ldr	r2, [pc, #92]	@ (800a7d8 <f_mount+0x88>)
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a780:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d005      	beq.n	800a794 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a788:	69b8      	ldr	r0, [r7, #24]
 800a78a:	f7fe f8f1 	bl	8008970 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	2200      	movs	r2, #0
 800a792:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	490d      	ldr	r1, [pc, #52]	@ (800a7d8 <f_mount+0x88>)
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <f_mount+0x66>
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d001      	beq.n	800a7ba <f_mount+0x6a>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e00a      	b.n	800a7d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a7ba:	f107 010c 	add.w	r1, r7, #12
 800a7be:	f107 0308 	add.w	r3, r7, #8
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff fd07 	bl	800a1d8 <find_volume>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	2000271c 	.word	0x2000271c

0800a7dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b09a      	sub	sp, #104	@ 0x68
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <f_open+0x18>
 800a7f0:	2309      	movs	r3, #9
 800a7f2:	e1b7      	b.n	800ab64 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a7fc:	79fa      	ldrb	r2, [r7, #7]
 800a7fe:	f107 0114 	add.w	r1, r7, #20
 800a802:	f107 0308 	add.w	r3, r7, #8
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fce6 	bl	800a1d8 <find_volume>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800a812:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a816:	2b00      	cmp	r3, #0
 800a818:	f040 819b 	bne.w	800ab52 <f_open+0x376>
		dj.obj.fs = fs;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	f107 0318 	add.w	r3, r7, #24
 800a826:	4611      	mov	r1, r2
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fbc5 	bl	8009fb8 <follow_path>
 800a82e:	4603      	mov	r3, r0
 800a830:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a834:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d118      	bne.n	800a86e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a83c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a840:	b25b      	sxtb	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	da03      	bge.n	800a84e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a846:	2306      	movs	r3, #6
 800a848:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a84c:	e00f      	b.n	800a86e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	2b01      	cmp	r3, #1
 800a852:	bf8c      	ite	hi
 800a854:	2301      	movhi	r3, #1
 800a856:	2300      	movls	r3, #0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	461a      	mov	r2, r3
 800a85c:	f107 0318 	add.w	r3, r7, #24
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f7fd ff3c 	bl	80086e0 <chk_lock>
 800a868:	4603      	mov	r3, r0
 800a86a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	f003 031c 	and.w	r3, r3, #28
 800a874:	2b00      	cmp	r3, #0
 800a876:	d07f      	beq.n	800a978 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a878:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d017      	beq.n	800a8b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a880:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a884:	2b04      	cmp	r3, #4
 800a886:	d10e      	bne.n	800a8a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a888:	f7fd ff86 	bl	8008798 <enq_lock>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d006      	beq.n	800a8a0 <f_open+0xc4>
 800a892:	f107 0318 	add.w	r3, r7, #24
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff f8de 	bl	8009a58 <dir_register>
 800a89c:	4603      	mov	r3, r0
 800a89e:	e000      	b.n	800a8a2 <f_open+0xc6>
 800a8a0:	2312      	movs	r3, #18
 800a8a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f043 0308 	orr.w	r3, r3, #8
 800a8ac:	71fb      	strb	r3, [r7, #7]
 800a8ae:	e010      	b.n	800a8d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a8b0:	7fbb      	ldrb	r3, [r7, #30]
 800a8b2:	f003 0311 	and.w	r3, r3, #17
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <f_open+0xe6>
					res = FR_DENIED;
 800a8ba:	2307      	movs	r3, #7
 800a8bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a8c0:	e007      	b.n	800a8d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <f_open+0xf6>
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a8d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d168      	bne.n	800a9ac <f_open+0x1d0>
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	f003 0308 	and.w	r3, r3, #8
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d063      	beq.n	800a9ac <f_open+0x1d0>
				dw = GET_FATTIME();
 800a8e4:	f7fd fcf8 	bl	80082d8 <get_fattime>
 800a8e8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ec:	330e      	adds	r3, #14
 800a8ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fd fe4a 	bl	800858a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f8:	3316      	adds	r3, #22
 800a8fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fd fe44 	bl	800858a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	330b      	adds	r3, #11
 800a906:	2220      	movs	r2, #32
 800a908:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7fe fe1a 	bl	800954a <ld_clust>
 800a916:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a91c:	2200      	movs	r2, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fe32 	bl	8009588 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	331c      	adds	r3, #28
 800a928:	2100      	movs	r1, #0
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fd fe2d 	bl	800858a <st_dword>
					fs->wflag = 1;
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2201      	movs	r2, #1
 800a934:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d037      	beq.n	800a9ac <f_open+0x1d0>
						dw = fs->winsect;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a940:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a942:	f107 0318 	add.w	r3, r7, #24
 800a946:	2200      	movs	r2, #0
 800a948:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe fb22 	bl	8008f94 <remove_chain>
 800a950:	4603      	mov	r3, r0
 800a952:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800a956:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d126      	bne.n	800a9ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe f86c 	bl	8008a40 <move_window>
 800a968:	4603      	mov	r3, r0
 800a96a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a972:	3a01      	subs	r2, #1
 800a974:	615a      	str	r2, [r3, #20]
 800a976:	e019      	b.n	800a9ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a978:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d115      	bne.n	800a9ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a980:	7fbb      	ldrb	r3, [r7, #30]
 800a982:	f003 0310 	and.w	r3, r3, #16
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a98a:	2304      	movs	r3, #4
 800a98c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800a990:	e00c      	b.n	800a9ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d007      	beq.n	800a9ac <f_open+0x1d0>
 800a99c:	7fbb      	ldrb	r3, [r7, #30]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <f_open+0x1d0>
						res = FR_DENIED;
 800a9a6:	2307      	movs	r3, #7
 800a9a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a9ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d126      	bne.n	800aa02 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	f003 0308 	and.w	r3, r3, #8
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a9ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	bf8c      	ite	hi
 800a9da:	2301      	movhi	r3, #1
 800a9dc:	2300      	movls	r3, #0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	f107 0318 	add.w	r3, r7, #24
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fd fef7 	bl	80087dc <inc_lock>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d102      	bne.n	800aa02 <f_open+0x226>
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa02:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f040 80a3 	bne.w	800ab52 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa10:	4611      	mov	r1, r2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe fd99 	bl	800954a <ld_clust>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa20:	331c      	adds	r3, #28
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fd fd73 	bl	800850e <ld_dword>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	88da      	ldrh	r2, [r3, #6]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	79fa      	ldrb	r2, [r7, #7]
 800aa46:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3330      	adds	r3, #48	@ 0x30
 800aa5e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800aa62:	2100      	movs	r1, #0
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fd fddd 	bl	8008624 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d06e      	beq.n	800ab52 <f_open+0x376>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d06a      	beq.n	800ab52 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	68da      	ldr	r2, [r3, #12]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	895b      	ldrh	r3, [r3, #10]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	899b      	ldrh	r3, [r3, #12]
 800aa8e:	fb02 f303 	mul.w	r3, r2, r3
 800aa92:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aaa0:	e016      	b.n	800aad0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe f887 	bl	8008bba <get_fat>
 800aaac:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800aaae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d802      	bhi.n	800aaba <f_open+0x2de>
 800aab4:	2302      	movs	r3, #2
 800aab6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aaba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac0:	d102      	bne.n	800aac8 <f_open+0x2ec>
 800aac2:	2301      	movs	r3, #1
 800aac4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aac8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aaca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aad0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <f_open+0x304>
 800aad8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800aada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aadc:	429a      	cmp	r2, r3
 800aade:	d8e0      	bhi.n	800aaa2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aae4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aae6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d131      	bne.n	800ab52 <f_open+0x376>
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	899b      	ldrh	r3, [r3, #12]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aaf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800aafa:	fb01 f202 	mul.w	r2, r1, r2
 800aafe:	1a9b      	subs	r3, r3, r2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d026      	beq.n	800ab52 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe f837 	bl	8008b7c <clust2sect>
 800ab0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ab10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d103      	bne.n	800ab1e <f_open+0x342>
						res = FR_INT_ERR;
 800ab16:	2302      	movs	r3, #2
 800ab18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ab1c:	e019      	b.n	800ab52 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	899b      	ldrh	r3, [r3, #12]
 800ab22:	461a      	mov	r2, r3
 800ab24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab26:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab2c:	441a      	add	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	7858      	ldrb	r0, [r3, #1]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6a1a      	ldr	r2, [r3, #32]
 800ab40:	2301      	movs	r3, #1
 800ab42:	f7fd fc6d 	bl	8008420 <disk_read>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <f_open+0x376>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d002      	beq.n	800ab60 <f_open+0x384>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3768      	adds	r7, #104	@ 0x68
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08c      	sub	sp, #48	@ 0x30
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f107 0210 	add.w	r2, r7, #16
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff fda9 	bl	800a6e4 <validate>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d107      	bne.n	800abb0 <f_write+0x44>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	7d5b      	ldrb	r3, [r3, #21]
 800aba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800aba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <f_write+0x4a>
 800abb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abb4:	e16a      	b.n	800ae8c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	7d1b      	ldrb	r3, [r3, #20]
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <f_write+0x5a>
 800abc2:	2307      	movs	r3, #7
 800abc4:	e162      	b.n	800ae8c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	441a      	add	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	f080 814c 	bcs.w	800ae70 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	43db      	mvns	r3, r3
 800abde:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800abe0:	e146      	b.n	800ae70 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	8992      	ldrh	r2, [r2, #12]
 800abea:	fbb3 f1f2 	udiv	r1, r3, r2
 800abee:	fb01 f202 	mul.w	r2, r1, r2
 800abf2:	1a9b      	subs	r3, r3, r2
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f040 80f1 	bne.w	800addc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	8992      	ldrh	r2, [r2, #12]
 800ac02:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	8952      	ldrh	r2, [r2, #10]
 800ac0a:	3a01      	subs	r2, #1
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d143      	bne.n	800ac9e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10c      	bne.n	800ac38 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d11a      	bne.n	800ac60 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fa15 	bl	800905e <create_chain>
 800ac34:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ac36:	e013      	b.n	800ac60 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d007      	beq.n	800ac50 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	4619      	mov	r1, r3
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f7fe faa1 	bl	800918e <clmt_clust>
 800ac4c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ac4e:	e007      	b.n	800ac60 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7fe fa00 	bl	800905e <create_chain>
 800ac5e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 8109 	beq.w	800ae7a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ac68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d104      	bne.n	800ac78 <f_write+0x10c>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2202      	movs	r2, #2
 800ac72:	755a      	strb	r2, [r3, #21]
 800ac74:	2302      	movs	r3, #2
 800ac76:	e109      	b.n	800ae8c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7e:	d104      	bne.n	800ac8a <f_write+0x11e>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	755a      	strb	r2, [r3, #21]
 800ac86:	2301      	movs	r3, #1
 800ac88:	e100      	b.n	800ae8c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac8e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d102      	bne.n	800ac9e <f_write+0x132>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac9c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	7d1b      	ldrb	r3, [r3, #20]
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	da18      	bge.n	800acda <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	7858      	ldrb	r0, [r3, #1]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a1a      	ldr	r2, [r3, #32]
 800acb6:	2301      	movs	r3, #1
 800acb8:	f7fd fbd2 	bl	8008460 <disk_write>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d004      	beq.n	800accc <f_write+0x160>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	755a      	strb	r2, [r3, #21]
 800acc8:	2301      	movs	r3, #1
 800acca:	e0df      	b.n	800ae8c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	7d1b      	ldrb	r3, [r3, #20]
 800acd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f7fd ff4a 	bl	8008b7c <clust2sect>
 800ace8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d104      	bne.n	800acfa <f_write+0x18e>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2202      	movs	r2, #2
 800acf4:	755a      	strb	r2, [r3, #21]
 800acf6:	2302      	movs	r3, #2
 800acf8:	e0c8      	b.n	800ae8c <f_write+0x320>
			sect += csect;
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	4413      	add	r3, r2
 800ad00:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	899b      	ldrh	r3, [r3, #12]
 800ad06:	461a      	mov	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad0e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d043      	beq.n	800ad9e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	6a3b      	ldr	r3, [r7, #32]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	8952      	ldrh	r2, [r2, #10]
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d905      	bls.n	800ad30 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	895b      	ldrh	r3, [r3, #10]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	7858      	ldrb	r0, [r3, #1]
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	69f9      	ldr	r1, [r7, #28]
 800ad3a:	f7fd fb91 	bl	8008460 <disk_write>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d004      	beq.n	800ad4e <f_write+0x1e2>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2201      	movs	r2, #1
 800ad48:	755a      	strb	r2, [r3, #21]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e09e      	b.n	800ae8c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1a      	ldr	r2, [r3, #32]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	6a3a      	ldr	r2, [r7, #32]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d918      	bls.n	800ad8e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6a1a      	ldr	r2, [r3, #32]
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	8992      	ldrh	r2, [r2, #12]
 800ad6e:	fb02 f303 	mul.w	r3, r2, r3
 800ad72:	69fa      	ldr	r2, [r7, #28]
 800ad74:	18d1      	adds	r1, r2, r3
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	899b      	ldrh	r3, [r3, #12]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f7fd fc31 	bl	80085e2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	7d1b      	ldrb	r3, [r3, #20]
 800ad84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	899b      	ldrh	r3, [r3, #12]
 800ad92:	461a      	mov	r2, r3
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	fb02 f303 	mul.w	r3, r2, r3
 800ad9a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ad9c:	e04b      	b.n	800ae36 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d016      	beq.n	800add6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	699a      	ldr	r2, [r3, #24]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d210      	bcs.n	800add6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	7858      	ldrb	r0, [r3, #1]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800adbe:	2301      	movs	r3, #1
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	f7fd fb2d 	bl	8008420 <disk_read>
 800adc6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d004      	beq.n	800add6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	755a      	strb	r2, [r3, #21]
 800add2:	2301      	movs	r3, #1
 800add4:	e05a      	b.n	800ae8c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	899b      	ldrh	r3, [r3, #12]
 800ade0:	4618      	mov	r0, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	8992      	ldrh	r2, [r2, #12]
 800adea:	fbb3 f1f2 	udiv	r1, r3, r2
 800adee:	fb01 f202 	mul.w	r2, r1, r2
 800adf2:	1a9b      	subs	r3, r3, r2
 800adf4:	1ac3      	subs	r3, r0, r3
 800adf6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800adf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d901      	bls.n	800ae04 <f_write+0x298>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	8992      	ldrh	r2, [r2, #12]
 800ae12:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae16:	fb00 f202 	mul.w	r2, r0, r2
 800ae1a:	1a9b      	subs	r3, r3, r2
 800ae1c:	440b      	add	r3, r1
 800ae1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae20:	69f9      	ldr	r1, [r7, #28]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7fd fbdd 	bl	80085e2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	7d1b      	ldrb	r3, [r3, #20]
 800ae2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	4413      	add	r3, r2
 800ae3c:	61fb      	str	r3, [r7, #28]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	699a      	ldr	r2, [r3, #24]
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	441a      	add	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	619a      	str	r2, [r3, #24]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	68da      	ldr	r2, [r3, #12]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	bf38      	it	cc
 800ae56:	461a      	movcc	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	60da      	str	r2, [r3, #12]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	441a      	add	r2, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f47f aeb5 	bne.w	800abe2 <f_write+0x76>
 800ae78:	e000      	b.n	800ae7c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae7a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	7d1b      	ldrb	r3, [r3, #20]
 800ae80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3730      	adds	r7, #48	@ 0x30
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f107 0208 	add.w	r2, r7, #8
 800aea2:	4611      	mov	r1, r2
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7ff fc1d 	bl	800a6e4 <validate>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d168      	bne.n	800af86 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7d1b      	ldrb	r3, [r3, #20]
 800aeb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d062      	beq.n	800af86 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7d1b      	ldrb	r3, [r3, #20]
 800aec4:	b25b      	sxtb	r3, r3
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	da15      	bge.n	800aef6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	7858      	ldrb	r0, [r3, #1]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a1a      	ldr	r2, [r3, #32]
 800aed8:	2301      	movs	r3, #1
 800aeda:	f7fd fac1 	bl	8008460 <disk_write>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <f_sync+0x54>
 800aee4:	2301      	movs	r3, #1
 800aee6:	e04f      	b.n	800af88 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
 800aeec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800aef6:	f7fd f9ef 	bl	80082d8 <get_fattime>
 800aefa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7fd fd9b 	bl	8008a40 <move_window>
 800af0a:	4603      	mov	r3, r0
 800af0c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d138      	bne.n	800af86 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af18:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	330b      	adds	r3, #11
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	330b      	adds	r3, #11
 800af24:	f042 0220 	orr.w	r2, r2, #32
 800af28:	b2d2      	uxtb	r2, r2
 800af2a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	461a      	mov	r2, r3
 800af36:	68f9      	ldr	r1, [r7, #12]
 800af38:	f7fe fb26 	bl	8009588 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f103 021c 	add.w	r2, r3, #28
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	4619      	mov	r1, r3
 800af48:	4610      	mov	r0, r2
 800af4a:	f7fd fb1e 	bl	800858a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3316      	adds	r3, #22
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	4618      	mov	r0, r3
 800af56:	f7fd fb18 	bl	800858a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	3312      	adds	r3, #18
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f7fd faf7 	bl	8008554 <st_word>
					fs->wflag = 1;
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2201      	movs	r2, #1
 800af6a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fd fd94 	bl	8008a9c <sync_fs>
 800af74:	4603      	mov	r3, r0
 800af76:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7d1b      	ldrb	r3, [r3, #20]
 800af7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af80:	b2da      	uxtb	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800af86:	7dfb      	ldrb	r3, [r7, #23]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7ff ff7b 	bl	800ae94 <f_sync>
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d118      	bne.n	800afda <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f107 0208 	add.w	r2, r7, #8
 800afae:	4611      	mov	r1, r2
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7ff fb97 	bl	800a6e4 <validate>
 800afb6:	4603      	mov	r3, r0
 800afb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800afba:	7bfb      	ldrb	r3, [r7, #15]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10c      	bne.n	800afda <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fd fc97 	bl	80088f8 <dec_lock>
 800afca:	4603      	mov	r3, r0
 800afcc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800afda:	7bfb      	ldrb	r3, [r7, #15]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b090      	sub	sp, #64	@ 0x40
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f107 0208 	add.w	r2, r7, #8
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fb74 	bl	800a6e4 <validate>
 800affc:	4603      	mov	r3, r0
 800affe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b002:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b006:	2b00      	cmp	r3, #0
 800b008:	d103      	bne.n	800b012 <f_lseek+0x2e>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	7d5b      	ldrb	r3, [r3, #21]
 800b00e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b012:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <f_lseek+0x3c>
 800b01a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b01e:	e201      	b.n	800b424 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80d9 	beq.w	800b1dc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b030:	d15a      	bne.n	800b0e8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b036:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	1d1a      	adds	r2, r3, #4
 800b03c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	2302      	movs	r3, #2
 800b044:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d03a      	beq.n	800b0c8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	613b      	str	r3, [r7, #16]
 800b056:	2300      	movs	r3, #0
 800b058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05c:	3302      	adds	r3, #2
 800b05e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b066:	3301      	adds	r3, #1
 800b068:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fd fda3 	bl	8008bba <get_fat>
 800b074:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d804      	bhi.n	800b086 <f_lseek+0xa2>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	755a      	strb	r2, [r3, #21]
 800b082:	2302      	movs	r3, #2
 800b084:	e1ce      	b.n	800b424 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08c:	d104      	bne.n	800b098 <f_lseek+0xb4>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	755a      	strb	r2, [r3, #21]
 800b094:	2301      	movs	r3, #1
 800b096:	e1c5      	b.n	800b424 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d0de      	beq.n	800b060 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b0a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d809      	bhi.n	800b0be <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ac:	1d1a      	adds	r2, r3, #4
 800b0ae:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0b2:	601a      	str	r2, [r3, #0]
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b6:	1d1a      	adds	r2, r3, #4
 800b0b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d3c4      	bcc.n	800b052 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0ce:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b0d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d803      	bhi.n	800b0e0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e19f      	b.n	800b420 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b0e0:	2311      	movs	r3, #17
 800b0e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b0e6:	e19b      	b.n	800b420 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d902      	bls.n	800b0f8 <f_lseek+0x114>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 818d 	beq.w	800b420 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	3b01      	subs	r3, #1
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7fe f83e 	bl	800918e <clmt_clust>
 800b112:	4602      	mov	r2, r0
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	4619      	mov	r1, r3
 800b120:	4610      	mov	r0, r2
 800b122:	f7fd fd2b 	bl	8008b7c <clust2sect>
 800b126:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d104      	bne.n	800b138 <f_lseek+0x154>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2202      	movs	r2, #2
 800b132:	755a      	strb	r2, [r3, #21]
 800b134:	2302      	movs	r3, #2
 800b136:	e175      	b.n	800b424 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	8992      	ldrh	r2, [r2, #12]
 800b140:	fbb3 f3f2 	udiv	r3, r3, r2
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	8952      	ldrh	r2, [r2, #10]
 800b148:	3a01      	subs	r2, #1
 800b14a:	4013      	ands	r3, r2
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	4413      	add	r3, r2
 800b150:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	8992      	ldrh	r2, [r2, #12]
 800b15a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b15e:	fb01 f202 	mul.w	r2, r1, r2
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 815b 	beq.w	800b420 <f_lseek+0x43c>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	69ba      	ldr	r2, [r7, #24]
 800b170:	429a      	cmp	r2, r3
 800b172:	f000 8155 	beq.w	800b420 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7d1b      	ldrb	r3, [r3, #20]
 800b17a:	b25b      	sxtb	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	da18      	bge.n	800b1b2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	7858      	ldrb	r0, [r3, #1]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1a      	ldr	r2, [r3, #32]
 800b18e:	2301      	movs	r3, #1
 800b190:	f7fd f966 	bl	8008460 <disk_write>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d004      	beq.n	800b1a4 <f_lseek+0x1c0>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	755a      	strb	r2, [r3, #21]
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e13f      	b.n	800b424 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7d1b      	ldrb	r3, [r3, #20]
 800b1a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	7858      	ldrb	r0, [r3, #1]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b1bc:	2301      	movs	r3, #1
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	f7fd f92e 	bl	8008420 <disk_read>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d004      	beq.n	800b1d4 <f_lseek+0x1f0>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	755a      	strb	r2, [r3, #21]
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e127      	b.n	800b424 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	621a      	str	r2, [r3, #32]
 800b1da:	e121      	b.n	800b420 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d908      	bls.n	800b1f8 <f_lseek+0x214>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	7d1b      	ldrb	r3, [r3, #20]
 800b1ea:	f003 0302 	and.w	r3, r3, #2
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d102      	bne.n	800b1f8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	637b      	str	r3, [r7, #52]	@ 0x34
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b206:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 80b5 	beq.w	800b37a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	895b      	ldrh	r3, [r3, #10]
 800b214:	461a      	mov	r2, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	899b      	ldrh	r3, [r3, #12]
 800b21a:	fb02 f303 	mul.w	r3, r2, r3
 800b21e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d01b      	beq.n	800b25e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	1e5a      	subs	r2, r3, #1
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	1e59      	subs	r1, r3, #1
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d30f      	bcc.n	800b25e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	1e5a      	subs	r2, r3, #1
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	425b      	negs	r3, r3
 800b246:	401a      	ands	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b25c:	e022      	b.n	800b2a4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	2b00      	cmp	r3, #0
 800b268:	d119      	bne.n	800b29e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2100      	movs	r1, #0
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fd fef5 	bl	800905e <create_chain>
 800b274:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d104      	bne.n	800b286 <f_lseek+0x2a2>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2202      	movs	r2, #2
 800b280:	755a      	strb	r2, [r3, #21]
 800b282:	2302      	movs	r3, #2
 800b284:	e0ce      	b.n	800b424 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28c:	d104      	bne.n	800b298 <f_lseek+0x2b4>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	755a      	strb	r2, [r3, #21]
 800b294:	2301      	movs	r3, #1
 800b296:	e0c5      	b.n	800b424 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b29c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2a2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d067      	beq.n	800b37a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b2aa:	e03a      	b.n	800b322 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	603b      	str	r3, [r7, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699a      	ldr	r2, [r3, #24]
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	441a      	add	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7d1b      	ldrb	r3, [r3, #20]
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00b      	beq.n	800b2e4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fd fec4 	bl	800905e <create_chain>
 800b2d6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d108      	bne.n	800b2f0 <f_lseek+0x30c>
							ofs = 0; break;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	603b      	str	r3, [r7, #0]
 800b2e2:	e022      	b.n	800b32a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fd fc66 	bl	8008bba <get_fat>
 800b2ee:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f6:	d104      	bne.n	800b302 <f_lseek+0x31e>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	755a      	strb	r2, [r3, #21]
 800b2fe:	2301      	movs	r3, #1
 800b300:	e090      	b.n	800b424 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b304:	2b01      	cmp	r3, #1
 800b306:	d904      	bls.n	800b312 <f_lseek+0x32e>
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	69db      	ldr	r3, [r3, #28]
 800b30c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b30e:	429a      	cmp	r2, r3
 800b310:	d304      	bcc.n	800b31c <f_lseek+0x338>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2202      	movs	r2, #2
 800b316:	755a      	strb	r2, [r3, #21]
 800b318:	2302      	movs	r3, #2
 800b31a:	e083      	b.n	800b424 <f_lseek+0x440>
					fp->clust = clst;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b320:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	429a      	cmp	r2, r3
 800b328:	d8c0      	bhi.n	800b2ac <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	699a      	ldr	r2, [r3, #24]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	441a      	add	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	899b      	ldrh	r3, [r3, #12]
 800b33a:	461a      	mov	r2, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b342:	fb01 f202 	mul.w	r2, r1, r2
 800b346:	1a9b      	subs	r3, r3, r2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d016      	beq.n	800b37a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b350:	4618      	mov	r0, r3
 800b352:	f7fd fc13 	bl	8008b7c <clust2sect>
 800b356:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d104      	bne.n	800b368 <f_lseek+0x384>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2202      	movs	r2, #2
 800b362:	755a      	strb	r2, [r3, #21]
 800b364:	2302      	movs	r3, #2
 800b366:	e05d      	b.n	800b424 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	899b      	ldrh	r3, [r3, #12]
 800b36c:	461a      	mov	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	fbb3 f3f2 	udiv	r3, r3, r2
 800b374:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b376:	4413      	add	r3, r2
 800b378:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	699a      	ldr	r2, [r3, #24]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	429a      	cmp	r2, r3
 800b384:	d90a      	bls.n	800b39c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	699a      	ldr	r2, [r3, #24]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	7d1b      	ldrb	r3, [r3, #20]
 800b392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b396:	b2da      	uxtb	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	8992      	ldrh	r2, [r2, #12]
 800b3a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3a8:	fb01 f202 	mul.w	r2, r1, r2
 800b3ac:	1a9b      	subs	r3, r3, r2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d036      	beq.n	800b420 <f_lseek+0x43c>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d031      	beq.n	800b420 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	7d1b      	ldrb	r3, [r3, #20]
 800b3c0:	b25b      	sxtb	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da18      	bge.n	800b3f8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	7858      	ldrb	r0, [r3, #1]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a1a      	ldr	r2, [r3, #32]
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	f7fd f843 	bl	8008460 <disk_write>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <f_lseek+0x406>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	755a      	strb	r2, [r3, #21]
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e01c      	b.n	800b424 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	7d1b      	ldrb	r3, [r3, #20]
 800b3ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	7858      	ldrb	r0, [r3, #1]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b402:	2301      	movs	r3, #1
 800b404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b406:	f7fd f80b 	bl	8008420 <disk_read>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d004      	beq.n	800b41a <f_lseek+0x436>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	755a      	strb	r2, [r3, #21]
 800b416:	2301      	movs	r3, #1
 800b418:	e004      	b.n	800b424 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b41e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b420:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b424:	4618      	mov	r0, r3
 800b426:	3740      	adds	r7, #64	@ 0x40
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b438:	78fb      	ldrb	r3, [r7, #3]
 800b43a:	2b0a      	cmp	r3, #10
 800b43c:	d103      	bne.n	800b446 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b43e:	210d      	movs	r1, #13
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff fff3 	bl	800b42c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	db25      	blt.n	800b49e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	1c5a      	adds	r2, r3, #1
 800b456:	60fa      	str	r2, [r7, #12]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	4413      	add	r3, r2
 800b45c:	78fa      	ldrb	r2, [r7, #3]
 800b45e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b3c      	cmp	r3, #60	@ 0x3c
 800b464:	dd12      	ble.n	800b48c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f103 010c 	add.w	r1, r3, #12
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	f107 0308 	add.w	r3, r7, #8
 800b476:	f7ff fb79 	bl	800ab6c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d101      	bne.n	800b486 <putc_bfd+0x5a>
 800b482:	2300      	movs	r3, #0
 800b484:	e001      	b.n	800b48a <putc_bfd+0x5e>
 800b486:	f04f 33ff 	mov.w	r3, #4294967295
 800b48a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	609a      	str	r2, [r3, #8]
 800b49c:	e000      	b.n	800b4a0 <putc_bfd+0x74>
	if (i < 0) return;
 800b49e:	bf00      	nop
}
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	db16      	blt.n	800b4e4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6818      	ldr	r0, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f103 010c 	add.w	r1, r3, #12
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	f107 030c 	add.w	r3, r7, #12
 800b4ca:	f7ff fb4f 	bl	800ab6c <f_write>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d107      	bne.n	800b4e4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d102      	bne.n	800b4e4 <putc_flush+0x3e>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	e001      	b.n	800b4e8 <putc_flush+0x42>
	return EOF;
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	605a      	str	r2, [r3, #4]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	609a      	str	r2, [r3, #8]
}
 800b50e:	bf00      	nop
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b096      	sub	sp, #88	@ 0x58
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800b524:	f107 030c 	add.w	r3, r7, #12
 800b528:	6839      	ldr	r1, [r7, #0]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff ffe0 	bl	800b4f0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800b530:	e009      	b.n	800b546 <f_puts+0x2c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	f107 030c 	add.w	r3, r7, #12
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff ff73 	bl	800b42c <putc_bfd>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1f1      	bne.n	800b532 <f_puts+0x18>
	return putc_flush(&pb);
 800b54e:	f107 030c 	add.w	r3, r7, #12
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff ffa7 	bl	800b4a6 <putc_flush>
 800b558:	4603      	mov	r3, r0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3758      	adds	r7, #88	@ 0x58
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
	...

0800b564 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	4613      	mov	r3, r2
 800b570:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b572:	2301      	movs	r3, #1
 800b574:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b57a:	4b1f      	ldr	r3, [pc, #124]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b57c:	7a5b      	ldrb	r3, [r3, #9]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	d131      	bne.n	800b5e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b584:	4b1c      	ldr	r3, [pc, #112]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b586:	7a5b      	ldrb	r3, [r3, #9]
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	461a      	mov	r2, r3
 800b58c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b58e:	2100      	movs	r1, #0
 800b590:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b592:	4b19      	ldr	r3, [pc, #100]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b594:	7a5b      	ldrb	r3, [r3, #9]
 800b596:	b2db      	uxtb	r3, r3
 800b598:	4a17      	ldr	r2, [pc, #92]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b5a2:	4b15      	ldr	r3, [pc, #84]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b5a4:	7a5b      	ldrb	r3, [r3, #9]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	4b13      	ldr	r3, [pc, #76]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b5ac:	4413      	add	r3, r2
 800b5ae:	79fa      	ldrb	r2, [r7, #7]
 800b5b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b5b2:	4b11      	ldr	r3, [pc, #68]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b5b4:	7a5b      	ldrb	r3, [r3, #9]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	1c5a      	adds	r2, r3, #1
 800b5ba:	b2d1      	uxtb	r1, r2
 800b5bc:	4a0e      	ldr	r2, [pc, #56]	@ (800b5f8 <FATFS_LinkDriverEx+0x94>)
 800b5be:	7251      	strb	r1, [r2, #9]
 800b5c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5c2:	7dbb      	ldrb	r3, [r7, #22]
 800b5c4:	3330      	adds	r3, #48	@ 0x30
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	223a      	movs	r2, #58	@ 0x3a
 800b5d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	222f      	movs	r2, #47	@ 0x2f
 800b5da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	3303      	adds	r3, #3
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	20002944 	.word	0x20002944

0800b5fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b606:	2200      	movs	r2, #0
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff ffaa 	bl	800b564 <FATFS_LinkDriverEx>
 800b610:	4603      	mov	r3, r0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	6039      	str	r1, [r7, #0]
 800b626:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b628:	88fb      	ldrh	r3, [r7, #6]
 800b62a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b62c:	d802      	bhi.n	800b634 <ff_convert+0x18>
		c = chr;
 800b62e:	88fb      	ldrh	r3, [r7, #6]
 800b630:	81fb      	strh	r3, [r7, #14]
 800b632:	e025      	b.n	800b680 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00b      	beq.n	800b652 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b63a:	88fb      	ldrh	r3, [r7, #6]
 800b63c:	2bff      	cmp	r3, #255	@ 0xff
 800b63e:	d805      	bhi.n	800b64c <ff_convert+0x30>
 800b640:	88fb      	ldrh	r3, [r7, #6]
 800b642:	3b80      	subs	r3, #128	@ 0x80
 800b644:	4a12      	ldr	r2, [pc, #72]	@ (800b690 <ff_convert+0x74>)
 800b646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b64a:	e000      	b.n	800b64e <ff_convert+0x32>
 800b64c:	2300      	movs	r3, #0
 800b64e:	81fb      	strh	r3, [r7, #14]
 800b650:	e016      	b.n	800b680 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b652:	2300      	movs	r3, #0
 800b654:	81fb      	strh	r3, [r7, #14]
 800b656:	e009      	b.n	800b66c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b658:	89fb      	ldrh	r3, [r7, #14]
 800b65a:	4a0d      	ldr	r2, [pc, #52]	@ (800b690 <ff_convert+0x74>)
 800b65c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b660:	88fa      	ldrh	r2, [r7, #6]
 800b662:	429a      	cmp	r2, r3
 800b664:	d006      	beq.n	800b674 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b666:	89fb      	ldrh	r3, [r7, #14]
 800b668:	3301      	adds	r3, #1
 800b66a:	81fb      	strh	r3, [r7, #14]
 800b66c:	89fb      	ldrh	r3, [r7, #14]
 800b66e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b670:	d9f2      	bls.n	800b658 <ff_convert+0x3c>
 800b672:	e000      	b.n	800b676 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b674:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b676:	89fb      	ldrh	r3, [r7, #14]
 800b678:	3380      	adds	r3, #128	@ 0x80
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b680:	89fb      	ldrh	r3, [r7, #14]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	0800c3cc 	.word	0x0800c3cc

0800b694 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	4603      	mov	r3, r0
 800b69c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b69e:	88fb      	ldrh	r3, [r7, #6]
 800b6a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6a4:	d201      	bcs.n	800b6aa <ff_wtoupper+0x16>
 800b6a6:	4b3e      	ldr	r3, [pc, #248]	@ (800b7a0 <ff_wtoupper+0x10c>)
 800b6a8:	e000      	b.n	800b6ac <ff_wtoupper+0x18>
 800b6aa:	4b3e      	ldr	r3, [pc, #248]	@ (800b7a4 <ff_wtoupper+0x110>)
 800b6ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	1c9a      	adds	r2, r3, #2
 800b6b2:	617a      	str	r2, [r7, #20]
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b6b8:	8a7b      	ldrh	r3, [r7, #18]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d068      	beq.n	800b790 <ff_wtoupper+0xfc>
 800b6be:	88fa      	ldrh	r2, [r7, #6]
 800b6c0:	8a7b      	ldrh	r3, [r7, #18]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d364      	bcc.n	800b790 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	1c9a      	adds	r2, r3, #2
 800b6ca:	617a      	str	r2, [r7, #20]
 800b6cc:	881b      	ldrh	r3, [r3, #0]
 800b6ce:	823b      	strh	r3, [r7, #16]
 800b6d0:	8a3b      	ldrh	r3, [r7, #16]
 800b6d2:	0a1b      	lsrs	r3, r3, #8
 800b6d4:	81fb      	strh	r3, [r7, #14]
 800b6d6:	8a3b      	ldrh	r3, [r7, #16]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b6dc:	88fa      	ldrh	r2, [r7, #6]
 800b6de:	8a79      	ldrh	r1, [r7, #18]
 800b6e0:	8a3b      	ldrh	r3, [r7, #16]
 800b6e2:	440b      	add	r3, r1
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	da49      	bge.n	800b77c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b6e8:	89fb      	ldrh	r3, [r7, #14]
 800b6ea:	2b08      	cmp	r3, #8
 800b6ec:	d84f      	bhi.n	800b78e <ff_wtoupper+0xfa>
 800b6ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f4 <ff_wtoupper+0x60>)
 800b6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f4:	0800b719 	.word	0x0800b719
 800b6f8:	0800b72b 	.word	0x0800b72b
 800b6fc:	0800b741 	.word	0x0800b741
 800b700:	0800b749 	.word	0x0800b749
 800b704:	0800b751 	.word	0x0800b751
 800b708:	0800b759 	.word	0x0800b759
 800b70c:	0800b761 	.word	0x0800b761
 800b710:	0800b769 	.word	0x0800b769
 800b714:	0800b771 	.word	0x0800b771
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b718:	88fa      	ldrh	r2, [r7, #6]
 800b71a:	8a7b      	ldrh	r3, [r7, #18]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	697a      	ldr	r2, [r7, #20]
 800b722:	4413      	add	r3, r2
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	80fb      	strh	r3, [r7, #6]
 800b728:	e027      	b.n	800b77a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b72a:	88fa      	ldrh	r2, [r7, #6]
 800b72c:	8a7b      	ldrh	r3, [r7, #18]
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	b29b      	uxth	r3, r3
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	b29b      	uxth	r3, r3
 800b738:	88fa      	ldrh	r2, [r7, #6]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	80fb      	strh	r3, [r7, #6]
 800b73e:	e01c      	b.n	800b77a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b740:	88fb      	ldrh	r3, [r7, #6]
 800b742:	3b10      	subs	r3, #16
 800b744:	80fb      	strh	r3, [r7, #6]
 800b746:	e018      	b.n	800b77a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b748:	88fb      	ldrh	r3, [r7, #6]
 800b74a:	3b20      	subs	r3, #32
 800b74c:	80fb      	strh	r3, [r7, #6]
 800b74e:	e014      	b.n	800b77a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b750:	88fb      	ldrh	r3, [r7, #6]
 800b752:	3b30      	subs	r3, #48	@ 0x30
 800b754:	80fb      	strh	r3, [r7, #6]
 800b756:	e010      	b.n	800b77a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b758:	88fb      	ldrh	r3, [r7, #6]
 800b75a:	3b1a      	subs	r3, #26
 800b75c:	80fb      	strh	r3, [r7, #6]
 800b75e:	e00c      	b.n	800b77a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	3308      	adds	r3, #8
 800b764:	80fb      	strh	r3, [r7, #6]
 800b766:	e008      	b.n	800b77a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b768:	88fb      	ldrh	r3, [r7, #6]
 800b76a:	3b50      	subs	r3, #80	@ 0x50
 800b76c:	80fb      	strh	r3, [r7, #6]
 800b76e:	e004      	b.n	800b77a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b770:	88fb      	ldrh	r3, [r7, #6]
 800b772:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b776:	80fb      	strh	r3, [r7, #6]
 800b778:	bf00      	nop
			}
			break;
 800b77a:	e008      	b.n	800b78e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b77c:	89fb      	ldrh	r3, [r7, #14]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d195      	bne.n	800b6ae <ff_wtoupper+0x1a>
 800b782:	8a3b      	ldrh	r3, [r7, #16]
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4413      	add	r3, r2
 800b78a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b78c:	e78f      	b.n	800b6ae <ff_wtoupper+0x1a>
			break;
 800b78e:	bf00      	nop
	}

	return chr;
 800b790:	88fb      	ldrh	r3, [r7, #6]
}
 800b792:	4618      	mov	r0, r3
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	0800c4cc 	.word	0x0800c4cc
 800b7a4:	0800c6c0 	.word	0x0800c6c0

0800b7a8 <malloc>:
 800b7a8:	4b02      	ldr	r3, [pc, #8]	@ (800b7b4 <malloc+0xc>)
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	6818      	ldr	r0, [r3, #0]
 800b7ae:	f000 b82d 	b.w	800b80c <_malloc_r>
 800b7b2:	bf00      	nop
 800b7b4:	20000090 	.word	0x20000090

0800b7b8 <free>:
 800b7b8:	4b02      	ldr	r3, [pc, #8]	@ (800b7c4 <free+0xc>)
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	6818      	ldr	r0, [r3, #0]
 800b7be:	f000 b917 	b.w	800b9f0 <_free_r>
 800b7c2:	bf00      	nop
 800b7c4:	20000090 	.word	0x20000090

0800b7c8 <sbrk_aligned>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	4e0f      	ldr	r6, [pc, #60]	@ (800b808 <sbrk_aligned+0x40>)
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	6831      	ldr	r1, [r6, #0]
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	b911      	cbnz	r1, 800b7da <sbrk_aligned+0x12>
 800b7d4:	f000 f8d0 	bl	800b978 <_sbrk_r>
 800b7d8:	6030      	str	r0, [r6, #0]
 800b7da:	4621      	mov	r1, r4
 800b7dc:	4628      	mov	r0, r5
 800b7de:	f000 f8cb 	bl	800b978 <_sbrk_r>
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	d103      	bne.n	800b7ee <sbrk_aligned+0x26>
 800b7e6:	f04f 34ff 	mov.w	r4, #4294967295
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	bd70      	pop	{r4, r5, r6, pc}
 800b7ee:	1cc4      	adds	r4, r0, #3
 800b7f0:	f024 0403 	bic.w	r4, r4, #3
 800b7f4:	42a0      	cmp	r0, r4
 800b7f6:	d0f8      	beq.n	800b7ea <sbrk_aligned+0x22>
 800b7f8:	1a21      	subs	r1, r4, r0
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f000 f8bc 	bl	800b978 <_sbrk_r>
 800b800:	3001      	adds	r0, #1
 800b802:	d1f2      	bne.n	800b7ea <sbrk_aligned+0x22>
 800b804:	e7ef      	b.n	800b7e6 <sbrk_aligned+0x1e>
 800b806:	bf00      	nop
 800b808:	20002950 	.word	0x20002950

0800b80c <_malloc_r>:
 800b80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b810:	1ccd      	adds	r5, r1, #3
 800b812:	f025 0503 	bic.w	r5, r5, #3
 800b816:	3508      	adds	r5, #8
 800b818:	2d0c      	cmp	r5, #12
 800b81a:	bf38      	it	cc
 800b81c:	250c      	movcc	r5, #12
 800b81e:	2d00      	cmp	r5, #0
 800b820:	4606      	mov	r6, r0
 800b822:	db01      	blt.n	800b828 <_malloc_r+0x1c>
 800b824:	42a9      	cmp	r1, r5
 800b826:	d904      	bls.n	800b832 <_malloc_r+0x26>
 800b828:	230c      	movs	r3, #12
 800b82a:	6033      	str	r3, [r6, #0]
 800b82c:	2000      	movs	r0, #0
 800b82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b832:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b908 <_malloc_r+0xfc>
 800b836:	f000 f869 	bl	800b90c <__malloc_lock>
 800b83a:	f8d8 3000 	ldr.w	r3, [r8]
 800b83e:	461c      	mov	r4, r3
 800b840:	bb44      	cbnz	r4, 800b894 <_malloc_r+0x88>
 800b842:	4629      	mov	r1, r5
 800b844:	4630      	mov	r0, r6
 800b846:	f7ff ffbf 	bl	800b7c8 <sbrk_aligned>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	4604      	mov	r4, r0
 800b84e:	d158      	bne.n	800b902 <_malloc_r+0xf6>
 800b850:	f8d8 4000 	ldr.w	r4, [r8]
 800b854:	4627      	mov	r7, r4
 800b856:	2f00      	cmp	r7, #0
 800b858:	d143      	bne.n	800b8e2 <_malloc_r+0xd6>
 800b85a:	2c00      	cmp	r4, #0
 800b85c:	d04b      	beq.n	800b8f6 <_malloc_r+0xea>
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	4639      	mov	r1, r7
 800b862:	4630      	mov	r0, r6
 800b864:	eb04 0903 	add.w	r9, r4, r3
 800b868:	f000 f886 	bl	800b978 <_sbrk_r>
 800b86c:	4581      	cmp	r9, r0
 800b86e:	d142      	bne.n	800b8f6 <_malloc_r+0xea>
 800b870:	6821      	ldr	r1, [r4, #0]
 800b872:	1a6d      	subs	r5, r5, r1
 800b874:	4629      	mov	r1, r5
 800b876:	4630      	mov	r0, r6
 800b878:	f7ff ffa6 	bl	800b7c8 <sbrk_aligned>
 800b87c:	3001      	adds	r0, #1
 800b87e:	d03a      	beq.n	800b8f6 <_malloc_r+0xea>
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	442b      	add	r3, r5
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	f8d8 3000 	ldr.w	r3, [r8]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	bb62      	cbnz	r2, 800b8e8 <_malloc_r+0xdc>
 800b88e:	f8c8 7000 	str.w	r7, [r8]
 800b892:	e00f      	b.n	800b8b4 <_malloc_r+0xa8>
 800b894:	6822      	ldr	r2, [r4, #0]
 800b896:	1b52      	subs	r2, r2, r5
 800b898:	d420      	bmi.n	800b8dc <_malloc_r+0xd0>
 800b89a:	2a0b      	cmp	r2, #11
 800b89c:	d917      	bls.n	800b8ce <_malloc_r+0xc2>
 800b89e:	1961      	adds	r1, r4, r5
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	6025      	str	r5, [r4, #0]
 800b8a4:	bf18      	it	ne
 800b8a6:	6059      	strne	r1, [r3, #4]
 800b8a8:	6863      	ldr	r3, [r4, #4]
 800b8aa:	bf08      	it	eq
 800b8ac:	f8c8 1000 	streq.w	r1, [r8]
 800b8b0:	5162      	str	r2, [r4, r5]
 800b8b2:	604b      	str	r3, [r1, #4]
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f000 f82f 	bl	800b918 <__malloc_unlock>
 800b8ba:	f104 000b 	add.w	r0, r4, #11
 800b8be:	1d23      	adds	r3, r4, #4
 800b8c0:	f020 0007 	bic.w	r0, r0, #7
 800b8c4:	1ac2      	subs	r2, r0, r3
 800b8c6:	bf1c      	itt	ne
 800b8c8:	1a1b      	subne	r3, r3, r0
 800b8ca:	50a3      	strne	r3, [r4, r2]
 800b8cc:	e7af      	b.n	800b82e <_malloc_r+0x22>
 800b8ce:	6862      	ldr	r2, [r4, #4]
 800b8d0:	42a3      	cmp	r3, r4
 800b8d2:	bf0c      	ite	eq
 800b8d4:	f8c8 2000 	streq.w	r2, [r8]
 800b8d8:	605a      	strne	r2, [r3, #4]
 800b8da:	e7eb      	b.n	800b8b4 <_malloc_r+0xa8>
 800b8dc:	4623      	mov	r3, r4
 800b8de:	6864      	ldr	r4, [r4, #4]
 800b8e0:	e7ae      	b.n	800b840 <_malloc_r+0x34>
 800b8e2:	463c      	mov	r4, r7
 800b8e4:	687f      	ldr	r7, [r7, #4]
 800b8e6:	e7b6      	b.n	800b856 <_malloc_r+0x4a>
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	42a3      	cmp	r3, r4
 800b8ee:	d1fb      	bne.n	800b8e8 <_malloc_r+0xdc>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6053      	str	r3, [r2, #4]
 800b8f4:	e7de      	b.n	800b8b4 <_malloc_r+0xa8>
 800b8f6:	230c      	movs	r3, #12
 800b8f8:	6033      	str	r3, [r6, #0]
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f000 f80c 	bl	800b918 <__malloc_unlock>
 800b900:	e794      	b.n	800b82c <_malloc_r+0x20>
 800b902:	6005      	str	r5, [r0, #0]
 800b904:	e7d6      	b.n	800b8b4 <_malloc_r+0xa8>
 800b906:	bf00      	nop
 800b908:	20002954 	.word	0x20002954

0800b90c <__malloc_lock>:
 800b90c:	4801      	ldr	r0, [pc, #4]	@ (800b914 <__malloc_lock+0x8>)
 800b90e:	f000 b86d 	b.w	800b9ec <__retarget_lock_acquire_recursive>
 800b912:	bf00      	nop
 800b914:	20002a94 	.word	0x20002a94

0800b918 <__malloc_unlock>:
 800b918:	4801      	ldr	r0, [pc, #4]	@ (800b920 <__malloc_unlock+0x8>)
 800b91a:	f000 b868 	b.w	800b9ee <__retarget_lock_release_recursive>
 800b91e:	bf00      	nop
 800b920:	20002a94 	.word	0x20002a94

0800b924 <siprintf>:
 800b924:	b40e      	push	{r1, r2, r3}
 800b926:	b510      	push	{r4, lr}
 800b928:	b09d      	sub	sp, #116	@ 0x74
 800b92a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b92c:	9002      	str	r0, [sp, #8]
 800b92e:	9006      	str	r0, [sp, #24]
 800b930:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b934:	480a      	ldr	r0, [pc, #40]	@ (800b960 <siprintf+0x3c>)
 800b936:	9107      	str	r1, [sp, #28]
 800b938:	9104      	str	r1, [sp, #16]
 800b93a:	490a      	ldr	r1, [pc, #40]	@ (800b964 <siprintf+0x40>)
 800b93c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b940:	9105      	str	r1, [sp, #20]
 800b942:	2400      	movs	r4, #0
 800b944:	a902      	add	r1, sp, #8
 800b946:	6800      	ldr	r0, [r0, #0]
 800b948:	9301      	str	r3, [sp, #4]
 800b94a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b94c:	f000 f8f6 	bl	800bb3c <_svfiprintf_r>
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	701c      	strb	r4, [r3, #0]
 800b954:	b01d      	add	sp, #116	@ 0x74
 800b956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b95a:	b003      	add	sp, #12
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	20000090 	.word	0x20000090
 800b964:	ffff0208 	.word	0xffff0208

0800b968 <memset>:
 800b968:	4402      	add	r2, r0
 800b96a:	4603      	mov	r3, r0
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d100      	bne.n	800b972 <memset+0xa>
 800b970:	4770      	bx	lr
 800b972:	f803 1b01 	strb.w	r1, [r3], #1
 800b976:	e7f9      	b.n	800b96c <memset+0x4>

0800b978 <_sbrk_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	@ (800b994 <_sbrk_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f8 fa44 	bl	8003e10 <_sbrk>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_sbrk_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_sbrk_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20002a90 	.word	0x20002a90

0800b998 <__errno>:
 800b998:	4b01      	ldr	r3, [pc, #4]	@ (800b9a0 <__errno+0x8>)
 800b99a:	6818      	ldr	r0, [r3, #0]
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	20000090 	.word	0x20000090

0800b9a4 <__libc_init_array>:
 800b9a4:	b570      	push	{r4, r5, r6, lr}
 800b9a6:	4d0d      	ldr	r5, [pc, #52]	@ (800b9dc <__libc_init_array+0x38>)
 800b9a8:	4c0d      	ldr	r4, [pc, #52]	@ (800b9e0 <__libc_init_array+0x3c>)
 800b9aa:	1b64      	subs	r4, r4, r5
 800b9ac:	10a4      	asrs	r4, r4, #2
 800b9ae:	2600      	movs	r6, #0
 800b9b0:	42a6      	cmp	r6, r4
 800b9b2:	d109      	bne.n	800b9c8 <__libc_init_array+0x24>
 800b9b4:	4d0b      	ldr	r5, [pc, #44]	@ (800b9e4 <__libc_init_array+0x40>)
 800b9b6:	4c0c      	ldr	r4, [pc, #48]	@ (800b9e8 <__libc_init_array+0x44>)
 800b9b8:	f000 fba6 	bl	800c108 <_init>
 800b9bc:	1b64      	subs	r4, r4, r5
 800b9be:	10a4      	asrs	r4, r4, #2
 800b9c0:	2600      	movs	r6, #0
 800b9c2:	42a6      	cmp	r6, r4
 800b9c4:	d105      	bne.n	800b9d2 <__libc_init_array+0x2e>
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9cc:	4798      	blx	r3
 800b9ce:	3601      	adds	r6, #1
 800b9d0:	e7ee      	b.n	800b9b0 <__libc_init_array+0xc>
 800b9d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9d6:	4798      	blx	r3
 800b9d8:	3601      	adds	r6, #1
 800b9da:	e7f2      	b.n	800b9c2 <__libc_init_array+0x1e>
 800b9dc:	0800c7b8 	.word	0x0800c7b8
 800b9e0:	0800c7b8 	.word	0x0800c7b8
 800b9e4:	0800c7b8 	.word	0x0800c7b8
 800b9e8:	0800c7bc 	.word	0x0800c7bc

0800b9ec <__retarget_lock_acquire_recursive>:
 800b9ec:	4770      	bx	lr

0800b9ee <__retarget_lock_release_recursive>:
 800b9ee:	4770      	bx	lr

0800b9f0 <_free_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	2900      	cmp	r1, #0
 800b9f6:	d041      	beq.n	800ba7c <_free_r+0x8c>
 800b9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9fc:	1f0c      	subs	r4, r1, #4
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	bfb8      	it	lt
 800ba02:	18e4      	addlt	r4, r4, r3
 800ba04:	f7ff ff82 	bl	800b90c <__malloc_lock>
 800ba08:	4a1d      	ldr	r2, [pc, #116]	@ (800ba80 <_free_r+0x90>)
 800ba0a:	6813      	ldr	r3, [r2, #0]
 800ba0c:	b933      	cbnz	r3, 800ba1c <_free_r+0x2c>
 800ba0e:	6063      	str	r3, [r4, #4]
 800ba10:	6014      	str	r4, [r2, #0]
 800ba12:	4628      	mov	r0, r5
 800ba14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba18:	f7ff bf7e 	b.w	800b918 <__malloc_unlock>
 800ba1c:	42a3      	cmp	r3, r4
 800ba1e:	d908      	bls.n	800ba32 <_free_r+0x42>
 800ba20:	6820      	ldr	r0, [r4, #0]
 800ba22:	1821      	adds	r1, r4, r0
 800ba24:	428b      	cmp	r3, r1
 800ba26:	bf01      	itttt	eq
 800ba28:	6819      	ldreq	r1, [r3, #0]
 800ba2a:	685b      	ldreq	r3, [r3, #4]
 800ba2c:	1809      	addeq	r1, r1, r0
 800ba2e:	6021      	streq	r1, [r4, #0]
 800ba30:	e7ed      	b.n	800ba0e <_free_r+0x1e>
 800ba32:	461a      	mov	r2, r3
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	b10b      	cbz	r3, 800ba3c <_free_r+0x4c>
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	d9fa      	bls.n	800ba32 <_free_r+0x42>
 800ba3c:	6811      	ldr	r1, [r2, #0]
 800ba3e:	1850      	adds	r0, r2, r1
 800ba40:	42a0      	cmp	r0, r4
 800ba42:	d10b      	bne.n	800ba5c <_free_r+0x6c>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	4401      	add	r1, r0
 800ba48:	1850      	adds	r0, r2, r1
 800ba4a:	4283      	cmp	r3, r0
 800ba4c:	6011      	str	r1, [r2, #0]
 800ba4e:	d1e0      	bne.n	800ba12 <_free_r+0x22>
 800ba50:	6818      	ldr	r0, [r3, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	6053      	str	r3, [r2, #4]
 800ba56:	4408      	add	r0, r1
 800ba58:	6010      	str	r0, [r2, #0]
 800ba5a:	e7da      	b.n	800ba12 <_free_r+0x22>
 800ba5c:	d902      	bls.n	800ba64 <_free_r+0x74>
 800ba5e:	230c      	movs	r3, #12
 800ba60:	602b      	str	r3, [r5, #0]
 800ba62:	e7d6      	b.n	800ba12 <_free_r+0x22>
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	1821      	adds	r1, r4, r0
 800ba68:	428b      	cmp	r3, r1
 800ba6a:	bf04      	itt	eq
 800ba6c:	6819      	ldreq	r1, [r3, #0]
 800ba6e:	685b      	ldreq	r3, [r3, #4]
 800ba70:	6063      	str	r3, [r4, #4]
 800ba72:	bf04      	itt	eq
 800ba74:	1809      	addeq	r1, r1, r0
 800ba76:	6021      	streq	r1, [r4, #0]
 800ba78:	6054      	str	r4, [r2, #4]
 800ba7a:	e7ca      	b.n	800ba12 <_free_r+0x22>
 800ba7c:	bd38      	pop	{r3, r4, r5, pc}
 800ba7e:	bf00      	nop
 800ba80:	20002954 	.word	0x20002954

0800ba84 <__ssputs_r>:
 800ba84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba88:	688e      	ldr	r6, [r1, #8]
 800ba8a:	461f      	mov	r7, r3
 800ba8c:	42be      	cmp	r6, r7
 800ba8e:	680b      	ldr	r3, [r1, #0]
 800ba90:	4682      	mov	sl, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	4690      	mov	r8, r2
 800ba96:	d82d      	bhi.n	800baf4 <__ssputs_r+0x70>
 800ba98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800baa0:	d026      	beq.n	800baf0 <__ssputs_r+0x6c>
 800baa2:	6965      	ldr	r5, [r4, #20]
 800baa4:	6909      	ldr	r1, [r1, #16]
 800baa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baaa:	eba3 0901 	sub.w	r9, r3, r1
 800baae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bab2:	1c7b      	adds	r3, r7, #1
 800bab4:	444b      	add	r3, r9
 800bab6:	106d      	asrs	r5, r5, #1
 800bab8:	429d      	cmp	r5, r3
 800baba:	bf38      	it	cc
 800babc:	461d      	movcc	r5, r3
 800babe:	0553      	lsls	r3, r2, #21
 800bac0:	d527      	bpl.n	800bb12 <__ssputs_r+0x8e>
 800bac2:	4629      	mov	r1, r5
 800bac4:	f7ff fea2 	bl	800b80c <_malloc_r>
 800bac8:	4606      	mov	r6, r0
 800baca:	b360      	cbz	r0, 800bb26 <__ssputs_r+0xa2>
 800bacc:	6921      	ldr	r1, [r4, #16]
 800bace:	464a      	mov	r2, r9
 800bad0:	f000 fad6 	bl	800c080 <memcpy>
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bade:	81a3      	strh	r3, [r4, #12]
 800bae0:	6126      	str	r6, [r4, #16]
 800bae2:	6165      	str	r5, [r4, #20]
 800bae4:	444e      	add	r6, r9
 800bae6:	eba5 0509 	sub.w	r5, r5, r9
 800baea:	6026      	str	r6, [r4, #0]
 800baec:	60a5      	str	r5, [r4, #8]
 800baee:	463e      	mov	r6, r7
 800baf0:	42be      	cmp	r6, r7
 800baf2:	d900      	bls.n	800baf6 <__ssputs_r+0x72>
 800baf4:	463e      	mov	r6, r7
 800baf6:	6820      	ldr	r0, [r4, #0]
 800baf8:	4632      	mov	r2, r6
 800bafa:	4641      	mov	r1, r8
 800bafc:	f000 faa6 	bl	800c04c <memmove>
 800bb00:	68a3      	ldr	r3, [r4, #8]
 800bb02:	1b9b      	subs	r3, r3, r6
 800bb04:	60a3      	str	r3, [r4, #8]
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	4433      	add	r3, r6
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb12:	462a      	mov	r2, r5
 800bb14:	f000 fac2 	bl	800c09c <_realloc_r>
 800bb18:	4606      	mov	r6, r0
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d1e0      	bne.n	800bae0 <__ssputs_r+0x5c>
 800bb1e:	6921      	ldr	r1, [r4, #16]
 800bb20:	4650      	mov	r0, sl
 800bb22:	f7ff ff65 	bl	800b9f0 <_free_r>
 800bb26:	230c      	movs	r3, #12
 800bb28:	f8ca 3000 	str.w	r3, [sl]
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295
 800bb38:	e7e9      	b.n	800bb0e <__ssputs_r+0x8a>
	...

0800bb3c <_svfiprintf_r>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	4698      	mov	r8, r3
 800bb42:	898b      	ldrh	r3, [r1, #12]
 800bb44:	061b      	lsls	r3, r3, #24
 800bb46:	b09d      	sub	sp, #116	@ 0x74
 800bb48:	4607      	mov	r7, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	d510      	bpl.n	800bb72 <_svfiprintf_r+0x36>
 800bb50:	690b      	ldr	r3, [r1, #16]
 800bb52:	b973      	cbnz	r3, 800bb72 <_svfiprintf_r+0x36>
 800bb54:	2140      	movs	r1, #64	@ 0x40
 800bb56:	f7ff fe59 	bl	800b80c <_malloc_r>
 800bb5a:	6028      	str	r0, [r5, #0]
 800bb5c:	6128      	str	r0, [r5, #16]
 800bb5e:	b930      	cbnz	r0, 800bb6e <_svfiprintf_r+0x32>
 800bb60:	230c      	movs	r3, #12
 800bb62:	603b      	str	r3, [r7, #0]
 800bb64:	f04f 30ff 	mov.w	r0, #4294967295
 800bb68:	b01d      	add	sp, #116	@ 0x74
 800bb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6e:	2340      	movs	r3, #64	@ 0x40
 800bb70:	616b      	str	r3, [r5, #20]
 800bb72:	2300      	movs	r3, #0
 800bb74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb76:	2320      	movs	r3, #32
 800bb78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb80:	2330      	movs	r3, #48	@ 0x30
 800bb82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd20 <_svfiprintf_r+0x1e4>
 800bb86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb8a:	f04f 0901 	mov.w	r9, #1
 800bb8e:	4623      	mov	r3, r4
 800bb90:	469a      	mov	sl, r3
 800bb92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb96:	b10a      	cbz	r2, 800bb9c <_svfiprintf_r+0x60>
 800bb98:	2a25      	cmp	r2, #37	@ 0x25
 800bb9a:	d1f9      	bne.n	800bb90 <_svfiprintf_r+0x54>
 800bb9c:	ebba 0b04 	subs.w	fp, sl, r4
 800bba0:	d00b      	beq.n	800bbba <_svfiprintf_r+0x7e>
 800bba2:	465b      	mov	r3, fp
 800bba4:	4622      	mov	r2, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff ff6b 	bl	800ba84 <__ssputs_r>
 800bbae:	3001      	adds	r0, #1
 800bbb0:	f000 80a7 	beq.w	800bd02 <_svfiprintf_r+0x1c6>
 800bbb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb6:	445a      	add	r2, fp
 800bbb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbba:	f89a 3000 	ldrb.w	r3, [sl]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f000 809f 	beq.w	800bd02 <_svfiprintf_r+0x1c6>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbce:	f10a 0a01 	add.w	sl, sl, #1
 800bbd2:	9304      	str	r3, [sp, #16]
 800bbd4:	9307      	str	r3, [sp, #28]
 800bbd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbda:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbdc:	4654      	mov	r4, sl
 800bbde:	2205      	movs	r2, #5
 800bbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe4:	484e      	ldr	r0, [pc, #312]	@ (800bd20 <_svfiprintf_r+0x1e4>)
 800bbe6:	f7f4 faf3 	bl	80001d0 <memchr>
 800bbea:	9a04      	ldr	r2, [sp, #16]
 800bbec:	b9d8      	cbnz	r0, 800bc26 <_svfiprintf_r+0xea>
 800bbee:	06d0      	lsls	r0, r2, #27
 800bbf0:	bf44      	itt	mi
 800bbf2:	2320      	movmi	r3, #32
 800bbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf8:	0711      	lsls	r1, r2, #28
 800bbfa:	bf44      	itt	mi
 800bbfc:	232b      	movmi	r3, #43	@ 0x2b
 800bbfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc02:	f89a 3000 	ldrb.w	r3, [sl]
 800bc06:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc08:	d015      	beq.n	800bc36 <_svfiprintf_r+0xfa>
 800bc0a:	9a07      	ldr	r2, [sp, #28]
 800bc0c:	4654      	mov	r4, sl
 800bc0e:	2000      	movs	r0, #0
 800bc10:	f04f 0c0a 	mov.w	ip, #10
 800bc14:	4621      	mov	r1, r4
 800bc16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc1a:	3b30      	subs	r3, #48	@ 0x30
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d94b      	bls.n	800bcb8 <_svfiprintf_r+0x17c>
 800bc20:	b1b0      	cbz	r0, 800bc50 <_svfiprintf_r+0x114>
 800bc22:	9207      	str	r2, [sp, #28]
 800bc24:	e014      	b.n	800bc50 <_svfiprintf_r+0x114>
 800bc26:	eba0 0308 	sub.w	r3, r0, r8
 800bc2a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	46a2      	mov	sl, r4
 800bc34:	e7d2      	b.n	800bbdc <_svfiprintf_r+0xa0>
 800bc36:	9b03      	ldr	r3, [sp, #12]
 800bc38:	1d19      	adds	r1, r3, #4
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	9103      	str	r1, [sp, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	bfbb      	ittet	lt
 800bc42:	425b      	neglt	r3, r3
 800bc44:	f042 0202 	orrlt.w	r2, r2, #2
 800bc48:	9307      	strge	r3, [sp, #28]
 800bc4a:	9307      	strlt	r3, [sp, #28]
 800bc4c:	bfb8      	it	lt
 800bc4e:	9204      	strlt	r2, [sp, #16]
 800bc50:	7823      	ldrb	r3, [r4, #0]
 800bc52:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc54:	d10a      	bne.n	800bc6c <_svfiprintf_r+0x130>
 800bc56:	7863      	ldrb	r3, [r4, #1]
 800bc58:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc5a:	d132      	bne.n	800bcc2 <_svfiprintf_r+0x186>
 800bc5c:	9b03      	ldr	r3, [sp, #12]
 800bc5e:	1d1a      	adds	r2, r3, #4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	9203      	str	r2, [sp, #12]
 800bc64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc68:	3402      	adds	r4, #2
 800bc6a:	9305      	str	r3, [sp, #20]
 800bc6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd30 <_svfiprintf_r+0x1f4>
 800bc70:	7821      	ldrb	r1, [r4, #0]
 800bc72:	2203      	movs	r2, #3
 800bc74:	4650      	mov	r0, sl
 800bc76:	f7f4 faab 	bl	80001d0 <memchr>
 800bc7a:	b138      	cbz	r0, 800bc8c <_svfiprintf_r+0x150>
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	eba0 000a 	sub.w	r0, r0, sl
 800bc82:	2240      	movs	r2, #64	@ 0x40
 800bc84:	4082      	lsls	r2, r0
 800bc86:	4313      	orrs	r3, r2
 800bc88:	3401      	adds	r4, #1
 800bc8a:	9304      	str	r3, [sp, #16]
 800bc8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc90:	4824      	ldr	r0, [pc, #144]	@ (800bd24 <_svfiprintf_r+0x1e8>)
 800bc92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc96:	2206      	movs	r2, #6
 800bc98:	f7f4 fa9a 	bl	80001d0 <memchr>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d036      	beq.n	800bd0e <_svfiprintf_r+0x1d2>
 800bca0:	4b21      	ldr	r3, [pc, #132]	@ (800bd28 <_svfiprintf_r+0x1ec>)
 800bca2:	bb1b      	cbnz	r3, 800bcec <_svfiprintf_r+0x1b0>
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	3307      	adds	r3, #7
 800bca8:	f023 0307 	bic.w	r3, r3, #7
 800bcac:	3308      	adds	r3, #8
 800bcae:	9303      	str	r3, [sp, #12]
 800bcb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb2:	4433      	add	r3, r6
 800bcb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb6:	e76a      	b.n	800bb8e <_svfiprintf_r+0x52>
 800bcb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	e7a8      	b.n	800bc14 <_svfiprintf_r+0xd8>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	3401      	adds	r4, #1
 800bcc6:	9305      	str	r3, [sp, #20]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	f04f 0c0a 	mov.w	ip, #10
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd4:	3a30      	subs	r2, #48	@ 0x30
 800bcd6:	2a09      	cmp	r2, #9
 800bcd8:	d903      	bls.n	800bce2 <_svfiprintf_r+0x1a6>
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0c6      	beq.n	800bc6c <_svfiprintf_r+0x130>
 800bcde:	9105      	str	r1, [sp, #20]
 800bce0:	e7c4      	b.n	800bc6c <_svfiprintf_r+0x130>
 800bce2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce6:	4604      	mov	r4, r0
 800bce8:	2301      	movs	r3, #1
 800bcea:	e7f0      	b.n	800bcce <_svfiprintf_r+0x192>
 800bcec:	ab03      	add	r3, sp, #12
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	462a      	mov	r2, r5
 800bcf2:	4b0e      	ldr	r3, [pc, #56]	@ (800bd2c <_svfiprintf_r+0x1f0>)
 800bcf4:	a904      	add	r1, sp, #16
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	f3af 8000 	nop.w
 800bcfc:	1c42      	adds	r2, r0, #1
 800bcfe:	4606      	mov	r6, r0
 800bd00:	d1d6      	bne.n	800bcb0 <_svfiprintf_r+0x174>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	065b      	lsls	r3, r3, #25
 800bd06:	f53f af2d 	bmi.w	800bb64 <_svfiprintf_r+0x28>
 800bd0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd0c:	e72c      	b.n	800bb68 <_svfiprintf_r+0x2c>
 800bd0e:	ab03      	add	r3, sp, #12
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	462a      	mov	r2, r5
 800bd14:	4b05      	ldr	r3, [pc, #20]	@ (800bd2c <_svfiprintf_r+0x1f0>)
 800bd16:	a904      	add	r1, sp, #16
 800bd18:	4638      	mov	r0, r7
 800bd1a:	f000 f879 	bl	800be10 <_printf_i>
 800bd1e:	e7ed      	b.n	800bcfc <_svfiprintf_r+0x1c0>
 800bd20:	0800c77c 	.word	0x0800c77c
 800bd24:	0800c786 	.word	0x0800c786
 800bd28:	00000000 	.word	0x00000000
 800bd2c:	0800ba85 	.word	0x0800ba85
 800bd30:	0800c782 	.word	0x0800c782

0800bd34 <_printf_common>:
 800bd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd38:	4616      	mov	r6, r2
 800bd3a:	4698      	mov	r8, r3
 800bd3c:	688a      	ldr	r2, [r1, #8]
 800bd3e:	690b      	ldr	r3, [r1, #16]
 800bd40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd44:	4293      	cmp	r3, r2
 800bd46:	bfb8      	it	lt
 800bd48:	4613      	movlt	r3, r2
 800bd4a:	6033      	str	r3, [r6, #0]
 800bd4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd50:	4607      	mov	r7, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	b10a      	cbz	r2, 800bd5a <_printf_common+0x26>
 800bd56:	3301      	adds	r3, #1
 800bd58:	6033      	str	r3, [r6, #0]
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	0699      	lsls	r1, r3, #26
 800bd5e:	bf42      	ittt	mi
 800bd60:	6833      	ldrmi	r3, [r6, #0]
 800bd62:	3302      	addmi	r3, #2
 800bd64:	6033      	strmi	r3, [r6, #0]
 800bd66:	6825      	ldr	r5, [r4, #0]
 800bd68:	f015 0506 	ands.w	r5, r5, #6
 800bd6c:	d106      	bne.n	800bd7c <_printf_common+0x48>
 800bd6e:	f104 0a19 	add.w	sl, r4, #25
 800bd72:	68e3      	ldr	r3, [r4, #12]
 800bd74:	6832      	ldr	r2, [r6, #0]
 800bd76:	1a9b      	subs	r3, r3, r2
 800bd78:	42ab      	cmp	r3, r5
 800bd7a:	dc26      	bgt.n	800bdca <_printf_common+0x96>
 800bd7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd80:	6822      	ldr	r2, [r4, #0]
 800bd82:	3b00      	subs	r3, #0
 800bd84:	bf18      	it	ne
 800bd86:	2301      	movne	r3, #1
 800bd88:	0692      	lsls	r2, r2, #26
 800bd8a:	d42b      	bmi.n	800bde4 <_printf_common+0xb0>
 800bd8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd90:	4641      	mov	r1, r8
 800bd92:	4638      	mov	r0, r7
 800bd94:	47c8      	blx	r9
 800bd96:	3001      	adds	r0, #1
 800bd98:	d01e      	beq.n	800bdd8 <_printf_common+0xa4>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	6922      	ldr	r2, [r4, #16]
 800bd9e:	f003 0306 	and.w	r3, r3, #6
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	bf02      	ittt	eq
 800bda6:	68e5      	ldreq	r5, [r4, #12]
 800bda8:	6833      	ldreq	r3, [r6, #0]
 800bdaa:	1aed      	subeq	r5, r5, r3
 800bdac:	68a3      	ldr	r3, [r4, #8]
 800bdae:	bf0c      	ite	eq
 800bdb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb4:	2500      	movne	r5, #0
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	bfc4      	itt	gt
 800bdba:	1a9b      	subgt	r3, r3, r2
 800bdbc:	18ed      	addgt	r5, r5, r3
 800bdbe:	2600      	movs	r6, #0
 800bdc0:	341a      	adds	r4, #26
 800bdc2:	42b5      	cmp	r5, r6
 800bdc4:	d11a      	bne.n	800bdfc <_printf_common+0xc8>
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	e008      	b.n	800bddc <_printf_common+0xa8>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4652      	mov	r2, sl
 800bdce:	4641      	mov	r1, r8
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	47c8      	blx	r9
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d103      	bne.n	800bde0 <_printf_common+0xac>
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde0:	3501      	adds	r5, #1
 800bde2:	e7c6      	b.n	800bd72 <_printf_common+0x3e>
 800bde4:	18e1      	adds	r1, r4, r3
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	2030      	movs	r0, #48	@ 0x30
 800bdea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdee:	4422      	add	r2, r4
 800bdf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bdf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdf8:	3302      	adds	r3, #2
 800bdfa:	e7c7      	b.n	800bd8c <_printf_common+0x58>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	4622      	mov	r2, r4
 800be00:	4641      	mov	r1, r8
 800be02:	4638      	mov	r0, r7
 800be04:	47c8      	blx	r9
 800be06:	3001      	adds	r0, #1
 800be08:	d0e6      	beq.n	800bdd8 <_printf_common+0xa4>
 800be0a:	3601      	adds	r6, #1
 800be0c:	e7d9      	b.n	800bdc2 <_printf_common+0x8e>
	...

0800be10 <_printf_i>:
 800be10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	7e0f      	ldrb	r7, [r1, #24]
 800be16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be18:	2f78      	cmp	r7, #120	@ 0x78
 800be1a:	4691      	mov	r9, r2
 800be1c:	4680      	mov	r8, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	469a      	mov	sl, r3
 800be22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be26:	d807      	bhi.n	800be38 <_printf_i+0x28>
 800be28:	2f62      	cmp	r7, #98	@ 0x62
 800be2a:	d80a      	bhi.n	800be42 <_printf_i+0x32>
 800be2c:	2f00      	cmp	r7, #0
 800be2e:	f000 80d1 	beq.w	800bfd4 <_printf_i+0x1c4>
 800be32:	2f58      	cmp	r7, #88	@ 0x58
 800be34:	f000 80b8 	beq.w	800bfa8 <_printf_i+0x198>
 800be38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be40:	e03a      	b.n	800beb8 <_printf_i+0xa8>
 800be42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be46:	2b15      	cmp	r3, #21
 800be48:	d8f6      	bhi.n	800be38 <_printf_i+0x28>
 800be4a:	a101      	add	r1, pc, #4	@ (adr r1, 800be50 <_printf_i+0x40>)
 800be4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be50:	0800bea9 	.word	0x0800bea9
 800be54:	0800bebd 	.word	0x0800bebd
 800be58:	0800be39 	.word	0x0800be39
 800be5c:	0800be39 	.word	0x0800be39
 800be60:	0800be39 	.word	0x0800be39
 800be64:	0800be39 	.word	0x0800be39
 800be68:	0800bebd 	.word	0x0800bebd
 800be6c:	0800be39 	.word	0x0800be39
 800be70:	0800be39 	.word	0x0800be39
 800be74:	0800be39 	.word	0x0800be39
 800be78:	0800be39 	.word	0x0800be39
 800be7c:	0800bfbb 	.word	0x0800bfbb
 800be80:	0800bee7 	.word	0x0800bee7
 800be84:	0800bf75 	.word	0x0800bf75
 800be88:	0800be39 	.word	0x0800be39
 800be8c:	0800be39 	.word	0x0800be39
 800be90:	0800bfdd 	.word	0x0800bfdd
 800be94:	0800be39 	.word	0x0800be39
 800be98:	0800bee7 	.word	0x0800bee7
 800be9c:	0800be39 	.word	0x0800be39
 800bea0:	0800be39 	.word	0x0800be39
 800bea4:	0800bf7d 	.word	0x0800bf7d
 800bea8:	6833      	ldr	r3, [r6, #0]
 800beaa:	1d1a      	adds	r2, r3, #4
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6032      	str	r2, [r6, #0]
 800beb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800beb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800beb8:	2301      	movs	r3, #1
 800beba:	e09c      	b.n	800bff6 <_printf_i+0x1e6>
 800bebc:	6833      	ldr	r3, [r6, #0]
 800bebe:	6820      	ldr	r0, [r4, #0]
 800bec0:	1d19      	adds	r1, r3, #4
 800bec2:	6031      	str	r1, [r6, #0]
 800bec4:	0606      	lsls	r6, r0, #24
 800bec6:	d501      	bpl.n	800becc <_printf_i+0xbc>
 800bec8:	681d      	ldr	r5, [r3, #0]
 800beca:	e003      	b.n	800bed4 <_printf_i+0xc4>
 800becc:	0645      	lsls	r5, r0, #25
 800bece:	d5fb      	bpl.n	800bec8 <_printf_i+0xb8>
 800bed0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bed4:	2d00      	cmp	r5, #0
 800bed6:	da03      	bge.n	800bee0 <_printf_i+0xd0>
 800bed8:	232d      	movs	r3, #45	@ 0x2d
 800beda:	426d      	negs	r5, r5
 800bedc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bee0:	4858      	ldr	r0, [pc, #352]	@ (800c044 <_printf_i+0x234>)
 800bee2:	230a      	movs	r3, #10
 800bee4:	e011      	b.n	800bf0a <_printf_i+0xfa>
 800bee6:	6821      	ldr	r1, [r4, #0]
 800bee8:	6833      	ldr	r3, [r6, #0]
 800beea:	0608      	lsls	r0, r1, #24
 800beec:	f853 5b04 	ldr.w	r5, [r3], #4
 800bef0:	d402      	bmi.n	800bef8 <_printf_i+0xe8>
 800bef2:	0649      	lsls	r1, r1, #25
 800bef4:	bf48      	it	mi
 800bef6:	b2ad      	uxthmi	r5, r5
 800bef8:	2f6f      	cmp	r7, #111	@ 0x6f
 800befa:	4852      	ldr	r0, [pc, #328]	@ (800c044 <_printf_i+0x234>)
 800befc:	6033      	str	r3, [r6, #0]
 800befe:	bf14      	ite	ne
 800bf00:	230a      	movne	r3, #10
 800bf02:	2308      	moveq	r3, #8
 800bf04:	2100      	movs	r1, #0
 800bf06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf0a:	6866      	ldr	r6, [r4, #4]
 800bf0c:	60a6      	str	r6, [r4, #8]
 800bf0e:	2e00      	cmp	r6, #0
 800bf10:	db05      	blt.n	800bf1e <_printf_i+0x10e>
 800bf12:	6821      	ldr	r1, [r4, #0]
 800bf14:	432e      	orrs	r6, r5
 800bf16:	f021 0104 	bic.w	r1, r1, #4
 800bf1a:	6021      	str	r1, [r4, #0]
 800bf1c:	d04b      	beq.n	800bfb6 <_printf_i+0x1a6>
 800bf1e:	4616      	mov	r6, r2
 800bf20:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf24:	fb03 5711 	mls	r7, r3, r1, r5
 800bf28:	5dc7      	ldrb	r7, [r0, r7]
 800bf2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf2e:	462f      	mov	r7, r5
 800bf30:	42bb      	cmp	r3, r7
 800bf32:	460d      	mov	r5, r1
 800bf34:	d9f4      	bls.n	800bf20 <_printf_i+0x110>
 800bf36:	2b08      	cmp	r3, #8
 800bf38:	d10b      	bne.n	800bf52 <_printf_i+0x142>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	07df      	lsls	r7, r3, #31
 800bf3e:	d508      	bpl.n	800bf52 <_printf_i+0x142>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	6861      	ldr	r1, [r4, #4]
 800bf44:	4299      	cmp	r1, r3
 800bf46:	bfde      	ittt	le
 800bf48:	2330      	movle	r3, #48	@ 0x30
 800bf4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf52:	1b92      	subs	r2, r2, r6
 800bf54:	6122      	str	r2, [r4, #16]
 800bf56:	f8cd a000 	str.w	sl, [sp]
 800bf5a:	464b      	mov	r3, r9
 800bf5c:	aa03      	add	r2, sp, #12
 800bf5e:	4621      	mov	r1, r4
 800bf60:	4640      	mov	r0, r8
 800bf62:	f7ff fee7 	bl	800bd34 <_printf_common>
 800bf66:	3001      	adds	r0, #1
 800bf68:	d14a      	bne.n	800c000 <_printf_i+0x1f0>
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6e:	b004      	add	sp, #16
 800bf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	f043 0320 	orr.w	r3, r3, #32
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	4832      	ldr	r0, [pc, #200]	@ (800c048 <_printf_i+0x238>)
 800bf7e:	2778      	movs	r7, #120	@ 0x78
 800bf80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	6831      	ldr	r1, [r6, #0]
 800bf88:	061f      	lsls	r7, r3, #24
 800bf8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf8e:	d402      	bmi.n	800bf96 <_printf_i+0x186>
 800bf90:	065f      	lsls	r7, r3, #25
 800bf92:	bf48      	it	mi
 800bf94:	b2ad      	uxthmi	r5, r5
 800bf96:	6031      	str	r1, [r6, #0]
 800bf98:	07d9      	lsls	r1, r3, #31
 800bf9a:	bf44      	itt	mi
 800bf9c:	f043 0320 	orrmi.w	r3, r3, #32
 800bfa0:	6023      	strmi	r3, [r4, #0]
 800bfa2:	b11d      	cbz	r5, 800bfac <_printf_i+0x19c>
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	e7ad      	b.n	800bf04 <_printf_i+0xf4>
 800bfa8:	4826      	ldr	r0, [pc, #152]	@ (800c044 <_printf_i+0x234>)
 800bfaa:	e7e9      	b.n	800bf80 <_printf_i+0x170>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	f023 0320 	bic.w	r3, r3, #32
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	e7f6      	b.n	800bfa4 <_printf_i+0x194>
 800bfb6:	4616      	mov	r6, r2
 800bfb8:	e7bd      	b.n	800bf36 <_printf_i+0x126>
 800bfba:	6833      	ldr	r3, [r6, #0]
 800bfbc:	6825      	ldr	r5, [r4, #0]
 800bfbe:	6961      	ldr	r1, [r4, #20]
 800bfc0:	1d18      	adds	r0, r3, #4
 800bfc2:	6030      	str	r0, [r6, #0]
 800bfc4:	062e      	lsls	r6, r5, #24
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	d501      	bpl.n	800bfce <_printf_i+0x1be>
 800bfca:	6019      	str	r1, [r3, #0]
 800bfcc:	e002      	b.n	800bfd4 <_printf_i+0x1c4>
 800bfce:	0668      	lsls	r0, r5, #25
 800bfd0:	d5fb      	bpl.n	800bfca <_printf_i+0x1ba>
 800bfd2:	8019      	strh	r1, [r3, #0]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	4616      	mov	r6, r2
 800bfda:	e7bc      	b.n	800bf56 <_printf_i+0x146>
 800bfdc:	6833      	ldr	r3, [r6, #0]
 800bfde:	1d1a      	adds	r2, r3, #4
 800bfe0:	6032      	str	r2, [r6, #0]
 800bfe2:	681e      	ldr	r6, [r3, #0]
 800bfe4:	6862      	ldr	r2, [r4, #4]
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7f4 f8f1 	bl	80001d0 <memchr>
 800bfee:	b108      	cbz	r0, 800bff4 <_printf_i+0x1e4>
 800bff0:	1b80      	subs	r0, r0, r6
 800bff2:	6060      	str	r0, [r4, #4]
 800bff4:	6863      	ldr	r3, [r4, #4]
 800bff6:	6123      	str	r3, [r4, #16]
 800bff8:	2300      	movs	r3, #0
 800bffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bffe:	e7aa      	b.n	800bf56 <_printf_i+0x146>
 800c000:	6923      	ldr	r3, [r4, #16]
 800c002:	4632      	mov	r2, r6
 800c004:	4649      	mov	r1, r9
 800c006:	4640      	mov	r0, r8
 800c008:	47d0      	blx	sl
 800c00a:	3001      	adds	r0, #1
 800c00c:	d0ad      	beq.n	800bf6a <_printf_i+0x15a>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	079b      	lsls	r3, r3, #30
 800c012:	d413      	bmi.n	800c03c <_printf_i+0x22c>
 800c014:	68e0      	ldr	r0, [r4, #12]
 800c016:	9b03      	ldr	r3, [sp, #12]
 800c018:	4298      	cmp	r0, r3
 800c01a:	bfb8      	it	lt
 800c01c:	4618      	movlt	r0, r3
 800c01e:	e7a6      	b.n	800bf6e <_printf_i+0x15e>
 800c020:	2301      	movs	r3, #1
 800c022:	4632      	mov	r2, r6
 800c024:	4649      	mov	r1, r9
 800c026:	4640      	mov	r0, r8
 800c028:	47d0      	blx	sl
 800c02a:	3001      	adds	r0, #1
 800c02c:	d09d      	beq.n	800bf6a <_printf_i+0x15a>
 800c02e:	3501      	adds	r5, #1
 800c030:	68e3      	ldr	r3, [r4, #12]
 800c032:	9903      	ldr	r1, [sp, #12]
 800c034:	1a5b      	subs	r3, r3, r1
 800c036:	42ab      	cmp	r3, r5
 800c038:	dcf2      	bgt.n	800c020 <_printf_i+0x210>
 800c03a:	e7eb      	b.n	800c014 <_printf_i+0x204>
 800c03c:	2500      	movs	r5, #0
 800c03e:	f104 0619 	add.w	r6, r4, #25
 800c042:	e7f5      	b.n	800c030 <_printf_i+0x220>
 800c044:	0800c78d 	.word	0x0800c78d
 800c048:	0800c79e 	.word	0x0800c79e

0800c04c <memmove>:
 800c04c:	4288      	cmp	r0, r1
 800c04e:	b510      	push	{r4, lr}
 800c050:	eb01 0402 	add.w	r4, r1, r2
 800c054:	d902      	bls.n	800c05c <memmove+0x10>
 800c056:	4284      	cmp	r4, r0
 800c058:	4623      	mov	r3, r4
 800c05a:	d807      	bhi.n	800c06c <memmove+0x20>
 800c05c:	1e43      	subs	r3, r0, #1
 800c05e:	42a1      	cmp	r1, r4
 800c060:	d008      	beq.n	800c074 <memmove+0x28>
 800c062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c06a:	e7f8      	b.n	800c05e <memmove+0x12>
 800c06c:	4402      	add	r2, r0
 800c06e:	4601      	mov	r1, r0
 800c070:	428a      	cmp	r2, r1
 800c072:	d100      	bne.n	800c076 <memmove+0x2a>
 800c074:	bd10      	pop	{r4, pc}
 800c076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c07e:	e7f7      	b.n	800c070 <memmove+0x24>

0800c080 <memcpy>:
 800c080:	440a      	add	r2, r1
 800c082:	4291      	cmp	r1, r2
 800c084:	f100 33ff 	add.w	r3, r0, #4294967295
 800c088:	d100      	bne.n	800c08c <memcpy+0xc>
 800c08a:	4770      	bx	lr
 800c08c:	b510      	push	{r4, lr}
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c096:	4291      	cmp	r1, r2
 800c098:	d1f9      	bne.n	800c08e <memcpy+0xe>
 800c09a:	bd10      	pop	{r4, pc}

0800c09c <_realloc_r>:
 800c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	4614      	mov	r4, r2
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	b921      	cbnz	r1, 800c0b2 <_realloc_r+0x16>
 800c0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	f7ff bbad 	b.w	800b80c <_malloc_r>
 800c0b2:	b92a      	cbnz	r2, 800c0c0 <_realloc_r+0x24>
 800c0b4:	f7ff fc9c 	bl	800b9f0 <_free_r>
 800c0b8:	4625      	mov	r5, r4
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c0:	f000 f81a 	bl	800c0f8 <_malloc_usable_size_r>
 800c0c4:	4284      	cmp	r4, r0
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	d802      	bhi.n	800c0d0 <_realloc_r+0x34>
 800c0ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0ce:	d8f4      	bhi.n	800c0ba <_realloc_r+0x1e>
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	f7ff fb9a 	bl	800b80c <_malloc_r>
 800c0d8:	4680      	mov	r8, r0
 800c0da:	b908      	cbnz	r0, 800c0e0 <_realloc_r+0x44>
 800c0dc:	4645      	mov	r5, r8
 800c0de:	e7ec      	b.n	800c0ba <_realloc_r+0x1e>
 800c0e0:	42b4      	cmp	r4, r6
 800c0e2:	4622      	mov	r2, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	bf28      	it	cs
 800c0e8:	4632      	movcs	r2, r6
 800c0ea:	f7ff ffc9 	bl	800c080 <memcpy>
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7ff fc7d 	bl	800b9f0 <_free_r>
 800c0f6:	e7f1      	b.n	800c0dc <_realloc_r+0x40>

0800c0f8 <_malloc_usable_size_r>:
 800c0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0fc:	1f18      	subs	r0, r3, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	bfbc      	itt	lt
 800c102:	580b      	ldrlt	r3, [r1, r0]
 800c104:	18c0      	addlt	r0, r0, r3
 800c106:	4770      	bx	lr

0800c108 <_init>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	bf00      	nop
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr

0800c114 <_fini>:
 800c114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c116:	bf00      	nop
 800c118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11a:	bc08      	pop	{r3}
 800c11c:	469e      	mov	lr, r3
 800c11e:	4770      	bx	lr
